process P  = 
{

   # include services
   include "Configuration/ReleaseValidation/data/Services.cfi"

   # initialize MessageLogger
   include "FWCore/MessageLogger/data/MessageLogger.cfi"
   
   service = RandomNumberGeneratorService  
   {
      untracked uint32 sourceSeed = 123456789
      PSet moduleSeeds =
      {
	 untracked uint32 g4SimHits  = 98765432
         untracked uint32 VtxSmeared = 87654321
         untracked uint32 mix = 12345
      }   
   }

   untracked PSet options = {
     untracked bool makeTriggerResults = false
     vstring listOfTriggers = {}
  }

# The actual number of accepted generated events will be of the order of 3 * numberEventsInRun for a min weight of 0.01 and that pt cut.
# simulation takes places in 2 steps : events not involving b-c partons only, followed by 1/wbc * number of calls to pyevnt() to generate 
# the first run of accepted events, accepting only events involving c and b partons, reweighting them by a factor wbc.
# altogether one should get 2 runs (or more if the minimum accepted weight is lowered)
# wtype = 1 adapted cuts for only 1 muon, otherwise ptmin, wtype=3 pthat > 10 
 
   include "GeneratorInterface/MuEnrichInterface/data/PythiaMuEnrichSourceMinBias.cfi"
    replace PythiaMuEnrichSource.maxEvents = 100    //keep this much larger than the number of events in run 
    replace PythiaMuEnrichSource.numberEventsInRun =34
    replace PythiaMuEnrichSource.wmin = 0.01
    replace PythiaMuEnrichSource.ptmin = 4
    replace PythiaMuEnrichSource.wtype = 2  


  module GEN = PoolOutputModule
  {

    untracked string fileName = "muEnrich_type2.root"
    untracked PSet datasets ={
        untracked PSet dataset1 = {
            untracked string dataTier = "GEN"
        }

    }
  }

  endpath outpath = {GEN}
 

}		
