process PROD  = 
{
   # initialize  MessageLogger
   include "FWCore/MessageService/data/MessageLogger.cfi"
   replace MessageLogger.cout.threshold = "ERROR"
   replace MessageLogger.cerr.default.limit = 10

   service = Timing {}
   
   service = RandomNumberGeneratorService
   {
      untracked uint32 sourceSeed = 123456789
      PSet moduleSeeds =
      {
         untracked uint32 VtxSmeared = 987654321
      }
   }

   # generation paramters
   # alternatively:  include "Configuration/Generator/data/PythiaZmumu.cfg"
   source = PythiaSource 
   { 
     untracked int32 maxEvents = 50
     untracked int32 pythiaPylistVerbosity = 0
     untracked bool pythiaHepMCVerbosity = false
     untracked int32 maxEventsToPrint = 0

    PSet PythiaParameters = {

    # This is a vector of ParameterSet names to be read, in this order
    vstring parameterSets = {
      "pythiaUESettings", 
      "processParameters"
    }
    
    vstring pythiaUESettings = {
      'MSTJ(11)=3     ! Choice of the fragmentation function',
      'MSTJ(22)=2     ! Decay those unstable particles',
      'PARJ(71)=10 .  ! for which ctau  10 mm',
      'MSTP(2)=1      ! which order running alphaS',
      'MSTP(33)=0     ! no K factors in hard cross sections',
      'MSTP(51)=7     ! structure function chosen',
      'MSTP(81)=1     ! multiple parton interactions 1 is Pythia default',
      'MSTP(82)=4     ! Defines the multi-parton model',
      'MSTU(21)=1     ! Check on possible errors during program execution',
      'PARP(82)=1.9409   ! pt cutoff for multiparton interactions',
      'PARP(89)=1960. ! sqrts for which PARP82 is set',
      'PARP(83)=0.5   ! Multiple interactions: matter distrbn parameter',
      'PARP(84)=0.4   ! Multiple interactions: matter distribution parameter',
      'PARP(90)=0.16  ! Multiple interactions: rescaling power',
      'PARP(67)=2.5    ! amount of initial-state radiation',
      'PARP(85)=1.0  ! gluon prod. mechanism in MI',
      'PARP(86)=1.0  ! gluon prod. mechanism in MI',
      'PARP(62)=1.25   ! ',
      'PARP(64)=0.2    ! ',
      'MSTP(91)=1     !',
      'PARP(91)=2.1   ! kt distribution',
      'PARP(93)=15.0  ! '
    }
  
    vstring processParameters = {
        'MSEL=0                  !User defined processes',
        'MSUB(1)=1               !Incl Z0/gamma* production',
        'MSTP(43)=2              !Only Z0', 
        'MDME(174,1)=0           !Z decay into d dbar',        
        'MDME(175,1)=0           !Z decay into u ubar',
        'MDME(176,1)=0           !Z decay into s sbar',
        'MDME(177,1)=0           !Z decay into c cbar',
        'MDME(178,1)=0           !Z decay into b bbar',
        'MDME(179,1)=0           !Z decay into t tbar',
        'MDME(182,1)=0           !Z decay into e- e+',
        'MDME(183,1)=0           !Z decay into nu_e nu_ebar',
        'MDME(184,1)=1           !Z decay into mu- mu+',
        'MDME(185,1)=0           !Z decay into nu_mu nu_mubar',
        'MDME(186,1)=0           !Z decay into tau- tau+',
        'MDME(187,1)=0           !Z decay into nu_tau nu_taubar'
    }

   
   }
   }

   
   # event vertex smearing - applies only once (internal check)
   # Note : all internal generatoes will always do (0,0,0) vertex
   #
   module VtxSmeared = VertexGenerator
   {
      string type = "IOMC/EventVertexGenerators/GaussianEventVertexGenerator"
      double MeanX = 0.
      double MeanY = 0.
      double MeanZ = 0.
      double SigmaX = 0.015
      double SigmaY = 0.015
      double SigmaZ = 53.0  // in mm (as in COBRA/OSCAR)
   }


   #Geometry
   #
   include "Geometry/CMSCommonData/data/cmsSimIdealGeometryXML.cfi"
   es_module = TrackerGeometricDetESModule {}
   
   # Magnetic Field
   #
   include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

   # Event, etc. output
   #
   module GEN-SIM-DIGI = PoolOutputModule 
   { 
     untracked string fileName = "zmumu_detsim_digi.root" 
     untracked vstring outputCommands = {
       "keep *",
       "drop *_ecaldigi_*_*"
     }
   }

		
   # Geant4-based CMS Detector simulation
   #
   include "SimG4Core/Application/data/SimG4Object.cfi"

   # Step 3 : Digitization of the simulated hits
   #

   # Step 3a : Digitization of the Tracker
   #

   # required for Pixel and SiStrip Digitizers
   #
   es_module = TrackerDigiGeometryESModule {}

   # Pixel's digitization
   #
   include "SimTracker/SiPixelDigitizer/data/PixelDigi.cfi"

   # SiStrip's digitization
   #
   include "SimTracker/SiStripDigitizer/data/SiStripDigi.cfi"


   # Step 3b : Digitization of Ecal and Hcal

   include "SimCalorimetry/EcalSimProducers/data/ecalDigiSequence.cff"
   
   include "CalibCalorimetry/HcalPlugins/data/hardwired_conditions.cfi"
   include "SimCalorimetry/HcalSimProducers/data/hcaldigi.cfi"


   # Step 3c : Muon Digitization


   # this holds CSC geom service, as need for CSC digi's
   # and the digitizer itself
   #
   include "Geometry/CSCGeometry/data/cscGeometry.cfi"
   include "SimMuon/CSCDigitizer/data/muoncscdigi.cfi"

   # Muon DT digi's

   # this holds geom.service as needed by DT digi's
   # and the digitizer itself
   #
   include "Geometry/DTGeometry/data/dtGeometry.cfi"
   include "SimMuon/DTDigitizer/data/muondtdigi.cfi"

   # this holds geom.service for the RPC digi's
   # the digitizer itself still needs to be given explicitely
   # but since it has no parameters, it doesn't matter...
   # only maybe the label should be agreed upon...
   #
   # Note : as of May 3, 2006, Muon/RPC digi's *hang*
   #        thus it's been taken out of the path...
   # 
   include "Geometry/RPCGeometry/data/rpcGeometry.cfi" 
   include "SimMuon/RPCDigitizer/data/muonrpcdigi.cfi"

   # Mixing Module is *required* to simulated Ecal/Hcal/Muon digitization !

   module mix = MixingModule
   {
#      secsource input = PoolRASource
#      {
         #
         # starting 050, you can skip secsource block at all if you don't
         # wnat to model mixing/pileup at all;
         # however, an at least "empty mixing" need to be present if you
         # want to perform Ecal/Hcal/CSC/DT digitization - those explicitely
         # require presence of CrossingFrame in the edm::Event
         #
         # alternatively, you can set averageNumber=0 if you don't want
         # to model the pileup
         #
         # to the secsource/PoolRASource, you can give just 1 file or more;
         # this files will make a "concatinated buffer", which will go circular
         # until the loop of primary events is done - thus, it'll never run out
         #
         # WARNING: you can only give miltiple files, if they're generated with
         #          identical sets of tracked parameters;
         #          for example, you canNOT give a file made with a single muon
         #          gun and a file made with a single pion gun, because PartID
         #          is a *tracked* parameter in the gun's PSet;
         #          however, you can merge together files made with other generators,
         #          for example, PythiaSource, because all parameters of it would be
         #          *untracked*
         #
#         untracked vstring fileNames =
#         {'file:/afs/cern.ch/cms/geant4rep/genntpl/muon_simhit_for_pileup.060pre1.root' }
#         string type = "poisson"
#         double averageNumber = 3  # setting this param. to 0 means "No pile-up",
#                                   # that is, digitize current crossing only
#         int32 minBunch = -3
#         int32 maxBunch = 5
#         int32 seed = 1234567
#      }
      int32 bunchspace = 25
   }



   # now the order of execution
   #   
   sequence trDigi = { pixdigi & stripdigi }
   sequence calDigi = { ecalDigiSequence & hcaldigi }
   sequence muonDigi = { muoncscdigi & muondtdigi & muonrpcdigi }
   sequence doDigi = { trDigi & calDigi & muonDigi   }
   path p1 = { VtxSmeared, SimG4Object, mix, doDigi }

   endpath outpath = { GEN-SIM-DIGI }
   
}		
