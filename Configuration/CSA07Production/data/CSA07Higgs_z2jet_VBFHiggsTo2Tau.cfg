process Sim = {

   untracked PSet maxEvents = {untracked int32 input = 10}

   untracked PSet configurationMetadata = {
           untracked string version = "$Revision: 1.2 $"
           untracked string name = "$Source: /local/projects/CMSSW/rep/CMSSW/Configuration/CSA07Production/data/CSA07Higgs_z2jet_VBFHiggsTo2Tau.cfg,v $"
           untracked string annotation = "Z+2jets exclusive background for VBFHiggsTo2TauLJet"
   }

   include "FWCore/MessageService/data/MessageLogger.cfi"
   replace MessageLogger.cout.threshold = "ERROR"
   replace MessageLogger.cerr.default.limit = 10
    
   service = RandomNumberGeneratorService
   { 
      untracked uint32 sourceSeed = 123456789
      PSet moduleSeeds =
      {
         untracked uint32 VtxSmeared = 98765432
         untracked uint32 g4SimHits  = 11
         untracked uint32 mix        = 12345
      }
   }
   # physics event generation
   #

  source = AlpgenSource
  { 
     
   untracked vstring fileNames = {"file:alpgen"}
  
   untracked int32 pythiaPylistVerbosity = 1
   untracked bool pythiaHepMCVerbosity = false
   untracked int32 maxEventsToPrint = 3

   # put here the cross section of your process (in pb)
   untracked double crossSection = 1.0 
   # put here the efficiency of your filter (1. if no filter)
   untracked double filterEfficiency = 1.

   PSet PythiaParameters = {

    # This is a vector of ParameterSet names to be read, in this order
    vstring parameterSets = { 
        "pythiaUESettings",
        "pythia"
    }
    include "Configuration/Generator/data/PythiaUESettings.cfi"
    vstring pythia = {
        'MSEL=0              !(D=1)',
        'MSTP(143)=1         !Call the matching routine in ALPGEN'
    }	
  }

# Alpgen parameters
    PSet GeneratorParameters = { 
      vstring parameterSets =  { "generator" }
      vstring generator = 
       {         
        "IXpar(2) = 1            ! inclus./exclus. sample: 0/1",
        "RXpar(1) = 20.          ! ETCLUS : minET(CLUS)",
        "RXpar(2) = 0.5          ! RCLUS  : deltaR(CLUS)"
      }
    }
  }



#this filters out empty (rejected by matching) events from the PoolOutputModule
   module filter = AlpgenEmptyEventFilter {}

   include "Configuration/StandardSequences/data/Simulation.cff"
   include "Configuration/StandardSequences/data/VtxSmearedGauss.cff" 
   include "Configuration/StandardSequences/data/MixingNoPileUp.cff"

   path p1 = {filter, psim} 

   # Event output
   include "Configuration/EventContent/data/EventContent.cff"
   module GEN-SIM = PoolOutputModule 
   { 
     	using FEVTSIMEventContent
	untracked string fileName = "test.root"
    	untracked PSet dataset ={	
           untracked string dataTier = "GEN-SIM"
    	}
        untracked PSet SelectEvents = {
           vstring SelectEvents = {"p1"}
        }
   }

   endpath outpath = {GEN-SIM}
}
