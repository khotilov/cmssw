process Sim = {
  untracked PSet maxEvents = { untracked int32 input = 1600000000 }
  
  untracked PSet configurationMetadata = {
    untracked string version = "$Revision: 1.1 $"
    untracked string name = "$Source: /cvs_server/repositories/CMSSW/CMSSW/Configuration/CSA07Production/data/CSA07_2j_20_80_GEN_SIM.cfg,v $"
    untracked string annotation = "3-jets exclusive QCD process in the leading parton pt range of 180-5600 GeV"
  }
  include "FWCore/MessageService/data/MessageLogger.cfi"
  replace MessageLogger.cout.threshold = "ERROR"
  replace MessageLogger.cerr.default.limit = 10
   
  service = RandomNumberGeneratorService { 
    untracked uint32 sourceSeed = 123456789

    PSet moduleSeeds = {
      untracked uint32 VtxSmeared = 98765432
      untracked uint32 g4SimHits  = 11
      untracked uint32 mix	  = 12345
    }
  }
  # physics event generation
  # 
  source = AlpgenSource { 
    untracked vstring fileNames = { "file:alpgen" }
  
    untracked int32 pythiaPylistVerbosity = 1
    untracked bool pythiaHepMCVerbosity = false
    untracked int32 maxEventsToPrint = 1

    # put here the cross section of your process (in pb)
    untracked double crossSection = 1.051E+06

    # put here the efficiency of your filter (1 if no filter)
    untracked double filterEfficiency = 1.0

    PSet PythiaParameters = {
      # put a vector of ParameterSet names to be read in the order shown below 
      vstring parameterSets = { 
        "pythiaUESettings",
        "pythia"
      }
      include "Configuration/Generator/data/PythiaUESettings.cfi"
      vstring pythia = {
        'MSEL=0 	     !(D=1)',
        'MSTP(143)=1	     !Call the matching routine in ALPGEN'
      }   
    }
    # alpgen parameters
    PSet GeneratorParameters = { 
      vstring parameterSets = { "generator" }
      vstring generator = {         
        "IXpar(2) = 1            ! inclusive/exclusive : 0/1",
        "RXpar(1) = 20.          ! ETCLUS : minET(CLUS)",
        "RXpar(2) = 0.7          ! RCLUS  : deltaR(CLUS)"
      }
    }
  }
  # filter out empty (rejected by matching) events from the PoolOutputModule
  # 
  module filter = AlpgenEmptyEventFilter {}

  include "Configuration/StandardSequences/data/Simulation.cff"
  include "Configuration/StandardSequences/data/VtxSmearedGauss.cff" 
  include "Configuration/StandardSequences/data/MixingNoPileUp.cff"

  path p1 = { filter, psim } 

  # output events
  # 
  block ALPGENEventContent = {
    untracked vstring outputCommands = {
      "keep edmAlpgenInfoProduct_source_*_*",
      "keep edmAlpWgtFileInfoProduct_source_*_*"
    }
  }
  include "Configuration/EventContent/data/EventContent.cff"
  replace FEVTSIMEventContent.outputCommands += ALPGENEventContent.outputCommands

  module GEN-SIM = PoolOutputModule 
  { 
       using FEVTSIMEventContent
       untracked string fileName = "CSA07_3j_80_140_GEN-SIM.root"
       untracked PSet dataset ={       
  	       untracked string dataTier = "GEN-SIM"
  	       }
       untracked PSet SelectEvents = {
  	  vstring SelectEvents = {"p1"}
       }
  }

  endpath outpath = { GEN-SIM }
}

