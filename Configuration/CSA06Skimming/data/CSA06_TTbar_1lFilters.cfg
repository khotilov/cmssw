process TTbar1lSKIM = {
#
# each "single lepton trigger" (e,mu,tau) will result in a different output stream
#
# skim job to be run on the tt~ inclusive for the semi-leptonic ttbar analysis
#  
# filter tested on 200 locally produced "CSA06TTbar_GEN_SIM_DIGI" events: 
# 	we expect a filter efficiency of 5.5/9 = 61% (double counting) (test case: 125/200 = ~63% was selected)
#
#   tested by J. Heyninck  26 Sept. 2006
# 
  
 include "Configuration/EventContent/data/RECOSIMOutput.cff"

 ### keep the logging output to a nice level ###
  include "FWCore/MessageLogger/data/MessageLogger.cfi"
                                                                                                        
service = AdaptorConfig {}

 source = PoolSource {
    untracked vstring fileNames =
        {
        '/store/CSA06/CSA06-103-os-TTbar-0/RECO/CMSSW_1_0_3-RECO-Hcc50df9a16717df4367a80c47fe190b8/1009/0AE6138C-A457-DB11-B77F-0002B3D8E817.root'
        }
    untracked int32 maxEvents = -1
 }

 module skim1efilter  = MCSingleParticleFilter
    {

      # vector of accepted particles (logical OR)(charge is relevant)
      untracked vint32 ParticleID =  {11, -11}

      # vector of min pt values corresponding to above particles -- if absent values are 0
      untracked vdouble MinPt =  {15,15}

      # vector of min eta values corresponding to above particles -- if absent values are -5
      untracked vdouble MinEta =  {-2.4,-2.4}

      # vector of max eta values corresponding to above particles -- if absent values are +5
      untracked vdouble MaxEta =  {2.4,2.4}

     # vector of status codes corresponding to above particles -- if absent, all are accepted
      untracked vint32 Status =  {3, 3}

    }

 module skim1mufilter  = MCSingleParticleFilter
    {

      # vector of accepted particles (logical OR)(charge is relevant)
      untracked vint32 ParticleID =  {13, -13}

      # vector of min pt values corresponding to above particles -- if absent values are 0
      untracked vdouble MinPt =  {15,15}

      # vector of min eta values corresponding to above particles -- if absent values are -5
      untracked vdouble MinEta =  {-2.4,-2.4}

      # vector of max eta values corresponding to above particles -- if absent values are +5
      untracked vdouble MaxEta =  {2.4,2.4}

     # vector of status codes corresponding to above particles -- if absent, all are accepted
      untracked vint32 Status =  {3, 3}

    }

 module skim1taufilter  = MCSingleParticleFilter
    {

      # vector of accepted particles (logical OR)(charge is relevant)
      untracked vint32 ParticleID =  {15, -15}

      # vector of min pt values corresponding to above particles -- if absent values are 0
      untracked vdouble MinPt =  {15,15}

      # vector of min eta values corresponding to above particles -- if absent values are -5
      untracked vdouble MinEta =  {-2.4,-2.4}

      # vector of max eta values corresponding to above particles -- if absent values are +5
      untracked vdouble MaxEta =  {2.4,2.4}

     # vector of status codes corresponding to above particles -- if absent, all are accepted
      untracked vint32 Status =  {3, 3}

    }

 path p1 = {skim1efilter}
 path p2 = {skim1mufilter}
 path p3 = {skim1taufilter}
 
 module RECOSIM1 = PoolOutputModule {
    untracked string fileName = "sm_ttbar_electronstream.root"
    untracked string filterName = "sm_TTbar_1eFilters"
    untracked string dataTier = "RECOSIM"
    untracked PSet SelectEvents = {
      vstring SelectEvents = {"p1"}
    }
 using RECOSIMOutput
 }
 module RECOSIM2 = PoolOutputModule {
    untracked string fileName = "sm_ttbar_muonstream.root"
    untracked string filterName = "sm_TTbar_1muFilters"
    untracked string dataTier = "RECOSIM"
    untracked PSet SelectEvents = {
      vstring SelectEvents = {"p2"}
    }
 using RECOSIMOutput
 }
 module RECOSIM3 = PoolOutputModule {
    untracked string fileName = "sm_ttbar_taustream.root"
    untracked string filterName = "sm_TTbar_1tauFilters"
    untracked string dataTier = "RECOSIM"
    untracked PSet SelectEvents = {
      vstring SelectEvents = {"p3"}
    }
 using RECOSIMOutput
 }
 endpath outpath = { RECOSIM1, RECOSIM2, RECOSIM3}	
}
