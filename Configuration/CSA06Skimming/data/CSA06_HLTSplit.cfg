# Combined HLT split attempt
# D. Mason 10/5/06 or therabouts
#  Immediately below is what was in CSA06Skimming/test/hltcas06bits.cfg
#// HLT
#
#	module hltcsa06bits = HLTCSA06Bits {
#		InputTag TriggerResultsTag = TriggerResults
#		bool andOr = true
#		bool byName= true
#		vstring HLTPaths = {"p1e","p1m"} // empyt vector = all triggers
#	}

#   Now we get going...


process HLTSPLIT = {



#      Input -- this is basically for local testing...
        source = PoolSource { 
	  untracked vstring fileNames = {
  'dcache:/pnfs/cms/WAX/11/store/CSA06/2006/9/7/CSA06-084-os-HLTSoup/0EC092C2-523E-DB11-85D9-00304875AA6D.root'}
	  untracked int32 maxEvents = 100
        }

#      Now we define a module for each HLT bit  -- from the TWIKI:

#       HLT Filters
#Note that these triggers are based on unsmeard MC truth information!
#
#Name   Mnemonic   threshold Bit  position in 0_8_4 Bit  Position 0_8_3  HLT Soup Efficiency
#Single Gamma    p1g 	80 	0 	6 	0.9%
#Double Gamma 	p2g 	30,20 	1 	2 	3.0%
#Single electron 	p1e 	26 	2 	4 	32%
#Double electron 	p2e 	12,12 	3 	0 	3.3%
#Single Muon 	p1m 	19 	4 	9 	35%
#Double Muon 	p2m 	7,7 	5 	7 	3.2%
#Single Tau 	p1t 	100 	6 	12 	0
#Double Tau 	p2t 	60,60 	7 	11 	0
#Single Jet 	p1j 	400 	8 	8 	2.7%
#DiJet? 	p2j 	350 	9 	10 	2.2%
#TriJet? 	p3j 	195 	10 	1 	0.5%
#Quad Jet 	p4j 	80 	11 	5 	0.6%

      
       module Bit-p1g = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool byName= true
		vstring HLTPaths = {"p1g"} 
	}

       module Bit-p2g = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool byName= true
		vstring HLTPaths = {"p2g"} 
	}

       module Bit-p1e = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool byName= true
		vstring HLTPaths = {"p1e"} 
	}

       module Bit-p2e = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool byName= true
		vstring HLTPaths = {"p2e"} 
	}

       module Bit-p1m = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool byName= true
		vstring HLTPaths = {"p1m"} 
	}

       module Bit-p2m = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool byName= true
		vstring HLTPaths = {"p2m"} 
	}

       module Bit-p1t = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool byName= true
		vstring HLTPaths = {"p1t"} 
	}

       module Bit-p2t = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool byName= true
		vstring HLTPaths = {"p2t"} 
	}

       module Bit-p1j = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool byName= true
		vstring HLTPaths = {"p1j"} 
	}

       module Bit-p2j = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool byName= true
		vstring HLTPaths = {"p2j"} 
	}

       module Bit-p3j = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool byName= true
		vstring HLTPaths = {"p3j"} 
	}

       module Bit-p4j = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool byName= true
		vstring HLTPaths = {"p4j"} 
	}


#     Now we can define combined objects for each particle type using the HLT bits:
#     I guess we're assuming there's a possiblity that there can be >1 particles
#     without necessarily firing the 1 particle trigger.


	module Bit-gammas = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool andOr = true
		bool byName= true
		vstring HLTPaths = {"p1g","p2g"}
	}

	module Bit-electrons = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool andOr = true
		bool byName= true
		vstring HLTPaths = {"p1e","p2e"}
	}
	module Bit-muons = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool andOr = true
		bool byName= true
		vstring HLTPaths = {"p1m","p2m"}
	}
	module Bit-taus = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool andOr = true
		bool byName= true
		vstring HLTPaths = {"p1t","p2t"}
	}
	module Bit-jets = HLTCSA06Bits {
		InputTag TriggerResultsTag = TriggerResults
		bool andOr = true
		bool byName= true
		vstring HLTPaths = {"p1j","p2j","p3j","p4j"}
	}


#     Now the output modules:  

      path Gamma={Bit-gammas}
      module GEN-SIM-DIGI-HLT-Gamma =  PoolOutputModule {
        untracked string fileName = "RECO_HLT_Gamma.root"
        untracked string filtername = "HLT_Gamma"
        untracked string dataTier = "GEN-SIM-DIGI-HLT"
        untracked PSet SelectEvents = {
        vstring SelectEvents = {"Gamma"}
        }
      }
   
      path Electron={Bit-electrons}
      module GEN-SIM-DIGI-HLT-Electron =  PoolOutputModule {
        untracked string fileName = "RECO_HLT_Electron.root"
        untracked string filterName = "HLT_Electron"
        untracked string dataTier = "GEN-SIM-DIGI-HLT"
        untracked PSet SelectEvents = {
        vstring SelectEvents = {"Electron"}
        }
      }

      path Muon={Bit-muons}
      module GEN-SIM-DIGI-HLT-Muon =  PoolOutputModule {
        untracked string fileName = "RECO_HLT_Muon.root"
        untracked string filterName = "HLT_Muon"
        untracked string dataTier = "GEN-SIM-DIGI-HLT"
        untracked PSet SelectEvents = {
        vstring SelectEvents = {"Muon"}
        }
      }

#      path Tau={Bit-taus}
#      module GEN-SIM-DIGI-HLT-Tau =  PoolOutputModule {
#        untracked string fileName = "RECO_HLT_Tau.root"
#        untracked string filterName = "HLT_Tau"
#        untracked string dataTier = "GEN-SIM-DIGI-HLT"
#        untracked PSet SelectEvents = {
#        vstring SelectEvents = {"Tau"}
#        }
#      }

      path Jets={Bit-jets}
      module GEN-SIM-DIGI-HLT-Jet =  PoolOutputModule {
        untracked string fileName = "RECO_HLT_Jets.root"
        untracked string filterName = "HLT_Jets"
        untracked string dataTier = "GEN-SIM-DIGI-HLT"
        untracked PSet SelectEvents = {
        vstring SelectEvents = {"Jets"}
        }
      }

#     and the endpath to give us something to do...

#      endpath combouts = {GEN-SIM-DIGI-HLT-Gamma & GEN-SIM-DIGI-HLT-Electron & GEN-SIM-DIGI-HLT-Muon & GEN-SIM-DIGI-HLT-Tau & GEN-SIM-DIGI-HLT-Jet}
#      pulled out the Taus, since they don't select anything yet.
      endpath combouts = {GEN-SIM-DIGI-HLT-Gamma & GEN-SIM-DIGI-HLT-Electron & GEN-SIM-DIGI-HLT-Muon & GEN-SIM-DIGI-HLT-Jet}

}
