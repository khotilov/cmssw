process PROD  = {


   service = MessageLogger
   {
      untracked vstring destinations = {"cout"}
      
      untracked vstring categories = { "FwkJob" }

      untracked PSet cout = 
      { 
         untracked PSet default = { untracked int32 limit = 0 }    # kill all messages in the log
         untracked PSet FwkJob  = { untracked int32 limit = -1 }  # except *all* of FwkJob's	  
      }
      
      #untracked vstring fwkJobReports = {"FrameworkJobReport.xml"}
   }

   service = Timing {}


   service = RandomNumberGeneratorService
   {
      untracked uint32 sourceSeed = 135799753
        }


   # NOTE : if one wants to run with the SiStripDigitizer,
   #        then mag.field in the OscarProducer should be
   #        turned ON; otherwise it gets (re)created by the
   #        SiStripDigitizer, which seems to corrupt at all
   #        the edm::Event record


   # Step 1 : Event Generation

   # CMSCGEN, cosmic muon generator 
   source = CosMuoGenSource {
    untracked int32  maxEvents = 500
    untracked double MinEn =    7.
    untracked double MaxEn =   10000
    untracked double MinTheta =  0.
    untracked double MaxTheta = 88.
    untracked double MinPhi =    0.
    untracked double MaxPhi =  360.
    untracked double MinT0  =  -12.5
    untracked double MaxT0  =   12.5
    untracked double ElossScaleFactor = 0.0
    #WARNING: if set to "true" muons are sure to hit half of CMS important for MTCC, 
    #         still material and B-field of whole CMS is considered
    untracked bool MTCCHalf = true
    untracked bool Verbosity = false
  }

  
   #Geometry
   #
   #include "Geometry/CMSCommonData/data/cmsSimIdealGeometryXML.cfi"
   include "Geometry/CMSCommonData/data/cmsMTCCGeometryXML.cfi"
   es_module = TrackerGeometricDetESModule {}

   #Magnetic Field
   #
   include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

   # Step 2 : CMS Detector Simulation

   # CMS Geant4-based Det.Simulation module (OscarProducer)
   #
   include "SimG4Core/Application/data/SimG4Object.cfi"
   

   # Step 3 : Digitization of the simulated hits
   #

   # Step 3a : Digitization of the Tracker
   #

   # required for Pixel and SiStrip Digitizers
   #
   es_module = TrackerDigiGeometryESModule {}

   # Pixel's digitization
   #
   include "SimTracker/SiPixelDigitizer/data/PixelDigi.cfi"

   # SiStrip's digitization
   #
   # dedicated MTCC-cfi file is not in CMSSW_081 yet !!!
   include "SimTracker/SiStripDigitizer/data/SiStripDigi.cfi"

   # Step 3b : Digitization of Ecal and Hcal

   # required for Ecal and Hcal Digitizers
   # NOTE : Both Ecal and Hcal geometries need to be present,
   #        even if only one digitizers is to run
   #
   es_module = EcalPreshowerGeometryEP {}
   es_module = EcalBarrelGeometryEP {}
   es_module = EcalEndcapGeometryEP {}
   es_module = HcalHardcodeGeometryEP {}
   es_module = CaloTowerHardcodeGeometryEP {}
   es_module = CaloGeometryBuilder {}
   
   # use trivial ESProducer for tests (calib)
   es_source = EcalTrivialConditionRetriever { }

   es_module = HcalDbProducer {}
   es_source es_hardcode = HcalHardcodeCalibrations
   {
      untracked vstring toGet =
      {
         "Pedestals", "PedestalWidths",
         "Gains", "GainWidths",
         "QIEShape", "QIEData",
         "ChannelQuality", "ElectronicsMap"
      }
   }

   include "SimCalorimetry/EcalSimProducers/data/ecaldigi.cfi"
   
   include "SimCalorimetry/HcalSimProducers/data/hcaldigi.cfi"


   # Step 3c : Muon Digitization


   # this holds CSC geom service, as need for CSC digi's
   # and the digitizer itself
   #
   include "Geometry/CSCGeometry/data/cscGeometry.cfi"
   include "SimMuon/CSCDigitizer/data/muoncscdigi.cfi"

   # Muon DT digi's

   # this holds geom.service as needed by DT digi's
   # and the digitizer itself
   #
   include "Geometry/DTGeometry/data/dtGeometry.cfi"
   include "SimMuon/DTDigitizer/data/muondtdigi.cfi"

   # this holds geom.service for the RPC digi's
   # the digitizer itself still needs to be given explicitely
   # but since it has no parameters, it doesn't matter...
   # only maybe the label should be agreed upon...
   #
   # Note : as of May 3, 2006, Muon/RPC digi's *hang*
   #        thus it's been taken out of the path...
   # 
   include "Geometry/RPCGeometry/data/rpcGeometry.cfi" 
   include "SimMuon/RPCDigitizer/data/muonrpcdigi.cfi"

   # Mixing Module is *required* to simulated Ecal/Hcal/Muon digitization !

   module mix = MixingModule
   {
#      secsource input = PoolRASource
#      {
         #
         # starting 050, you can skip secsource block at all if you don't
         # wnat to model mixing/pileup at all;
         # however, an at least "empty mixing" need to be present if you
         # want to perform Ecal/Hcal/CSC/DT digitization - those explicitely
         # require presence of CrossingFrame in the edm::Event
         #
         # alternatively, you can set averageNumber=0 if you don't want
         # to model the pileup
         #
         # to the secsource/PoolRASource, you can give just 1 file or more;
         # this files will make a "concatinated buffer", which will go circular
         # until the loop of primary events is done - thus, it'll never run out
         #
         # WARNING: you can only give miltiple files, if they're generated with
         #          identical sets of tracked parameters;
         #          for example, you canNOT give a file made with a single muon
         #          gun and a file made with a single pion gun, because PartID
         #          is a *tracked* parameter in the gun's PSet;
         #          however, you can merge together files made with other generators,
         #          for example, PythiaSource, because all parameters of it would be
         #          *untracked*
         #
#         untracked vstring fileNames =
#         {'file:/afs/cern.ch/cms/geant4rep/genntpl/muon_simhit_for_pileup.060pre1.root' }
#         string type = "poisson"
#         double averageNumber = 3  # setting this param. to 0 means "No pile-up",
#                                   # that is, digitize current crossing only
#         int32 minBunch = -3
#         int32 maxBunch = 5
#         int32 seed = 1234567
#      }
      int32 bunchspace = 25
   }


   # Step 4 : Output module
   #
   module GEN-SIM-DIGI = PoolOutputModule
   {
      untracked string fileName = "evtgen_detsim_digi.root"
   }
   
   # Now order modules for execution
   #
   sequence trDigi = { pixdigi & stripdigi }
   sequence calDigi = { ecaldigi & hcaldigi }
   sequence muonDigi = { muoncscdigi & muondtdigi & muonrpcdigi }
   sequence doDigi = { calDigi & muonDigi   }  #no tracker digis as there is conflict with MTCC-geometry
   path p1 = { SimG4Object, mix, doDigi }
   endpath outpath = { GEN-SIM-DIGI }

}