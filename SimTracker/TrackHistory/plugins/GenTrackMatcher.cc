/** \class GenTrackMatcher  * * \author Luca Lista, INFN
 * \author Victor E. Bazterra, UIC * * \version $Id: GenTrackMatcher.cc,v 1.5 2007/12/18 16:15:33 cerati Exp $ * */#include "FWCore/Framework/interface/EDProducer.h"#include "FWCore/ParameterSet/interface/InputTag.h"#include "DataFormats/Common/interface/Association.h"#include "DataFormats/HepMCCandidate/interface/GenParticle.h"namespace edm { class ParameterSet; }class GenTrackMatcher : public edm::EDProducer { public:  /// constructor  GenTrackMatcher( const edm::ParameterSet & ); private:  void produce( edm::Event& evt, const edm::EventSetup& es );  std::string associator_;  edm::InputTag tracks_, genParticles_, trackingParticles_;  typedef edm::Association<reco::GenParticleCollection> GenParticleMatch;};#include "DataFormats/Common/interface/Handle.h"#include "FWCore/Framework/interface/ESHandle.h"#include "FWCore/Framework/interface/Event.h"#include "FWCore/Utilities/interface/EDMException.h"#include "FWCore/ParameterSet/interface/ParameterSet.h"#include "SimTracker/Records/interface/TrackAssociatorRecord.h"#include "SimTracker/TrackHistory/interface/TrackOrigin.h"
#include "SimDataFormats/TrackingAnalysis/interface/TrackingParticle.h"using namespace edm;using namespace std;using namespace reco;GenTrackMatcher::GenTrackMatcher(const ParameterSet & p) :  associator_(p.getParameter<string>("associator")),  tracks_(p.getParameter<InputTag>("tracks")),  genParticles_( p.getParameter<InputTag>("genParticles")),  trackingParticles_( p.getParameter<InputTag>("trackingParticles")) {  produces<GenParticleMatch>();}void GenTrackMatcher::produce(Event& evt, const EventSetup& es) {  ESHandle<TrackAssociatorBase> assoc;    es.get<TrackAssociatorRecord>().get(associator_,assoc);  const TrackAssociatorBase * associator = assoc.product();  Handle<View<Track> > tracks;  evt.getByLabel(tracks_, tracks);  Handle<TrackingParticleCollection> trackingParticles;  evt.getByLabel(trackingParticles_,trackingParticles);  Handle<vector<int> > barCodes;  evt.getByLabel(genParticles_,barCodes );  Handle<GenParticleCollection> genParticles;  evt.getByLabel(genParticles_, genParticles );  RecoToSimCollection associations = associator->associateRecoToSim ( tracks, trackingParticles, & evt );   auto_ptr<GenParticleMatch> match(new GenParticleMatch(GenParticleRefProd(genParticles)));  GenParticleMatch::Filler filler(*match);  size_t n = tracks->size();  vector<int> indices(n,-1);
  TrackOrigin tracer;
  for (size_t i = 0; i < n; ++ i ) {    RefToBase<Track> track(tracks, i);    if(tracer.evaluate(track, associations, true)) {       const HepMC::GenParticle * particle = tracer.particle();      if(particle) {        int barCode = particle->barcode();        vector<int>::const_iterator b = barCodes->begin(), e = barCodes->end(), f = find( b, e, barCode );        if(f == e) throw edm::Exception(errors::InvalidReference)          << "found matching particle with barcode" << *f          << " which has not been found in " << genParticles_;        indices[i] = *f;      }    }  }
  filler.insert(tracks, indices.begin(), indices.end());  filler.fill();  evt.put(match);}#include "FWCore/Framework/interface/MakerMacros.h"DEFINE_FWK_MODULE( GenTrackMatcher );

