// Author : Samvel Khalatian (samvel at fnal dot gov)
// Created: 08/01/07
// License: GPL

#include <ostream>

#include "interface/ClassID.h"

// Include all subflags that current one may have
// #include "interface/NewFlagSubTxt.h" [this is example]

#include "interface/NewFlagTxt.h"
#include "interface/NewFlagXML.h"

// --[ NEW FLAG TXT ]----------------------------------------------------------
//                                                  --[ PUBLIC ]--
// Construct text/binary format flag from XML one
NewFlagTxt::NewFlagTxt( const NewFlagXML *poNEW_FLAGXML)
  : FlagTxt( *( dynamic_cast<const FlagXML *>( poNEW_FLAGXML) ) ) {}

//                                                  --[ PROTECTED ]--
Clonable *NewFlagTxt::cloneXML() const {
  return new NewFlagXML( this);
}

ClassIDBase::ID NewFlagTxt::getID() const {
  return ClassID<NewFlagTxt>::get();
}

// Uncomment next method in case current flag may have children
// int NewFlagTxt::isChildValid( const FlagTxt *poCHILD_CANDIDATE) const {
//   return dynamic_cast<const NewFlagSubTxt *>( poCHILD_CANDIDATE) ?
//          1 :
//          0;
// }

// --[ HELPER FUNCTIONS ]------------------------------------------------------
std::ostream &
  operator <<( std::ostream &roOut, const NewFlagTxt &roFLAG)
{
  // Print itself: use Flag operator <<
  roOut << dynamic_cast<const Flag &>( roFLAG);

  // Print all children one by one
  // if( NewFlagSubTxt *poFlagTxt =
  //       dynamic_cast<NewFlagSubTxt *>( roFLAG.getChild<NewFlagSubTxt>()) ) {
  //   
  //   roOut << std::endl << *poFlagTxt;
  // }

  return roOut;
}
