// Author : Samvel Khalatian (samvel at fnal dot gov)
// Created: 08/01/07
// License: GPL

#include <ostream>

#include "interface/ClassID.h"

// Include all subflags that current one may have
// #include "interface/NewFlagSubXML.h" [this is example]

#include "interface/NewFlagXML.h"
#include "interface/NewFlagTxt.h"

// --[ NEW FLAG XML ]----------------------------------------------------------
//                                                  --[ PUBLIC ]--
// Construct text/binary format flag from XML one
NewFlagXML::NewFlagXML( const NewFlagTxt *poNEW_FLAGTXT)
  : FlagXML( *( dynamic_cast<const FlagTxt *>( poNEW_FLAGTXT) ) ) {}

//                                                  --[ PROTECTED ]--
Clonable *NewFlagXML::cloneTxt() const {
  return new NewFlagTxt( this);
}

ClassIDBase::ID NewFlagXML::getID() const {
  return ClassID<NewFlagXML>::get();
}

// Uncomment next method in case current flag may have children
// int NewFlagXML::isChildValid( const FlagXML *poCHILD_CANDIDATE) const {
//   return dynamic_cast<const NewFlagSubXML *>( poCHILD_CANDIDATE) ?
//          1 :
//          0;
// }

// --[ HELPER FUNCTIONS ]------------------------------------------------------
std::ostream &
  operator <<( std::ostream &roOut, const NewFlagXML &roFLAG)
{
  // Print itself: use Flag operator <<
  roOut << dynamic_cast<const Flag &>( roFLAG);

  // Print all children one by one
  // if( NewFlagSubXML *poFlagXML =
  //       dynamic_cast<NewFlagSubXML *>( roFLAG.getChild<NewFlagSubXML>()) ) {
  //   
  //   roOut << std::endl << *poFlagXML;
  // }

  return roOut;
}
