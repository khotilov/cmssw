process Reco = {
  untracked PSet maxEvents = {untracked int32 input = 100}
 
   
 source = NewEventStreamFileReader{
 # GRUMM data
		untracked vstring fileNames = {
"rfio:/castor/cern.ch/cms/store/data/GlobalMar08/A/000/037/893/GlobalMar08.00037893.0001.A.storageManager.0.0000.dat"
}
		#int32 max_event_size = 400000
		#int32 max_queue_depth = 5
	} 


#
### Conditions:
#
include "CondCore/DBCommon/data/CondDBSetup.cfi"

   es_module localUniform = UniformMagneticFieldESProducer {
     double ZFieldInTesla = 0.0
   }
    es_prefer localUniform = UniformMagneticFieldESProducer{}
 
    es_source L1GtBoardMapsRcdSource = EmptyESSource {
	string recordName = "L1GtBoardMapsRcd"
	bool iovIsRunNotTime = true
	vuint32 firstValid = { 1 }
    }
    es_source L1GtParametersRcdSource = EmptyESSource {
	string recordName = "L1GtParametersRcd"
	bool iovIsRunNotTime = true
	vuint32 firstValid = { 1 }
    }
    es_source L1GtPrescaleFactorsRcdSource = EmptyESSource {
	string recordName = "L1GtPrescaleFactorsRcd"
	bool iovIsRunNotTime = true
	vuint32 firstValid = { 1 }
    }
    es_source L1GtStableParametersRcdSource = EmptyESSource {
	string recordName = "L1GtStableParametersRcd"
	bool iovIsRunNotTime = true
	vuint32 firstValid = { 1 }
    }
    es_source L1GtTriggerMaskRcdSource = EmptyESSource {
	string recordName = "L1GtTriggerMaskRcd"
	bool iovIsRunNotTime = true
	vuint32 firstValid = { 1 }
    }
    es_source L1MuGMTParametersRcdSource = EmptyESSource {
	string recordName = "L1MuGMTParametersRcd"
	bool iovIsRunNotTime = true
	vuint32 firstValid = { 1 }
    }
    es_source L1MuGMTScalesRcdSource = EmptyESSource {
	string recordName = "L1MuGMTScalesRcd"
	bool iovIsRunNotTime = true
	vuint32 firstValid = { 1 }
    }
    include "L1TriggerConfig/L1ScalesProducers/data/L1MuTriggerScalesConfig.cff"

  include "CalibTracker/Configuration/data/Tracker_FrontierAlignment.cff"
 
 
    module dtunpacker = DTUnpackingModule {
    string dataType = "DDU"
    untracked bool fedbyType = true
    untracked bool useStandardFEDid = true
    PSet readOutParameters  = {
        untracked bool localDAQ = false
        untracked bool performDataIntegrityMonitor = false
        untracked bool debug = false
        PSet rosParameters = {
            untracked bool localDAQ = false
            untracked bool readingDDU = true
            untracked bool writeSC = true
            untracked bool readDDUIDfromDDU = true
            untracked bool performDataIntegrityMonitor = false
            untracked bool debug = false
        }
    }
 }

  module hcalZeroSuppressedDigis = HcalRawToDigi {
    InputTag InputLabel = source
    int32 firstSample = 0
    int32 lastSample = 9
    bool FilterDataQuality = true
  }
 
   module hbhereco = HcalSimpleReconstructor {
    InputTag digiLabel = hcalZeroSuppressedDigis
    string Subdetector = "HBHE"
    int32 firstSample = 1
    int32 samplesToAdd = 8
    bool correctForTimeslew = true
    bool correctForPhaseContainment = true
    double correctionPhaseNS = 10.0
  }
  module hfreco = HcalSimpleReconstructor {
    InputTag digiLabel = hcalZeroSuppressedDigis
    string Subdetector = "HF"
    int32 firstSample = 1
    int32 samplesToAdd = 8
    bool correctForTimeslew = true
    bool correctForPhaseContainment = true
    double correctionPhaseNS = 10.0
  }
  module horeco = HcalSimpleReconstructor {
    InputTag digiLabel = hcalZeroSuppressedDigis
    string Subdetector = "HO"
    int32 firstSample = 1
    int32 samplesToAdd = 8
    bool correctForTimeslew = true
    bool correctForPhaseContainment = true
    double correctionPhaseNS = 10.0
  }


    es_source ecalMapping = EmptyESSource {
      string recordName = "EcalMappingRcd"
      bool iovIsRunNotTime = false
      vuint32 firstValid = { 0 }
    }
    include "Geometry/EcalMapping/data/EcalMapping.cfi"
 
 ####################################################################################
 #
 # Muon alignment
 #
 include "CalibMuon/Configuration/data/Muon_FrontierAlignment.cff"
 #
 ###################################################################
 #
 # Pixel calib
 #
 include "CalibTracker/Configuration/data/SiPixel_FrontierGain.cff"
 #
 ###################################################################
 #
 # Strip calib
 #
 include "CalibTracker/Configuration/data/SiStrip_FrontierGain.cff"
 include "CalibTracker/Configuration/data/SiStrip_FrontierNoise.cff"
 include "CalibTracker/Configuration/data/SiStrip_FakePedestals.cff"
 include "CalibTracker/Configuration/data/SiStrip_FrontierLorentzAngle.cff"
 include "CalibTracker/SiStripESProducers/data/SiStripQualityFakeESSource.cfi"

 #############################################################################
 #
 # DT calib

 include "CalibMuon/Configuration/data/DT_FrontierConditions.cff"

 ###########################################################################################
 #
 # CSC Calib OK (used also for digis)
 #
 # DBCOnditions use the new DB objects (linearized vectors) 
 include "CalibMuon/Configuration/data/getCSCDBConditions_frontier.cff"

 replace cscConditions.connect="frontier://Frontier/CMS_COND_18X_CSC"
 replace cscConditions.toGet = {
 	 { string record = "CSCDBGainsRcd"
 	   string tag = "CSCDBGains_ideal"},
 	 {string record = "CSCDBNoiseMatrixRcd"
 	   string tag = "CSCDBNoiseMatrix_ideal"},
 	 {string record = "CSCDBCrosstalkRcd"
 	   string tag = "CSCDBCrosstalk_ideal"},
 	 {string record = "CSCDBPedestalsRcd"
 	  string tag = "CSCDBPedestals_ideal"},
 	 { string record = "CSCChamberIndexRcd"
 	   string tag = "CSCChamberIndex"},
 	 { string record = "CSCChamberMapRcd"
 	    string tag = "CSCChamberMap"},
 	 { string record = "CSCCrateMapRcd"
 	    string tag = "CSCCrateMap"},
 	 { string record = "CSCDDUMapRcd"
 	   string tag = "CSCDDUMap"}
      }

 es_source dtConditions = PoolDBESSource {
 	string timetype = "runnumber"
 	string connect = "frontier://FrontierOn/CMS_COND_ON_170_DT"
 	PSet DBParameters = {
 	    untracked int32 messageLevel = 0
 	    untracked string authenticationPath = "/afs/cern.ch/cms/DB/conddb"
 	}
 	VPSet toGet = {
 	    { string record = "DTReadOutMappingRcd"
 		string tag = "GRENmap_774"
		#string tag = "DTChannelsMap"
		}
 	   # { string record = "DTT0Rcd"
 	#	string tag = "GRENt0" },
 	#   { string record = "DTTtrigRcd"
 	#	string tag = "GRENttrigTest" }
 	}
     }

    es_source rpcConditions = PoolDBESSource {
	string timetype = "runnumber"
	string connect = "frontier://FrontierOn/CMS_COND_18X_RPC"
	PSet DBParameters = {
	    untracked int32 messageLevel = 0
	    untracked string authenticationPath = "/afs/cern.ch/cms/DB/conddb"
	}
	VPSet toGet = {
	    { string record = "RPCEMapRcd"
		string tag = "RPCEMap_v2" }
	}
    }


    es_source siPixelConditions = PoolDBESSource {
	string timetype = "runnumber"
	string connect = "frontier://FrontierOn/CMS_COND_18X_PIXEL"
	PSet DBParameters = {
	    untracked string authenticationPath = "/afs/cern.ch/cms/DB/conddb"
	    untracked int32 messageLevel = 0
	    untracked bool loadBlobStreamer = false
	    untracked int32 connectionTimeOut = 600
	    untracked int32 connectionRetrialPeriod = 30
	    untracked int32 connectionRetrialTimeOut = 180
	    untracked bool enableConnectionSharing = false
	    untracked bool enableReadOnlySessionOnUpdateConnection = false
	    untracked bool enablePoolAutomaticCleanUp = false
	}
	VPSet toGet = {
	    { string record = "SiPixelFedCablingMapRcd"
		string tag = "SiPixelFedCablingMap_v9" }
	}
    }


 ###########################################################################################
 #
 # HCAL Frontier Conditions 
 #
# include "CalibCalorimetry/Configuration/data/Hcal_FrontierConditions.cff"
include "CondCore/DBCommon/data/CondDBSetup.cfi"

es_module hcal_db_producer = HcalDbProducer {
         untracked vstring dump = {""}
         untracked string file = ""
}

es_source hcalConditions = PoolDBESSource {
    string timetype = "runnumber"
    string connect = "frontier://Frontier/CMS_COND_ON_18X_HCAL"
    PSet DBParameters = {
      untracked int32 messageLevel = 0
    }
    VPSet toGet = {
      { string record = "HcalPedestalsRcd" string tag = "hcal_pedestals_fC_v2_grmm" },
      { string record = "HcalPedestalWidthsRcd" string tag = "hcal_widths_fC_v2_grmm" },
      { string record = "HcalElectronicsMapRcd" string tag = "official_emap_v5_080208" },
      { string record = "HcalGainsRcd" string tag = "hcal_gains_v2_gren_reprocessing" },
      { string record = "HcalQIEDataRcd" string tag = "qie_normalmode_v3" }
    }
  }




es_source es_hardcode = HcalHardcodeCalibrations {untracked vstring toGet = {"GainWidths", "channelQuality"}} 


    sequence unpacking = { ecalunpack, hcalunpack, cscunpack, dtunpack, rpcunpack, pixelunpack, stripunpack, l1unpack}


 ###########################################################################################
 #
 # ECAL Frontier Conditions
 #
 include "CalibCalorimetry/Configuration/data/Ecal_FrontierConditions.cff"

 ############################################################################################
 #
 ## Btag conditions
 include "RecoBTag/Configuration/data/RecoBTag_FrontierConditions.cff"

 ## Btau
 #
 include "RecoBTau/Configuration/data/RecoBTau_FrontierConditions.cff"

 ## BeamSpot Conditions
 include "RecoVertex/BeamSpotProducer/data/BeamSpotEarlyCollision.cff"
 
 # Magnetic Field
include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

# Geometry
include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cff"

# DT Geometry
include "Geometry/DTGeometry/data/dtGeometry.cfi"

# CSC Geometry
include "Geometry/CSCGeometry/data/cscGeometry.cfi"

# RPC Geometry
include "Geometry/RPCGeometry/data/rpcGeometry.cfi"
 
include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"
include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
include "HLTrigger/Configuration/data/rawToDigi/EcalGeometrySetup.cff" 
es_module = GlobalTrackingGeometryESProducer {}
 
es_prefer magfield = XMLIdealGeometryESSource{}
  include "CalibTracker/Configuration/data/SiStrip_FrontierCabling.cfi"
 
 replace siStripFedCabling.connect="sqlite_fip:CondCore/SQLiteData/data/sistripfedcabling_18X.db"
 replace siStripFedCabling.toGet= {{ string record = "SiStripFedCablingRcd" string tag = "SiStripFedCabling_18X" }}
 include "TrackPropagation/SteppingHelixPropagator/data/SteppingHelixPropagator.cfi"


   include "Geometry/DTGeometry/data/dtGeometry.cfi"
   include "Geometry/CSCGeometry/data/cscGeometry.cfi"
   include "Geometry/MuonNumbering/data/muonNumberingInitialization.cfi"
   
   include "RecoLocalMuon/DTRecHit/data/dt1DRecHits_LinearDrift_CosmicData.cfi"

   include "RecoLocalMuon/DTSegment/data/dt2DSegments_CombPatternReco2D_LinearDrift_CosmicData.cfi"
   include "RecoLocalMuon/DTSegment/data/dt4DSegments_CombPatternReco4D_LinearDrift_CosmicData.cfi"


   include "RecoMuon/DetLayers/data/muonDetLayerGeometry.cfi"
   include "RecoMuon/MuonSeedGenerator/data/CosmicMuonSeedProducer.cfi"
   replace CosmicMuonSeed.EnableCSCMeasurement = false
   include "RecoMuon/CosmicMuonProducer/data/cosmicMuons.cfi"
   replace     cosmicMuons.TrajectoryBuilderParameters.EnableDTMeasurement = true
       replace cosmicMuons.TrajectoryBuilderParameters.EnableCSCMeasurement = false
       replace cosmicMuons.TrajectoryBuilderParameters.EnableRPCMeasurement = false
       #replace cosmicMuons.TrajectoryBuilderParameters.BackwardMuonTrajectoryUpdatorParameters.Granularity= 0



module SiStripDigis = SiStripRawToDigiModule {
 }

sequence stripunpack = { SiStripDigis }


module muonRPCDigis = RPCUnpackingModule {
  untracked InputTag InputLabel = source
}

sequence rpcunpack = {muonRPCDigis}



    module siPixelDigis = SiPixelRawToDigi {
        untracked bool IncludeErrors = true
    }

sequence pixelunpack = {siPixelDigis}


#    include "L1TriggerConfig/L1GtConfigProducers/data/l1GtBoardMaps.cfi"

    es_module l1GtBoardMaps = L1GtBoardMapsTrivialProducer {
     vstring BoardList = { "GTFE", "FDL", "PSB", "PSB", "PSB", "PSB", "PSB", "PSB", "PSB", "GMT", "TCS", "TIM" }
 
       vint32 BoardIndex = { 0, 0, 0, 1, 2, 3, 4, 5, 6, 0, 0, 0 }
       vint32 BoardIndexDaqRecord = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -1 }
       vint32 BoardIndexEvmRecord = { 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1 }
       vint32 ActiveBoardsDaqRecord = { -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, -1 }
       vint32 ActiveBoardsEvmRecord = { -1, 0, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1 }
       vint32 BoardSlotMap = { 17, 10, 9, 13, 14, 15, 19, 20, 21, 18, 7, 16 }
       vint32 BoardHexNameMap = { 0, 253, 187, 187, 187, 187, 187, 187, 187, 221, 204, 173 }
      # vint32 CableList = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
       vstring CableList = {"TechTr",  "Free",     "Free",       "Free",
                      "IsoEGQ",  "NoIsoEGQ", "CenJetQ",    "ForJetQ",
                      "TauJetQ", "ESumsQ",   "JetCountsQ", "Free",
                      "Free",    "Free",     "Free",       "Free",
                      "MQB1",    "MQB2",     "MQF3",       "MQF4",
                      "MQB5",    "MQB6",     "MQF7",       "MQF8",
                      "MQB9",    "MQB10",    "MQF11",      "MQF12"
      }
       vstring CaloObjectInputMap = { "IsoEGQ", "NoIsoEGQ", "CenJetQ", "ForJetQ", "TauJetQ", "ESumsQ", "JetCountsQ", "Free", "Free", "Free" }

       #vint32 CaloInputToPsbMap = { 1, 1, 1, 1, 2, 2, 2, 2, 3, 3 }
       vint32 CableToPsbMap = {0, 0, 0, 0,
                              1, 1, 1, 1,
                              2, 2, 2, 2,
                              3, 3, 3, 3,
                              4, 4, 4, 4,
                              5, 5, 5, 5,
                              6, 6, 6, 6
      }
       vint32 BoardPositionDaqRecord = { 1, 2,
                                3, 4, 5, 6, 7, 8, 9,
                               10,
                               -1,
                               -1
      }
      vint32 BoardPositionEvmRecord = { 1, 3,
                                       -1,-1,-1,-1,-1,-1,-1,
 
                                      -1,
                                        2,
                                       -1
      }

     }


  es_module l1GtFactors = L1GtFactorsTrivialProducer {
	vint32 PrescaleFactors = { 4000, 2000, 1, 1, 1, 1, 1, 10000, 1000, 100, 1, 1, 1, 1, 10000, 1000, 100, 100, 1, 1, 1, 100000, 100000, 10000, 10000, 100, 1, 1, 1, 100000, 100000, 10000, 1, 1000, 1000, 100, 1, 1000, 100, 1, 1, 1, 1, 10000, 1, 1, 1, 1, 1, 1, 1, 1000, 100, 100, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10000, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3000000, 3000000, 1000, 300, 1000, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
	vuint32 TriggerMask = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
    }
#    es_module l1GtParameters = L1GtParametersTrivialProducer {
#	int32 TotalBxInEvent = 3
#	uint32 ActiveBoards = 0xffff
#    }
    es_module l1GtParameters = L1GtParametersTrivialProducer {
  
      // number of bunch crossing in the GT readout record: 3 bx (standard), 5 bx (debug)
      int32 TotalBxInEvent = 3
      
      // list of active boards for L1 GT DAQ record (actually 16 bits)
      // default: all active 0xFFFF
      uint32 DaqActiveBoards = 0xFFFF
  
      // list of active boards for L1 GT EVM record (actually 16 bits)
      // default: all active 0xFFFF
      uint32 EvmActiveBoards = 0xFFFF
  }

  include "L1TriggerConfig/L1GtConfigProducers/data/l1GtStableParameters.cfi"
  
    
#    es_module l1GtStableParameters = L1GtStableParametersTrivialProducer {
#       uint32 NumberPhysTriggers = 128
#       uint32 NumberPhysTriggersExtended = 64
#       uint32 NumberTechnicalTriggers = 64
#       uint32 NumberL1Muons = 4
#       uint32 NumberL1EGamma = 4
#       uint32 NumberL1IsolatedEGamma = 4
#       uint32 NumberL1CentralJets = 4
#       uint32 NumberL1ForwardJets = 4
#       uint32 NumberL1TauJets = 4
#       uint32 NumberL1JetCounts = 12
#       uint32 NumberConditionChips = 2
#       uint32 PinsOnConditionChip = 96
#       int32 NumberPsbBoards = 7
#       int32 WordLength = 64
#       int32 UnitLength = 8
#       vint32 OrderConditionChip = { 2, 1 }
#    }



  module muonDTTFDigis = DTTFFEDReader {}
    module muonCSCTFDigis = CSCTFUnpacker {
        untracked int32 MinBX = 3
        untracked int32 MaxBX = 9
	untracked vint32 slot2sector = { 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
     
    }
    module gctDigis = GctRawToDigi {
        InputTag inputLabel = source
        int32 gctFedId = 745
    }
    module gtDigis = L1GlobalTriggerRawToDigi {
        untracked InputTag DaqGtInputTag = source
        untracked int32 DaqGtFedId = 813
        uint32 ActiveBoardsMask = 65535
        int32 UnpackBxInEvent = -1
    }


#sequence l1unpack =  { muonDTTFDigis & muonCSCTFDigis & gctDigis & gtDigis }
sequence l1unpack =  { muonDTTFDigis & muonCSCTFDigis & gtDigis }

 
sequence hcalunpack = {hcalZeroSuppressedDigis}

 


module ecalDigis = EcalRawToDigiDev {
    #untracked string InputLabel = "source"
    untracked bool syncCheck = false
    untracked bool eventPut = true
    untracked vint32 orderedFedList = { 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654 }
    untracked vint32 orderedDCCIdList = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54 }
}


sequence ecalunpack = {ecalDigis}

   




sequence dtunpack = {dtunpacker}


    module muonCSCDigis = CSCDCCUnpacker {
        untracked bool PrintEventNumber = false
        untracked bool UseExaminer = false
        untracked uint32 ExaminerMask = 0x7fb7bf6
        untracked uint32 ErrorMask = 0xdfcfefff
        InputTag InputObjects = source
    }

sequence cscunpack = {muonCSCDigis}



# this is copy of RecoLocalMuon/Configuration/data/RecoLocalMuon.cff
# except for the configuration of DT where the LinearDrift_Cosmic data cofiuration
# is used instead of the standard ParamDrift_CSA07 as in standard Reconstruction.cff
#

# Magnetic Field
include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

# Geometry
include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cff"

# DT Geometry
include "Geometry/DTGeometry/data/dtGeometry.cfi"

# CSC Geometry
include "Geometry/CSCGeometry/data/cscGeometry.cfi"

# RPC Geometry
include "Geometry/RPCGeometry/data/rpcGeometry.cfi"


#------------------------------------ DT ------------------------------------------------

# 1D RecHits
include "RecoLocalMuon/DTRecHit/data/dt1DRecHits_LinearDrift_CosmicData.cfi"


# 2D Segments
include "RecoLocalMuon/DTSegment/data/dt2DSegments_CombPatternReco2D_LinearDrift_CosmicData.cfi"

# 4D Segments
include "RecoLocalMuon/DTSegment/data/dt4DSegments_CombPatternReco4D_LinearDrift_CosmicData.cfi"

#------------------------------------ CSC -----------------------------------------------

## 2D RecHit

# old reconstruction not using DB



#include "RecoLocalMuon/CSCRecHit/data/csc2DRecHits.cfi"

# new reconstruction using DB
include "RecoLocalMuon/CSCRecHitB/data/cscRecHitB.cfi"

## Segments
include "RecoLocalMuon/CSCSegment/data/cscSegments.cfi"

#------------------------------------ RPC -----------------------------------------------

# 1D RecHits
include "RecoLocalMuon/RPCRecHit/data/rpcRecHits.cfi"

#----------------------------------------------------------------------------------------

include "RecoLocalTracker/SiStripZeroSuppression/data/SiStripZeroSuppression.cfi"
include "RecoLocalTracker/SiStripClusterizer/data/SiStripClusterizer_RealData.cfi"

    sequence trackerGREN = { siStripZeroSuppression, siStripClusters }



# DT sequence for the standard reconstruction chain
# The reconstruction of the 2D segments are not required for the 4D segments reconstruction, they are us$
# only for debuging purpose and for specific studies
sequence dtlocalreco = {dt1DRecHits, dt4DSegments}

# DT sequence with the 2D segment reconstruction
sequence dtlocalreco_with_2DSegments = {dt1DRecHits, dt2DSegments, dt4DSegments}

# CSC sequence
sequence csclocalreco = {csc2DRecHits, cscSegments}

# DT, CSC and RPC together
sequence muonlocalreco_with_2DSegments = {dtlocalreco_with_2DSegments & csclocalreco & rpcRecHits}

# DT, CSC and RPC together (correct sequence for the standard path)
sequence muonlocalreco = {dtlocalreco & csclocalreco & rpcRecHits}


    sequence recoLocalMuon = {muonlocalreco}
    sequence muonsSTA = {CosmicMuonSeed, cosmicMuons}
    sequence muonsGREN = {  recoLocalMuon, muonsSTA  }
include "TrackPropagation/SteppingHelixPropagator/data/SteppingHelixPropagator.cfi"

sequence  hcalLocalRecoSequence = { hbhereco & hfreco & horeco }

#include "RecoLocalCalo/Configuration/data/RecoLocalCalo.cff"
include "RecoLocalCalo/Configuration/data/ecalLocalRecoSequence.cff"
include "RecoEcal/Configuration/data/RecoEcal.cff"
include "Geometry/CaloEventSetup/data/CaloGeometry.cff"
sequence calolocalreco = {ecalLocalRecoSequence & hcalLocalRecoSequence}
    sequence ecal = {ecalWeightUncalibRecHit, ecalRecHit}
    sequence ecalClustersGREN = {islandClusteringSequence,hybridClusteringSequence}
    sequence hcal = { hcalLocalRecoSequence}

    
    sequence caloGREN = { ecal, ecalClustersGREN, hcal }
    
include "RecoJets/Configuration/data/RecoJets.cff"
include "RecoJets/Configuration/data/CaloTowersRec.cff"
 sequence jetsGREN = {caloTowersRec, recoJets}
   module testMagneticField = testMagneticField {}
   
   //    sequence reconstructionGREN = { unpacking, trackerGREN, caloGREN, muonsGREN,  jetsGREN}
    sequence reconstructionGREN = { unpacking, caloGREN, muonsGREN,  jetsGREN}
    
module myanalysis = HcalJetAnalyzer {

# names of modules, producing object collections

  string electrons  = "pixelMatchGsfElectrons"   
  string muons      = "cosmicMuons" 
# string muons      = "globalmuons" 
  string calotowers = "towerMaker"   
  string tracks     = "ctfWithMaterialTracks"   
  string vertices   = "offlinePrimaryVerticesFromCTFTracks"
  string jets       = "iterativeCone5CaloJets"
  string jetsgen    = "iterativeCone5GenJets"
  #131den
  string taujet     = "coneIsolation"
  #131den
  string photons    = "correctedPhotons"
  string calomet    = "met"
 # string bjettag    = "trackCountingHighEffJetTags"
  string bjettag    = "trackCountingJetTags"
  string tautag     = "coneIsolationTauJetTags"
  InputTag HLTriggerResults = TriggerResults
  string PropagatorName = "SteppingHelixPropagator"

    ######## new
   bool doTrig = true
      bool doHits = true
      bool doSegs = true
      bool doSA = true
      bool isMC = false
      untracked bool debug = true
        bool LCT_RPC = true
        bool LCT_DT = true
        bool LCT_CSC = true
        #untracked string rootFileName = "DTAnalyzer_YB0.root"
        string DTLocalTriggerLabel = "dtunpacker"
        string recHits1DLabel = "dt1DRecHits"
        string recHits2DLabel = "dt2DSegments"
        string recHits4DLabel = "dt4DSegments"
  ###### end new
       untracked string tTrigMode = 'DTTTrigSyncFromDB'
       untracked PSet tTrigModeConfig = {
          untracked bool debug = false
          # The ttrig from the time box fit is defined as mean + kFactor * sigma
          double kFactor = -1.3
          # The velocity of signal propagation along the wire (cm/ns)
          double vPropWire = 24.4
          # Switch on/off the TOF correction from pulses
          bool doT0Correction = true   
          # Switch on/off the TOF correction for particles
          bool doTOFCorrection = false 
          # Switch on/off the correction for the signal propagation along the wire
          bool doWirePropCorrection  = false 
          # The correction type for TOF
          int32 tofCorrType = 2
          int32 wirePropCorrType = 0
	  
      }

       string SALabel = "cosmicMuons"
   
# name of output root file with histograms
 #string outputFileName = "NTupDB_5_1_09.root"
# string outputFileName = "NTupnewPeds_5_1_09.root"
 # string outputFileName = "NTuplenewfile_5_1_09_Hcoded.root"	
# name of output root file with histograms
string outputFileName = "NTupleqcdMC.root"
#string outputFileName = "NTuplenewfile_5_1_09_DB.root"	
 
  bool useRealOnly = true
#  bool Hcodedqie=true
   bool Hcodedqie=false
  
} 
  service = TFileService { 
    string fileName = "grumm-r37893.root"
  }
    path allPath = {  testMagneticField, reconstructionGREN , myanalysis }
    
    

#    endpath outpath = {FEVT}
}
