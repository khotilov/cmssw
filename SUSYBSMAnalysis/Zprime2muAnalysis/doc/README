The Zprime2muAnalysis package
-----------------------------

Authors: Robert Cousins
         Jason Mumford
         Jordan Tucker
         Slava Valuev
         (UCLA)

Electron Extension Contributor: Jeremy Werner (Princeton)


Zprime2muAnalysis consists of several analysis modules intended for
studying high-mass resonances.

Zprime2muAnalysis:   fills vectors of muons, constructs dimuons, calculates
                     invariant mass and other quantities.  This is the base
                     class for the other modules, so its code is called
                     in each of them.

Zprime2muResolution: calculates resolutions (mass, phi, eta, etc.) of
                     the muon fits at different levels of reconstruction
                     and plots them.

Zprime2muAsymmetry:  performs 6D unbinned maximum-likelihood fits to measure
                     the forward-backward asymmetry (A_{FB}) for Drell-Yan
                     and Z' events, for both generated and reconstructed
                     muons (see CMS NOTE 2005/022).

Zprime2muMassReach:  performs unbinned maximum-likelihood fits to measure
                     signal and background contribution and calculates
                     the discovery potential for a given integrated
                     luminosity (see CMS NOTE 2006/062).

As mentioned above, Zprime2muAnalysis is not intended to be run
separately, except for debugging purposes.  In this case it will dump
to the appropriate MessageLogger destination various messages
concerning the selection of muons (either generated, or at various
levels of reconstruction) and the assembling of dimuons.

The .cfg files in the test/ subdirectory illustrate usage of these
modules; default parameters for each module are specified in the .cfi
and .cff files in the data/ subdirectory.  As in the .cfg files, in
general these modules take as input EDM ROOT files with
fully-reconstructed (i.e. GEN-SIM-DIGI-L1-HLT-RECO all performed)
gamma*/Z0/Z' --> l- l+ events (with l=e,mu).  Some sample files are
available at /castor/cern.ch/user/t/tucker/CMSSW_1_6_7.  At the time
being, the package has been written and tested to work with version
1_6_7 of CMSSW.  The tag V00-00-04 should be used.  Module-specific
instructions follow.

Zprime2muAnalysis
-----------------
In data/Zprime2muAnalysisCommon.cff one can find a set of InputTags
defining which collections of reco objects are to be used from the
input ROOT file; these may be changed if necessary. There are
a few flags of interest:

  doingElectrons:    switch to using electron collections instead of muons
                     (see below section, "Electron Extension").
  generatedOnly:     whether only to bother with generator-level information.
  reconstructedOnly: likewise, whether only to bother with reconstructed
                     information.
  useOtherMuonRecos: if set, look for other MuonCollections in the input file
                     named "muonsFMS", etc., which correspond to the other
                     available TeV muon reconstructors.
  usingAODOnly:      whether only to use objects that are available in the
                     AOD; this overrides generatedOnly, reconstructedOnly,
                     and useOtherMuonRecos with the values false, true, and
                     false, respectively.
  useTriggerInfo:    whether to examine the L1/HLT information present in
                     the file (not available for electrons).

Zprime2muResolution
-------------------
The user defines the mass range for the histograms to be produced,
and the number of bins.  The user inputs the ROOT file(s) to be analyzed,
runs the cmsRun job, and various plots are produced in the current
directory in muon_resolution.ps.

Zprime2muAsymmetry
------------------
Here there are a few knobs for the user to turn.  Depending on the Z'
model and mass one wishes to study, an appropriate PSet such as the
ones in data/AsymmetryDataSets.cff must be specified.  (For example,
the Zssm1000 PSet contains parameters appropriate for examining a SSM
Z' at 1 TeV.)  Ignoring the more self-explanatory parameters, the user
must specify:

  genSampleFiles: EDM ROOT files with many events from which the code
                  obtains parameterizations for the relevant variables.
  massDistType:   what form the pdf for the invariant mass distribution
                  should take; for example, if the data is Drell-Yan
                  continuum, the user specifies 1 for a falling
                  exponential fit.
  recSigma:       the sigma of the Gaussians used in the smear which
                  simulates detector resolution; these are obtained from
                  the plots on the last two pages of fitHistos.*.ps
                  (which is written by the code).

Then, the dataSet parameter must be changed to the appropriate PSet
name. Other parameters that can be changed are:

  verbosity:       control the level of debug information dumped;
                   current levels are 0-3 (0 being none, and 3 being
                   too much);
  noFit:           only produce histograms of the data, and do not
                   actually perform any fit; useful for getting the
                   plots to obtain the recSigma information above;
  onlyEvalLLR:     if true, do not do the full fit on the data, but
                   evaluate the log-likelihood ratios, useful for spin
                   discrimination studies (currently disabled);
  fitType:         a magic number which determines the form of the
                   cos_theta_cs pdf used in the fit or evaluation of
                   the likelihood ratio;
  numFits:         how many of the fits to do (default is all 6, which
                   are combinations of generated or reconstructed data,
                   and detector resolution simulation via smearing or
                   not);
  maxParamEvents:  a way to cap the number of events read from
                   genSample, useful if using all events is overkill;
  useCachedParams: flag to enable using the cached parameterization that
                   exists in the file specified by the parameter
                   paramCacheFile, instead of re-calculating the
                   parameterization;
  paramCacheFile:  a ROOT filename in which the parameterization
                   calculation will store its quantities;
  calcParamsOnly:  if enabled, the job will only calculate the
                   parameterization and exit;
  onPeak:          whether to use the on-peak fit window or the off-peak
                   one (see the data set parameters in
                   AsymmetryDataSets.cff);
  internalBremOn:  whether bremsstrahlung was turned on for the generated
                   events;
  fixbIn1DFit:     whether to fix b to the "true" value of 1.0 in the
                   simple 1-D fits, so that the only parameter is A_FB
  useCosTrueInFit: whether to cheat and use MC truth for cos(theta) in
                   the full-blown 2-D/6-D fits for diagnostic purposes;
  artificialCosCS: whether to correct the calculated cos_cs values for
                   mistagging using MC truth;
  correctMistags:  whether to bother using the mistagging probability
                   in the fit at all;
  calculateMistag: whether to calculate the mistag probability omega(y,M)
                   on an event-by-event basis rather than using the
                   parameterization omega(y).

Once the config is set, after running the cmsRun job there will be
various files written to the current directory. These contain various
histograms of the data and the result of the fit. (In the filename,
* is replaced by outputFileBase and other important information.)

  diffFrameAsym.*.ps:
    contains plots of cos_theta in various frames (Gottfried-Jackson,
    Collins-Soper, etc.), and plots of A_{FB} as functions of rapidity
    and mass;
  dumpFitData.*.txt:
    a dump of the six variables that are to be fitted: cos_theta_cs,
    dilepton inv. mass, rapidity, pT, phi, and phi_cs, each both
    at generator level and reconstructed;
  fitHistos.*.ps:
    the data in the previous file histogrammed, as well as resolution
    plots relevant to the asymmetry fit;
  fitParams.*.ps:
    histograms of the info used to calculate the parameterizations,
    and mistag probability information plots;
  frameAsym.*.txt:
    A_{FB} in various frames calculated by a simple counting method
    for each reconstruction level;
  recAsymFit.*.txt:
    contains the mistag parameter information and the results of the
    fits (A_{FB} and errors).

Zprime2muMassReach
------------------
The user is supposed to provide three input files.  The first one is
signal (full-interference Z'), the other two are backgrounds.  The
first background sample is the Drell-Yan generated in the same mass
region as the signal, the second one can be anything but is typically
the Drell-Yan generated at lower masses.  The former background sample
is normally used only for signal-vs-background plots (except for
special applications, when it is used to get a parameterization of the
background slope); the latter gets added to the signal sample
(typically provides events leaking from lower masses to higher
masses).

The user should define a number of parameters for each of the sets in
data/MassReachDataSets.cff.  These parameters include the
cross-sections, K factors, number of generated events (used for
normalizations of certain histograms), and lowerGenMass and
upperGenMass vectors (used to pre-select events based on true dimuon
masses to avoid double-counting).  For the full list of sample-related
parameters, see comments in data/MassReachDataSets.cff.

Parameters defining the analysis flow are in data/Zprime2muMassReach.cfi.
Most of them have special purposes and the default values should not
be modified in the "normal" job.  Notable exceptions are:

- FixedMass and FixedFWHM.  They define whether the resonance mass and
  the resonance width are let float in the fits, or are fixed to some
  reasonable values (default).

- ExpPlots.  If this parameter is set to true, invariant mass distributions
  of individual "pseudo-experiments" and the results of their fits
  will be saved into postscript files in test/mass_plots directory
  (for the first 10 pseudo-experiments).

- intLumi.  Defines the integrated luminosity (in inv. fb) for which the
  user wishes to calculate the mass reach.

The code contains several pre-defined parameterizations used in the
fits, such as of the background slope and of the invariant mass
resolution.  The exact values of the parameters depend on several
factors (CMSSW version, alignment scenario, etc.) and hence should be
tuned for every use case.  The values currently used are essentially
the ones used for the studies in the Physics TDR; we made sure they
give reasonable results for the ideal alignment case in CMSSW_1_3_1,
but have not (re-)tuned them carefully.  One caveat: if one wishes to
study Z' masses other than 1 TeV (3 and 5 TeV are the other two
allowed use cases), one needs to change integration limits in
src/Functions.C (mass_min and mass_max in lorengauPlusExpbckgNorm
method).

The output of the job consists of various dumps in Zprime.out, and two
ps files.  Zmodelmass_sig_back.ps contains signal-vs-background plots;
mass_fits.ps stores the results of the fits (notably various
significance distributions), and some goodness-of-fit distributions
for S+B and B-only hypotheses.

Electron Extension
------------------
The code has been updated to handle electrons in addition to muons.
In particular, a boolean switch "doingElectrons" that is defined in
data/Zprime2muAnalysisCommon.cff can be flipped to true to run over
electrons instead of muons.  The default of this switch is false.
When flipped to true, the generator/simulator level "Muon" object is
filled just as before, only with a switch in the PID to 13 to 11.  New
functions have been written to support the filling of the
reconstructed level "Muon" object from the offline
PixelMatchGsfElectron electron candidates, and, of course, these
functions are called when the switch is flipped to true.

After the filling of the "Muon" objects, the flow of the code is
nearly identical to the muon case.  The only exceptions occur in the
Zprime2muAnalysis module: In the muon chain considerable muon
selection occurs, whereas a lot of this selection does not occur in
the electron chain.  (The code inputs many different classes of muon
candidates, whereas it inputs only offline PixelMatchGsfElectron
electron candidates.  It is suggested that the standard HEEP tools
that are under development be used before this code for most of the
electron selection).  Similarly, the module produces many different
dilepton collections in the muon mode, whereas it does not in the
electron mode.

To run in the electron mode:  Change "doingElectrons = false" to 
"doingElectrons = true" in data/Zprime2muAnalysisCommon.cff 

Step-by-step instructions
-------------------------

To check out the package:

   scramv1 project CMSSW CMSSW_1_6_7
   cd CMSSW_1_6_7/src
   project CMSSW
   cvs co -r V00-00-04 SUSYBSMAnalysis/Zprime2muAnalysis
   # next is needed for fwlite::ChainEvent to read from CASTOR,
   # but the unit test will fail; OK for our purposes
   cvs co -r V00-07-00 DataFormats/FWLite

To compile:

   eval `scramv1 runtime -csh`
   cd SUSYBSMAnalysis/Zprime2muAnalysis/src
   scramv1 b

To run (where the .cfg can be any of the 4 .cfg files in /test):

   cd ../test
   cmsRun testZprime2muResolution.cfg

