The variables immediatly below are internal values for this test suite.
The difffile tag implies that after each run the eventual file gsfElectronHistos.root is automatically
renamed as target.olog.gsfElectronHistos.root . This way, we can use the same output file
name for all the cmsRun configurations, yet keeping a separate copy of each kind of
execution.

<var name="TEST_OUTPUT_FILE" value="gsfElectronHistos.root">
<difffile name="gsfElectronHistos.root">

The DBS_* variables are configuration variables for dbs_discovery.py,
which prepares and send a query to the Data Discovery web server,
and receive as a result the corresponding list of input data files.

<var name="DBS_RELEASE" value="CMSSW_3_0_0_pre2">
<var name="DBS_LIKE" value="*IDEAL_V9_v2*-RECO">

The VAL_* variables are configuration variables for newvalidation.csh,
which compares the histograms from two releases. newvalidation.csh relies
on the ROOT script newvalidation.C.

<var name="VAL_NEW_RELEASE" value="220IdealTestAmbiguity">
<var name="VAL_REF_RELEASE" value="220pre1IDEAL">
<!var name="VAL_REF_DIR" value="~uberthon/scratch0/electrons/CMSSW_2_1_9/src/RecoEgamma/Examples/test">

The tags below are defining whic are the output line sof reference, to be compared
from one execution to another. Currently, for each TH1 histogram, we require a constant
number of entries, and no more than 10% change on each histogram sum.

<diffline expr="^(TH1.Print Name  = [a-zA-Z_]+, Entries= \d+),.*$">
<diffnumber expr="^TH1.Print Name  = [a-zA-Z_]+, Entries= \d+, Total sum= (\S+)$" tolerance="5%">
<diffline expr="^(h_\S+ has \d+ entries of mean value )\S+$">
<diffnumber expr="^h_\S+ has \d+ entries of mean value (\S+)$" tolerance="10%">
<!diffvar name="HISTO" expr="^TH1.Print Name  = [a-zA-Z_]+, Entries= \d+, Total sum= (\S+)$" tolerance="10%">

Here comes the concrete executables to run. They are split among few different
environments, each one defining the relevant variales for a given data sample.
Running dbs_discovery.py is only usefull to check the correctness of the list of
input data files returned by the data discovery web server. We guess that from
time to time we will have to upgrade the values DBS_* variable so to keep in
touch with changes in data catalog structure.

<environment name="Pt10">
  <var name="DBS_SAMPLE" value="RelValSingleElectronPt10">
  <var name="VAL_ANALYZER" value="GsfElectronMCAnalyzer">
  <!var name="VAL_REF_FILE" value="${VAL_REF_DIR}/gsf-Pt10Ideal-ElectronHistos.root">
  <executable name="dbs_discovery.py">
  <executable name="cmsRun" args="${VAL_ANALYZER}_cfg.py">
  <executable name="newvalidation.csh" args="Pt10 ${TEST_OUTPUT_FILE}">
</environment>

<environment name="Pt35">
  <var name="DBS_SAMPLE" value="RelValSingleElectronPt35">
  <var name="VAL_ANALYZER" value="GsfElectronMCAnalyzer">
  <!var name="VAL_REF_FILE" value="${VAL_REF_DIR}/gsf-Pt35Ideal-ElectronHistos.root">
  <executable name="dbs_discovery.py">
  <executable name="cmsRun" args="${VAL_ANALYZER}_cfg.py">
  <executable name="newvalidation.csh" args="Pt35 ${TEST_OUTPUT_FILE}">
</environment>

<environment name="Pt5-100">
  <var name="DBS_SAMPLE" value="RelValSingleElectronFlatPt5To100">
  <var name="VAL_ANALYZER" value="GsfElectronMCAnalyzer">
  <executable name="dbs_discovery.py">
  <executable name="cmsRun" args="${VAL_ANALYZER}_cfg.py">
  <executable name="newvalidation.csh" args="Pt5-100 ${TEST_OUTPUT_FILE}">
</environment>

<environment name="QcdPt80-120">
  <var name="DBS_SAMPLE" value="RelValQCD_Pt_80_120">
  <!var name="VAL_REF_FILE" value="~/scratch0/CMSSW_2_1_9/src/RecoEgamma/Examples/test/gsfElectronHistos_QCD_Pt_80_120.root">
  <var name="VAL_ANALYZER" value="GsfElectronFakeAnalyzer">
  <executable name="dbs_discovery.py">
  <executable name="cmsRun" args="${VAL_ANALYZER}_cfg.py">
  <executable name="newvalidation.csh" args="QcdPt80-120 ${TEST_OUTPUT_FILE}">
</environment>

