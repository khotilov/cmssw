#!/usr/bin/perl -w
#
# $Id: showtags,v 1.5 2007/11/29 17:12:05 elmer Exp $
#
# Created by: Shahram Rahatlou
#             University of Rome & INFN
#             23 Feb 2006
#
use strict;
use Getopt::Long;
use Cwd;

my $doCVS;
my $doDiff;
my $doHelp;
my $tagCollector;
my $reltag;
my $updatedtags;
my $wrtBaseRel;
GetOptions("check|c" => \$doCVS,
           "diff|d" => \$doDiff,
           "updated|u" => \$updatedtags,
           "release|r" => \$reltag,
           "tagCollector|t" => \$tagCollector,
           "wrtBaseRel" => \$wrtBaseRel,
           "help|h" => \$doHelp);

#-- main start here

if( defined $doHelp )   {  usage(); }

# if asking for diff then CVS check is forced
if(defined $doDiff) { $doCVS = 1; }

my @subsys;
my @packages;
my $curr = cwd();
my %tagMap;

die "CMSSW_BASE not defined! run scramv1 first!\n" unless defined $ENV{CMSSW_BASE} ;
my $maindir = "$ENV{CMSSW_BASE}/src";
chdir "$maindir" or die "could not change directory to $maindir!\n";

die "CMSSW_RELEASE_BASE not defined! run scramv1 first!\n" unless defined $ENV{CMSSW_RELEASE_BASE};
my @v1 = split('/',$ENV{CMSSW_RELEASE_BASE});
my $nlast = @v1;

my $taglist = "$ENV{CMSSW_RELEASE_BASE}/src/PackageList.cmssw";
die "Cannot find release package/tag list at $taglist\n" if (!-e $taglist);

# this is our release
my $relver = $v1[$nlast-1];

print STDOUT "Test Release based on: $relver\n";
print STDOUT "Base Release in: $ENV{CMSSW_RELEASE_BASE}\n";
print STDOUT "Your Test release in: $ENV{CMSSW_BASE}\n";


# change printout depending on whether changes are shown wrt current test release or
# the original production release. This helps a lot to quickly check changes being requested
# in close periods in tags claimed to be bug fixes
#
if(defined $wrtBaseRel) {

  if(defined $doCVS) {
     print STDOUT "checking for differences for each package wrt your test release based on $relver\n";
  }

  if(defined $doDiff) {
     print STDOUT "showing changes for all modified files wrt your test release\n";
  }

} else {

  if(defined $doCVS) {
     print STDOUT "checking for differences for each package wrt base release $relver\n";
  }

  if(defined $doDiff) {
     print STDOUT "showing changes for all modified files wrt base release $relver\n";
  }

}

my $c2 = cwd();
#print STDOUT "current directory: $c2\n";

# now get the list of subsystems
my @f1 = `ls`;

# Get the list of packages
for my $f (@f1) {
  chomp($f);
  chdir("$maindir");
  if( -d $f && ($f ne "CVS") ) { 
    push @subsys, $f;
    chdir("$f");
    # list of packages in subystem
    my @f2 = `ls`;
    for my $ff (@f2) {
      chomp($ff);
      if(-d $ff && ($ff ne "CVS") ) {
        my $pack = "$f/$ff";
        push @packages, "$pack";
      }
    }
  }

}

# Print the headers
my $pkgheader = "-------- Package --------";
my $tagheader = "--- Tag ---";
my $reltagheader = "--- RelTag ---";
if(defined $reltag) {
  if(defined $tagCollector) {
    printf '%-48s %-14s %-14s %s', $pkgheader,$tagheader,$reltagheader,"\n";
  } else {
    printf '%-14s %-14s %-48s %s', $tagheader,$reltagheader,$pkgheader,"\n";
  }
} else {
  if(defined $tagCollector) {
    printf '%-48s %-14s %s', $pkgheader, $tagheader,"\n";
  } else {
    printf '%-14s %-48s %s', $tagheader, $pkgheader,"\n";
  }
}

# Loop over the packages and get the requested information for them
chdir("$maindir");
my $pkgsdisplayed=0;
foreach my $ipack (@packages) {
  # First look at the tag in the scram developer area
  my $tag = "NoCVS";
  if(-d "$ipack/CVS" ) {
    my $tagfile = "$ipack/CVS/Tag";
    if(-f $tagfile) { 
      # use existing tag
      $tag = `cat $tagfile`; 
      chomp($tag); 
      $tag = substr($tag,1,1000);
    } else {            
      # no tag available
      $tag = "NoTag"; 
    }
  }
  # If requested to print the tag from the base release or requested to
  # only print tags which are different from the base release, obtain
  # the tag from the base release (this should probably be moved out
  # of the loop over packages as read read the release tag list N times
  # in this implementation) 
  my $tagrel = ""; 
  if ((defined $reltag)||(defined $updatedtags)) {
    open IN, "$taglist";
    my $l2="";
    my $thepack=""; my $thetag="";
    while(my $l = <IN>) {
      chomp $l;
      ($thepack,$thetag) = split '\s+', $l;
      if($thepack eq $ipack) { $tagrel = $thetag; last; }
    }
    close IN;
  }

  if ((!defined $updatedtags)||($tag ne $tagrel)) {
    $pkgsdisplayed=$pkgsdisplayed+1;
    if (defined $reltag) {
      if(defined $tagCollector) {
        printf '%-48s %-14s %-14s %s', $ipack, $tag, $tagrel, "\n";
      } else {
        printf '%-14s %-14s %-48s %s', $tag, $tagrel, "$ipack", "\n";
      }
    } else {
      if(defined $tagCollector) {
        printf '%-48s %-14s %s', $ipack, $tag, "\n";
      } else {
        printf '%-14s %-48s %s', $tag, "$ipack", "\n";
      }
    }
  }
  $tagMap{"$ipack"} = $tag;
  my $ocvs = "";

  # check against release version
  my @filesToDiff; # files to diff with CVS
  my @newFiles;    # files not in repo

  if( !(defined $wrtBaseRel) && (defined $doCVS) && ($tag ne "NoTag") && ($tag ne "NoCVS") ) {

     #print STDOUT "-------- cvs diff : begin ---------\n";
     open CL, "cvs -n update -r $tag $ipack 2>&1 |";
     while(my $l = <CL>) {
       chomp($l);
       next if($l =~ /cvs update: Updating/);
       print STDOUT "  $l\n";
       if($l =~ /M (.*)/) { push @filesToDiff, $1;}
       if($l =~ /\? (.*)/) { push @newFiles, $1;}
     }
     close CL;
     #print STDOUT "-------- cvs diff : end   ---------\n";
     my $ndiff = @filesToDiff;
     my $nnew = @newFiles;
     #if( $ndiff>0 ) { print STDOUT "Files modified: $ndiff\n"; }
     #if( $nnew>0 ) { print STDOUT "New files: $nnew\n"; }
  }

  # diff with CVS if requested
  if( !(defined $wrtBaseRel) && (defined $doDiff) && (@filesToDiff>0) ) {
    #print STDOUT "running cvs diff -ub -r $relver\n";
    for my $nf ( @filesToDiff ) {
      open D, "cvs diff -ub -r $tag $nf 2>&1|";
      while(my $l = <D>) {
        chomp $l;
        next if($l =~/^kserver/);
        print STDOUT "$l\n";
      }
    }
    close D;
  }

  # check against base release version
  my @filesToDiffBase; # files to diff with CVS
  my @newFilesBase;    # files not in repo
  if( (defined $wrtBaseRel) && (defined $doCVS) && ($tag ne "NoTag") && ($tag ne "NoCVS") ) {

     #print STDOUT "-------- cvs diff : begin ---------\n";
     open CL, "cvs -n update -r $tagrel $ipack 2>&1 |";
     while(my $l = <CL>) {
       chomp($l);
       next if($l =~ /cvs update: Updating/);
       print STDOUT "  $l\n";
       if($l =~ /M (.*)/) { push @filesToDiffBase, $1;}
       if($l =~ /\? (.*)/) { push @newFilesBase, $1;}
     }
     close CL;
     #print STDOUT "-------- cvs diff : end   ---------\n";
     my $ndiff = @filesToDiff;
     my $nnew = @newFiles;
     #if( $ndiff>0 ) { print STDOUT "Files modified: $ndiff\n"; }
     #if( $nnew>0 ) { print STDOUT "New files: $nnew\n"; }
  }

  # diff with CVS wrt base release if requested
  if( (defined $wrtBaseRel) && (defined $doDiff) && (@filesToDiffBase>0) ) {
    #print STDOUT "running cvs diff -ub -r $relver\n";
    for my $nf ( @filesToDiffBase ) {
      open D, "cvs diff -ub -r $tagrel $nf 2>&1|";
      while(my $l = <D>) {
        chomp $l;
        next if($l =~/^kserver/);
        print STDOUT "$l\n";
      }
    }
    close D;
  }

}


my $nsys = @packages;
print "---------------------------------------\n";
print STDOUT "total packages: $nsys ($pkgsdisplayed displayed)\n";

# go back to user's initial directory
chdir $curr;

# -- main ends here

#-----------
sub usage {
#-----------
print STDOUT <<ENDHELP;
showtags [--check|-c] [--diff|-d] [--help|-h]

  usage:      --help|-h           Print this message
              --check|-c          Check for differences wrt tag in your
                                  test release
              --diff|-d           Do cvs diff with tag in test release
              --wrtBaseRel        options -c and -d will be WRT base release
              --updated|-u        Only show tags which are different from 
                                  the base release
              --release|-r        Show also the tag used for the base release 
              --tagCollector|-t   Print "package   tag" instead of the
                                  default "tag   package"

ENDHELP
exit 0;
}


