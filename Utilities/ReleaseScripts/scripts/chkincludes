#!/usr/bin/env perl
use Cwd;
use File::Basename;
use lib dirname($0);
use Getopt::Long;
use SCRAMGenUtils;
$|=1;

my $curdir=cwd();
my $scriptdir=dirname($0);
my $package=shift || die "Usage: $0 <Subsystem/Package|clean>";
my $xincargs="";
while(my $arg=shift)
{
  if($arg=~/\s/){$arg="\"$arg\"";}
  $xincargs.=" $arg";
}

my $localtop = &SCRAMGenUtils::scramReleaseTop($curdir);
if($localtop eq ""){die "\"$curdir\" is not a SCRAM-based project area. Please create a SCRAM-based project dev area and run this script";}
if(&SCRAMGenUtils::getFromEnvironmentFile("RELEASETOP",$localtop) eq "")
{die "\"$localtop\" is a release area. Please run this script in your developer area.\n";}

my $arch=&SCRAMGenUtils::getScramArch();
my $tmpdirtop="${localtop}/tmp/${arch}/includechecker";
$package=~s/^\s*//;$package=~s/\s*$//;
if($package=~/^clean$/i){system("rm -rf $tmpdirtop");print "Tmp area \"$tmpdirtop\" cleaned up.\n";exit 0;}

my $src=&SCRAMGenUtils::getFromEnvironmentFile("SCRAM_SOURCEDIR",$localtop) || "src";
if(-d $package)
{
  my $d=$package;
  if($d!~/^\//){$d="${curdir}/${package}";}
  $d=&SCRAMGenUtils::fixPath($d);
  if($d=~/^$localtop\/${src}\/(.+)$/){$package=$1;}
}
if($package eq ""){die "Please use a valid Subsystem/Package name.\n  Usage: $0 <Subsystem/Package|clean>";}
if(!-d "${localtop}/${src}/${package}")
{die "There is no such subsystem/package/directory \"$package\" available under \"${localtop}/${src}\". Please first checkout this package.";}

my $scram=$SCRAMGenUtils::SCRAM_CMD;
my $uniqpack=$package; $uniqpack=~s/\///g;
my $tmpdir="${tmpdirtop}/${uniqpack}";
my $configfile="${tmpdirtop}/${uniqpack}.conf";

system("rm -rf $tmpdir; mkdir -p $tmpdir");
if(!-f $configfile)
{system("${scriptdir}/createconfig.pl ${localtop}/${src}/${package} > ${configfile}.tmp && mv ${configfile}.tmp $configfile");}
system("${scriptdir}/includechecker.pl --config $configfile --tmpdir ${tmpdir} --filter '^$package/' --keep --detail --recursive $xincargs 2>&1 > ${tmpdir}/run.log");

my $newfiles = &getNewFiles("${tmpdir}/cache/files/${package}");
my $done=[];
my $failed=[];
my $skipped=[];
foreach my $f (@$newfiles)
{
  if(-f $f)
  {
    my $rf=$f; $rf=~s/^${tmpdir}\/cache\/files\///;
    foreach my $line (`cat $f`)
    {
      chomp $line;
      if($line=~/^\s*(ERROR|INTERNAL_SKIP|FINAL_DONE)\=\>\((\d+)\)\s*$/)
      {
	my $type=$1; my $val=$2;
	if($val == 1)
	{
	  if($type eq "ERROR"){push @$failed,$rf;}
	  elsif($type eq "FINAL_DONE"){push @$done,$rf;}
	  else{push @$skipped,$rf;}
	  last;
	}
      }
    }
  }
}

print "Total files checked:           ",scalar(@$newfiles),"\n";
print "  Failed due to compilation:   ",scalar(@$failed),"\n";
foreach my $f (@$failed){print "    $f\n";}
print "  Skipped:                     ",scalar(@$skipped),"\n";
foreach my $f (@$skipped){print "    $f\n";}
print "  Successfully processed:      ",scalar(@$done),"\n";
if   (scalar(@$newfiles) == 0){print "It seemed there were no files under \"$package\" to process.\n";}
elsif(scalar(@$done) == 0){print "There were no files successfully processed by includechecker.\n";}
else
{
  $newfiles = &getNewFiles("${tmpdir}/includechecker");
  if(scalar(@$newfiles) == 0){print "It seemed that file(s) processed successfully by includechecker are all good. No include statement added/removed.\n";}
  else
  {
    print "  Modified by includechecker:  ",scalar(@$newfiles),"\n";
    foreach my $f (@$newfiles)
    {
      my $rf=$f; $rf=~s/^${tmpdir}\/includechecker\/${src}\///;
      my $oref; my $iref;
      my $added=0; my $removed=0;
      open($iref,$f) || die "Can not open file for writing.";
      open($oref,">$f.new") || die "Can not open file for writing.";
      while(my $line=<$iref>)
      {
        chomp $line;
	if($line=~/^\s*\/\/INCLUDECHECKER: Removed this line:/){$removed++;next;}
	elsif($line=~/(.*?)\/\/INCLUDECHECKER: Added this line\s*$/){$added++;$line=$1;}
	print $oref "$line\n";
      }
      close($oref); close($iref);
      system("mv $f.new ${localtop}/${src}/${rf}");
      print "    $rf ($removed,$added)\n";
    }
  }
}
print ">> IncludeChecker temporary directory: ${tmpdir}\n";
print ">> IncludeChecker log file           : ${tmpdir}/run.log\n";
exit 0;

sub getNewFiles ()
{
  my $dir=shift;
  my $files=shift || [];
  foreach my $d (&SCRAMGenUtils::readDir($dir))
  {
    my $fullpath="${dir}/${d}";
    if(-d $fullpath){&getNewFiles($fullpath,$files);}
    elsif(-f $fullpath)
    {
      if($fullpath=~/(.*?)\.new$/){if(-f $1){next;}}
      push @$files,$fullpath;
    }
  }
  return $files;
}
