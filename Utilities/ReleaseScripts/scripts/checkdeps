#!/usr/bin/env perl
#
# $Id: checkdeps,v 1.8 2009/09/28 07:33:58 muzaffar Exp $
#
# Created by: David Lange
#             LLNL
#             12 September 207
#
use strict;
use warnings;
use Getopt::Long;
use Cwd;

#Idea: diff checked out packages.
#     looking for changed headers
#     find all packages that depend on those headers
#     print that list.

#if any argument, print help and exit 

my $runAddpkg=0;
my $checkpython=0;
my $checkheader=0;
 
foreach my $arg (@ARGV) {
    if ( $arg eq "-a" ) {
	$runAddpkg=1;
    }
    elsif ( $arg eq "-p" ) {
	$checkpython=1;
    }
    elsif ( $arg eq "-h" ) {
	$checkheader=1;
    }
    else{
	print "checkdeps:\n";
	print "   Utility to check your local development area against the CMSSW release.\n";
	print "   Any modified header files or python modules are found and the package\n";
	print "   dependencies of these files will be returned. addpkg-ing these packages\n";
	print "   and rebuilding them should provide a full and consistent build.\n";
	print "\nUsage: \n";
	print "   -p look for python modules and their dependencies (ON by default)\n";
	print "   -h look for header files and their dependencies   (ON by default)\n";
	print "   -a will checkout the packages into your development area (done by addpkg)\n\n";
	exit;
    }
}

if ((!$checkpython) && (!$checkheader)) {
    $checkpython=1;
    $checkheader=1;
}

if ( $ENV{'LOCALRT'} eq "" ) {
    print "Please setup the scram runtime environment before running this script\n";
    exit;
}

if ( $ENV{'CMSSW_RELEASE_BASE'} eq "" ) {
    print "Please setup the scram runtime environment before running this script\n";
    exit;
}

if ( $ENV{'CVSROOT'} eq "" ) {
    print "Please setup the CVS environment before running this script (likely |project CMSSW|)\n";
    exit;
}

if ( !(-e "$ENV{'CMSSW_RELEASE_BASE'}/etc/dependencies/usedby.out.gz") ) {
    print "This release appears not to support the functionality of this script (170pre4 and higher). Sorry\n";
    exit;
}

#check that addpkg is ok...
my $isaddpkg=`which addpkg`;
if ( $isaddpkg =~ /Command not found/) {
    print "This script relies on addpkg, which appears not to be in your path\n";
    print "Perhaps something is wrong with this release or your run time\n";
    print "environment is not set correctly?\n";
    exit 1;
}

my %vals=();
if ($checkheader){
    &readDependencyInfo("$ENV{'CMSSW_RELEASE_BASE'}/etc/dependencies/usedby.out.gz",\%vals);
}

if ($checkpython) {
    if (-e "$ENV{'CMSSW_RELEASE_BASE'}/etc/dependencies/pyusedby.out.gz") {
        &readDependencyInfo("$ENV{'CMSSW_RELEASE_BASE'}/etc/dependencies/pyusedby.out.gz",\%vals);
    }
}

chdir("$ENV{'LOCALRT'}/src");
my @f1 = `ls`;
my $maindir=cwd;

my @packages;

# Get the list of packages
for my $f (@f1) {
  chomp($f);
  chdir("$maindir");
  if( -d $f && ($f ne "CVS") ) { 
    chdir("$f");
    # list of packages in subystem
    my @f2 = `ls`;
    for my $ff (@f2) {
      chomp($ff);
      if(-d $ff && ($ff ne "CVS") ) {
        my $pack = "$f/$ff";
        push @packages, "$pack";
      }
    }
  }
}

my @changedFiles;

foreach my $package (@packages) {
    next if ($package =~/^UserCode.*/);
    chdir("$maindir");
    chdir("$package");
    my $reltag=`addpkg -q $package`;
    my @sp1=split(' ',$reltag);
    $reltag=$sp1[1];
    my $diffs=`cvs -q -n update -r $reltag`;
    my @diffs=split('\n',$diffs);
    foreach my $diff (@diffs) {
	if ( ($diff =~/^M/) || ($diff =~/^U/) || ($diff =~/^R/) ) {
	    my @sp2=split(' ', $diff);
	    push(@changedFiles,"$package/$sp2[1]");
	}
    }
}

my %recompileList;
foreach my $file (@changedFiles) {
    next if (!(exists $vals{$file}));
    foreach my $dep (@{$vals{$file}}) {
	my @sp=split('/',$dep);
	my $recompile="$sp[0]/$sp[1]";
	if (!(grep {$_ eq $recompile} @packages)) {
	    my $scope="header";
	    if ($file=~/\.py$/o){$scope="python";}
	    $recompileList{$recompile}{$scope}=1;
	}
    }
}

my @t=sort(keys %recompileList);
my $len=scalar(@t);
if ( $runAddpkg == 0 ) {
    print "Packages to check out and compile: $len\n";
}
else{
    print "Checking out these packages\n";
}

my $exitcode=0;
if ( $len > 0 ) {
    foreach my $i (@t) {
	print "$i (",join(", ",sort keys %{$recompileList{$i}}),")\n";
    }
    if ( $runAddpkg == 1 ) {
	foreach my $i (@t) {
	    system("addpkg $i");
	    $exitcode+=$?;
	}
    }
}
if ($exitcode>0){$exitcode=1;}
exit($exitcode);

sub readDependencyInfo()
{
  my $file=shift;
  my $cache=shift;
  my $ref;
  open($ref,"gunzip -c $file |") || die "Can not open file for reading: $file\n";
  while  (my $line=<$ref>) { 
    chomp($line);
    my ($file1,$rest)=split(' ',$line,2);
    if ($file1 ne "")
    {
      if (!exists $vals{$file1}){$vals{$file1}=[];}
      push @{$vals{$file1}},split(' ',$rest);
    }
  }
  close($ref);
}
