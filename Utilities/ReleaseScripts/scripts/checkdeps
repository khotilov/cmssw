#!/usr/bin/env perl
#
# $Id: checkdeps,v 1.10 2010/04/09 08:53:01 muzaffar Exp $
#
# Created by: David Lange
#             LLNL
#             12 September 207
#
use strict;
use warnings;
use Getopt::Long;
use Cwd;

#Idea: diff checked out packages.
#     looking for changed headers
#     find all packages that depend on those headers
#     print that list.

#if any argument, print help and exit 

my $cvsOpt="";
my $checkout=0;
my $checkpython=0;
my $checkheader=0;
 
foreach my $arg (@ARGV) {
    if ( $arg eq "-a" ) {
	$checkout=1;
    }
    elsif ( $arg eq "-p" ) {
	$checkpython=1;
    }
    elsif ( $arg eq "-q" ) {
	$cvsOpt="$cvsOpt -Q";
    }
    elsif ( $arg eq "-h" ) {
	$checkheader=1;
    }
    else{
	print "checkdeps:\n";
	print "   Utility to check your local development area against the CMSSW release.\n";
	print "   Any modified header files or python modules are found and the package\n";
	print "   dependencies of these files will be returned. addpkg-ing these packages\n";
	print "   and rebuilding them should provide a full and consistent build.\n";
	print "\nUsage: \n";
	print "   -p look for python modules and their dependencies (ON by default)\n";
	print "   -h look for header files and their dependencies   (ON by default)\n";
	print "   -a will add/checkout the packages into your development area\n";
	print "   -q will pass -Q option to cvs to make it quiet\n\n";
	exit;
    }
}

if ((!$checkpython) && (!$checkheader)) {
    $checkpython=1;
    $checkheader=1;
}

# make sure cvs is setup
die "ERROR: CVS not set. Do |project CMSSW| first\n" unless(defined $ENV{"CVSROOT"});

my $localtop=&getLocalTop();
die "ERROR: Could not find developers area base path. Please run this script from a developer area.\n" if ($localtop eq "");

my $releasetop=&getReleaseTop($localtop);
die "ERROR: Could not find release base path. Please run this script from a developer area.\n" if ($releasetop eq "");

my $taglist = "${releasetop}/src/PackageList.cmssw";
die "ERROR: Cannot find release package/tag list at $taglist\n" if (!-e $taglist);

my %vals=();
if ($checkheader){
    my $depfile = "${releasetop}/etc/dependencies/usedby.out.gz";
    die "ERROR: This release appears not to support the functionality of this script (170pre4 and higher). Sorry\n" if (!-e "$depfile");
    &readDependencyInfo("$depfile",\%vals);
}

if ($checkpython) {
    my $depfile = "${releasetop}/etc/dependencies/pyusedby.out.gz";
    &readDependencyInfo("$depfile",\%vals) if (-e "$depfile");
}

chdir("${localtop}/src");
my @f1 = `ls`;
my $maindir=cwd;

my @packages;

# Get the list of packages
for my $f (@f1) {
  chomp($f);
  chdir("$maindir");
  if( -d $f && ($f ne "CVS") ) { 
    chdir("$f");
    # list of packages in subystem
    my @f2 = `ls`;
    for my $ff (@f2) {
      chomp($ff);
      if(-d $ff && ($ff ne "CVS") ) {
        my $pack = "$f/$ff";
        push @packages, "$pack";
      }
    }
  }
}

my $tags=&readTags($taglist);
my @changedFiles;

foreach my $package (@packages) {
    next if ($package =~/^UserCode.*/);
    next if (!exists $tags->{$package});
    chdir("$maindir");
    chdir("$package");
    my $reltag=$tags->{$package};
    my $diffs=`cvs -q -n update -r $reltag`;
    my @diffs=split('\n',$diffs);
    foreach my $diff (@diffs) {
	if ( ($diff =~/^M/) || ($diff =~/^U/) || ($diff =~/^R/) ) {
	    my @sp2=split(' ', $diff);
	    push(@changedFiles,"$package/$sp2[1]");
	}
    }
}
chdir("${localtop}/src");

my %recompileList;
foreach my $file (@changedFiles) {
    next if (!(exists $vals{$file}));
    foreach my $dep (@{$vals{$file}}) {
	my @sp=split('/',$dep);
	my $recompile="$sp[0]/$sp[1]";
	if (!(grep {$_ eq $recompile} @packages)) {
	    my $scope="header";
	    if ($file=~/\.py$/o){$scope="python";}
	    $recompileList{$recompile}{$scope}=1;
	}
    }
}

my @t=sort(keys %recompileList);
my $len=scalar(@t);
if ( $checkout == 0 ) {
    print "Packages to check out and compile: $len\n";
}
else{
    print "Checking out these packages\n";
}

my $exitcode=0;
if ( $len > 0 ) {
    foreach my $pk (@t) {
	print "$pk (",join(", ",sort keys %{$recompileList{$pk}}),")\n";
    }
    if ( $checkout == 1 ) {
	chdir("$maindir");
	foreach my $pk (@t) {
	    my $tag = $tags->{$pk};
	    print ">> Checking out $tag $pk\n";
	    system("cvs $cvsOpt co -r $tag $pk");
	    $exitcode+=$?;
	}
    }
}
if ($exitcode>0){$exitcode=1;}
exit($exitcode);

sub readDependencyInfo()
{
  my $file=shift;
  my $cache=shift;
  my $ref;
  open($ref,"gunzip -c $file |") || die "Can not open file for reading: $file\n";
  while  (my $line=<$ref>) { 
    chomp($line);
    my ($file1,$rest)=split(' ',$line,2);
    if ($file1 ne "")
    {
      if (!exists $vals{$file1}){$vals{$file1}=[];}
      push @{$vals{$file1}},split(' ',$rest);
    }
  }
  close($ref);
}

sub readTags(){
    my ($taglist)=@_;
    my $cache={};
    my $ref;
    if (open($ref,$taglist)) {
        while(my $l=<$ref>) {
            chomp $l;
	    if ($l=~/^\s*(#.*|)$/){next;}
	    my ($pk,$tag)=split '\s+', $l;
	    $cache->{$pk}=$tag;
        }
	close($ref);
    }
    else {
      die "ERROR: Can not open file for reading: $taglist\n";
    }
    return $cache;
}

sub getLocalTop(){
    use File::Basename;
    my $dir=getcwd;
    my $subdir=".SCRAM";
    while((!-d "${dir}/${subdir}") && ($dir!~/^[\.\/]$/)){$dir=dirname($dir);}
    if(-d "${dir}/${subdir}"){return $dir;}
    return ""; 
}

sub getReleaseTop(){
    my ($dev)=@_;
    &setArch();
    my $reltop="";
    if (-f "${dev}/.SCRAM/$ENV{SCRAM_ARCH}/Environment"){
        $reltop=`cat ${dev}/.SCRAM/$ENV{SCRAM_ARCH}/Environment | grep '^RELEASETOP=' | sed 's|RELEASETOP=||'`; chomp $reltop;
    }
    return $reltop;
}

sub setArch(){
    if (!defined $ENV{SCRAM_ARCH}){
        my $arch=`scram arch`; chomp $arch;
        $ENV{SCRAM_ARCH}=$arch;
    }
}
