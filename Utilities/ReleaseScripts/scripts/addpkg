#!/usr/bin/env perl
#
# Created by: Shahram Rahatlou
#             University of Rome & INFN
#             11 September 2006
#  $Id: addpkg,v 1.16 2009/09/08 08:59:26 andreasp Exp $
#
use strict;
use warnings;
use Getopt::Long;
use Cwd;

my $file;
my $doHelp;
my $pkgquery;
my $quiet;
my $reversePrint;
my $tc; # tag collector format: <package> <tag>

GetOptions("file|f=s" => \$file,
           "query|q" => \$pkgquery,
           "quiet|z" => \$quiet,
	   "reverse|r" => \$reversePrint,
           "help|h" => \$doHelp);

#-- main start here

my $cvsOpt="";
$cvsOpt="-Q" if ( defined $quiet);

if( defined $doHelp )   {  usage(); exit 0;}

# make sure cvs is setup
unless(defined $ENV{"CVSROOT"} ) {
  die "CVS not set. Do |project CMSSW| first\n";
}

die "CMSSW_RELEASE_BASE not defined! run scramv1 first!\n" unless defined $ENV{CMSSW_RELEASE_BASE};
die "CMSSW_BASE not defined! run scramv1 first!\n" unless defined $ENV{CMSSW_BASE};

my $currdir=getcwd;
chdir("$ENV{'CMSSW_BASE'}/src");

# this is our release
die "CMSSW_VERSION not` defined! run cmsenv from a scram user area first!\n" unless defined $ENV{CMSSW_VERSION};
my $relver = $ENV{CMSSW_VERSION};

my $taglist = "$ENV{CMSSW_RELEASE_BASE}/src/PackageList.cmssw";
die "Cannot find release package/tag list at $taglist\n" if (!-e $taglist);


my $exitcode=0;
if(!(defined $file)) {

# addpkg <package> : use default tag for the release - 1 argument
# addpkg <package> <tag>: use tag provided by user. simple cvs co - 2 arguments
    if ( $#ARGV > 0){
	$exitcode+=addTag($ARGV[0],$ARGV[1]);
    }
    else{
	$exitcode+=addTag($ARGV[0]);
    }
}
else{
# addpkg -f file: checkout tags provided in the file

#go back to current dir
chdir($currdir);

# make sure file exists
unless(-f $file) {
  die "file <$file> does not exist\n";
}

# read in packages and tags from file
my %tags;
open INFILE, "<$file";

chdir("$ENV{'CMSSW_BASE'}/src");
while(my $line = <INFILE>) {
    chomp $line;
    $line =~ s/#.*//;
    my ($tag, $package);
    $tag="";
    my @tpS=split(' ',$line);
    my $len=@tpS;
    next if ($len<1);
    $package=$tpS[0];
    $tag=$tpS[1] if ($len>1);

    if( !(isPackage($package)==1) && !(isSubsystem($package))) { # exchange tag w/ package
       my $tt = $tag;
       $tag = $package;
       $package = $tt;
   }
    if ($tag eq "") {
	$exitcode+=addTag($package);
    }
    else{
	$exitcode+=addTag($package,$tag);
    }
}
chdir($currdir);
}
if ($exitcode>0){$exitcode=1;}
exit($exitcode);
# -- main ends here

#-----------
sub usage {
#-----------
print STDOUT <<ENDHELP;
addpkg [option]

  usage:      --help|-h          Print this message
              --query|-q         Determine the tag used in the release and 
                                 print it. Do not run the actual cvs command. 
              --file|-f <file>   Checkout tags in <file>. Each line must 
                                 contain one tag and one package
              --quiet|-z         Pass -Q option to cvs
              --reverse|-r       Print <tag> <package> instead of <package> <tag> (eg, with -q)

  Typical use of addpkg:
      addpkg <package>       : Checkout tag of <package> used in the release
                               (<package> can either be a package or subsystem)
      addpkg <package> <tag> : Checkout the specified tag <tag>. Same as 
                               cvs co -r <tag> <package>
                               (<package> can either be a package or subsystem)
                               (for subsystems, only packages in the release are include)
      addpkg -f <file>       : Checkout packages provided in <file>. Supports 
                               both formats:
                                 <package> <tag>
                                   or
                                 <tag> <package>
                               (specification of subsystems with -f is not supported) 
ENDHELP
exit 0;
}

sub isPackage {
    my $name=$_[0];
    my $tname=$name;
    my @sp1=split('/',$name);
    my $len=@sp1;
    if ($len>2) {
	$tname="$sp1[$len-2]/$sp1[$len-1]";
	print "$tname\n";
    }
    if ($tname =~ m#^([a-zA-Z0-9]*)/([a-zA-Z0-9]*)$#) {
	return 1;
    }
    else{
	return 0;
    }
}

sub getPackageName {
    my $name=$_[0];
    my $tname=$name;
    my @sp1=split('/',$name);
    my $len=@sp1;
    if ($len>2) {
	$tname="$sp1[$len-2]/$sp1[$len-1]";
    }
    return $tname;
}

sub isSubsystem {
    my $name=$_[0];
#allow one number at most... 
    if ($name =~ m#^([a-zA-Z]*)([a-zA-Z0-9])([a-zA-Z]*)$#) {
	return 1;
    }
    else{
	return 0;
    }

    return 1;
}

sub addTag {
    my @args=@_;

    my $package = $args[0];
    my $isSubsystem=0;

    die "Bad package. You must use Subsystem(/Package) format\n" if( !(isPackage($package)) && !(isSubsystem($package)));

    $isSubsystem= isSubsystem($package);
    my $tagrel = ""; 
    my $tagco = ""; 
    my $tagaction = "";
# Get the release tag if the user has not provided a tag or if the user
# is querying the release tag

# user packages must specify a tag so they are simple..
    my $realPackage=getPackageName($package);
    if ($realPackage ne $package) {
	if ( $#args < 1 ) {
	    die "For packages not in the release, you must specify a tag (package = $package)";
	}
	$tagco = $args[1];   # user provided tag
	$reversePrint ? print "Checking out $tagco $package (into $realPackage)\n" : print "Checking out $package $tagco (into $realPackage)\n";
	system("cvs $cvsOpt co -r $tagco -d $realPackage $package"); 
	return $?;
    }

# user supplies a tag and we have a package not a subsystem
    if ($#args == 1 && $isSubsystem==0) {
	$tagco = $args[1];   # user provided tag
	$tagaction = "specified";
	$reversePrint ? print "Checking out $tagco $package\n" : print "Checking out $package $tagco\n";
	system("cvs $cvsOpt co -r $tagco $package"); 
	return $?;
    }

#otherwise we have a complicated case - read the list of packages
#and look for a matching package or subsystem in the release and check out the 
#right tag
    $tagaction = "release";
    open IN, "$taglist";
    my $l2="";
    my $thepack=""; my $thetag="";
    my $code=0;
    while(my $l = <IN>) {
	chomp $l;
	($thepack,$thetag) = split '\s+', $l;
	(my $thesubsys,my $thesubpack)= split('/',$thepack);
	if ($thepack eq $package || ( $isSubsystem==1 && $thesubsys eq $package ) ) { 
	    $tagrel = $thetag; 
	    if ($#args == 1) {
		$tagco = $args[1];   # user provided tag
		$reversePrint  ? print "Checking out $tagco $thepack\n" : print "Checking out $thepack $tagco\n";
		system("cvs $cvsOpt co -r $tagco $thepack"); 
		$code += $?;
	    }
	    else{
		if(defined $pkgquery) {
		    $reversePrint ? print "$tagrel $thepack\n" : print "$thepack $tagrel\n";
		}	
		else{
		    $reversePrint ? print "Checking out $tagrel $thepack\n" : print "Checking out $thepack $tagrel\n";
		    system("cvs $cvsOpt co -r $tagrel $thepack"); 
		    $code += $?;
		}
	    }
	}
    }
    close IN;
    die "No package <$package> found in the release.\n" if( $tagrel eq "" );
    return $code;
}
