#!/usr/bin/perl -w
#
# Created by: Shahram Rahatlou
#             University of Rome & INFN
#             11 September 2006
#  $Id: addpkg,v 1.9 2008/11/08 20:54:25 dlange Exp $
#
use strict;
use Getopt::Long;
use Cwd;

my $file;
my $doHelp;
my $pkgquery;
my $quiet;
my $reversePrint;
my $tc; # tag collector format: <package> <tag>

GetOptions("file|f=s" => \$file,
           "query|q" => \$pkgquery,
           "quiet|z" => \$quiet,
	   "reverse|r" => \$reversePrint,
           "help|h" => \$doHelp);

#-- main start here

my $cvsOpt="";
$cvsOpt="-Q" if ( defined $quiet);

if( defined $doHelp )   {  usage(); exit 0;}

# make sure cvs is setup
unless(defined $ENV{"CVSROOT"} ) {
  die "CVS not set. Do |project CMSSW| first\n";
}

die "CMSSW_RELEASE_BASE not defined! run scramv1 first!\n" unless defined $ENV{CMSSW_RELEASE_BASE};
die "CMSSW_BASE not defined! run scramv1 first!\n" unless defined $ENV{CMSSW_BASE};

if(!(defined $file)) {
    my $currdir=getcwd;
    chdir("$ENV{'CMSSW_BASE'}/src");

# this is our release
    die "CMSSW_VERSION not` defined! run scramv1 first!\n" unless defined $ENV{CMSSW_VERSION};
    my $relver = $ENV{CMSSW_VERSION};

    my $taglist = "$ENV{CMSSW_RELEASE_BASE}/src/PackageList.cmssw";
    die "Cannot find release package/tag list at $taglist\n" if (!-e $taglist);

# addpkg <package> : use default tag for the release - 1 argument
# addpkg <package> <tag>: use tag provided by user. simple cvs co - 2 arguments
    if(($#ARGV == 0)||($#ARGV == 1)) {
	my $package = $ARGV[0];
	my $isSubsystem=0;
	die "Bad package. You must use Subsystem(/Package) format\n" unless ( ($package =~ m#(.*)/(.*)#) || ($package =~ m#(.*)#));
									   
        $isSubsystem=1 unless ( $package =~ m#(.*)/(.*)#);
        my $tagrel = ""; 
        my $tagco = ""; 
        my $tagaction = "";
# Get the release tag if the user has not provided a tag or if the user
# is querying the release tag

        if ($#ARGV == 1 && $isSubsystem==0) {
	    $tagco = $ARGV[1];   # user provided tag
	    $tagaction = "specified";
	    $reversePrint ? print "Checking out $tagco $package\n" : print "Checking out $package $tagco\n";
	    system("cvs $cvsOpt co -r $tagco $package"); 
	} else {
	    $tagaction = "release";
	    open IN, "$taglist";
	    my $l2="";
	    my $thepack=""; my $thetag="";
	    while(my $l = <IN>) {
		chomp $l;
		($thepack,$thetag) = split '\s+', $l;
		(my $thesubsys,my $thesubpack)= split('/',$thepack);
		if ($thepack eq $package || ( $isSubsystem==1 && $thesubsys eq $package ) ) { 
		    $tagrel = $thetag; 
		    if ($#ARGV == 1) {
			$tagco = $ARGV[1];   # user provided tag
			print "Checking out $thepack $tagco\n";
			$reversePrint  ? print "Checking out $tagco $thepack\n" : print "Checking out $thepack $tagco\n";
		    }
		    else{
			if(defined $pkgquery) {
			    $reversePrint ? print "$tagrel $thepack\n" : print "$thepack $tagrel\n";
			}	
			else{
			    $reversePrint ? print "Checking out $tagrel $thepack\n" : print "Checking out $thepack $tagrel\n";
			    system("cvs $cvsOpt co -r $tagrel $thepack"); 
			}
		    }
		}
	    }
	    close IN;
	    die "No package <$package> found in the release.\n" if( $tagrel eq "" );
	}
	chdir($currdir);
	exit 0;
    }
}
else{
# addpkg -f file: checkout tags provided in the file

# make sure file exists
unless(-f $file) {
  die "file <$file> does not exist\n";
}

# read in packages and tags from file
my %tags;
open IN, "<$file";

my $currdir=getcwd;
chdir("$ENV{'CMSSW_BASE'}/src");

while(my $line = <IN>) {
  chomp $line;

  my ($tag, $package);
  my @tpS=split(' ',$line);
  next if (length(@tpS)<2);
  $package=$tpS[0];
  $tag=$tpS[1];

  ($package,$tag) = split(' ',$line);
  if($tag =~ m#(.*)/(.*)#) { # exchange tag w/ package
    my $tt = $tag;
    $tag = $package;
    $package = $tt;
  }
  $tags{$package} = $tag;

  # run the cvs command
  my $cmd = "cvs $cvsOpt co -r $tag $package";
  if(defined $pkgquery) {
    print STDOUT "$cmd\n";
  } else {
    system("$cmd");
  }

}
chdir($currdir);
exit 0;
}
# -- main ends here

#-----------
sub usage {
#-----------
print STDOUT <<ENDHELP;
addpkg [option]

  usage:      --help|-h          Print this message
              --query|-q         Determine the tag used in the release and 
                                 print it. Do not run the actual cvs command. 
              --file|-f <file>   Checkout tags in <file>. Each line must 
                                 contain one tag and one package
              --quiet|-z         Pass -Q option to cvs
              --reverse|-r       Print <tag> <package> instead of <package> <tag> (eg, with -q)

  Typical use of addpkg:
      addpkg <package>       : Checkout tag of <package> used in the release
                               (<package> can either be a package or subsystem)
      addpkg <package> <tag> : Checkout the specified tag <tag>. Same as 
                               cvs co -r <tag> <package>
                               (<package> can either be a package or subsystem)
                               (for subsystems, only packages in the release are include)
      addpkg -f <file>       : Checkout packages provided in <file>. Supports 
                               both formats:
                                 <package> <tag>
                                   or
                                 <tag> <package>
                               (specification of subsystems with -f is not supported) 
ENDHELP
exit 0;
}
