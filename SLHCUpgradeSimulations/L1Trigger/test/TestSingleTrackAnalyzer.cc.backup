//////////////////////////
//  Analyzer by Nicola  //
//    july 2010 @ PD    //
//////////////////////////

/////////////////////////
//       HEADERS       //
/////////////////////////

////////////////
// CLASS HEADER
// No more necessary in the current "no *.h file" implementation

////////////////////
// FRAMEWORK HEADERS
#include "FWCore/PluginManager/interface/ModuleDef.h"
#include "FWCore/Framework/interface/MakerMacros.h"
//
#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/ESHandle.h"
#include "FWCore/Framework/interface/EventSetup.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"
//
#include "FWCore/ParameterSet/interface/InputTag.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/ServiceRegistry/interface/Service.h"

///////////////////////
// DATA FORMATS HEADERS
#include "DataFormats/TrackerRecHit2D/interface/SiTrackerGSRecHit2DCollection.h"
#include "DataFormats/TrackerRecHit2D/interface/SiPixelRecHitCollection.h"
#include "DataFormats/TrackerRecHit2D/interface/SiStripRecHit2DCollection.h" 
#include "DataFormats/TrackerRecHit2D/interface/SiStripMatchedRecHit2DCollection.h" 
#include "DataFormats/TrackerRecHit2D/interface/SiTrackerGSMatchedRecHit2DCollection.h"
//
#include "DataFormats/Common/interface/Handle.h"
#include "DataFormats/Common/interface/EDProduct.h"
#include "DataFormats/Common/interface/Ref.h"
#include "DataFormats/Common/interface/OwnVector.h"
#include "DataFormats/TrajectorySeed/interface/TrajectorySeedCollection.h"
#include "DataFormats/TrackCandidate/interface/TrackCandidateCollection.h"
#include "DataFormats/TrackReco/interface/Track.h"
//
#include "DataFormats/DetId/interface/DetId.h"
#include "DataFormats/SiPixelDetId/interface/PXBDetId.h" 
#include "DataFormats/SiPixelDetId/interface/PXFDetId.h" 
#include "DataFormats/SiPixelDetId/interface/PixelSubdetector.h"
#include "DataFormats/Common/interface/DetSetVector.h"
#include "DataFormats/SiPixelCluster/interface/SiPixelCluster.h"
#include "DataFormats/Common/interface/Ref.h"
//
#include "DataFormats/SiStripDetId/interface/TIBDetId.h"
#include "DataFormats/SiStripDetId/interface/TIDDetId.h"
#include "DataFormats/SiStripDetId/interface/TOBDetId.h"
#include "DataFormats/SiStripDetId/interface/TECDetId.h"
#include "DataFormats/SiStripDetId/interface/StripSubdetector.h"
//
#include "SimDataFormats/SLHC/interface/StackedTrackerTypes.h"
#include "SimDataFormats/SLHC/interface/LocalStub.h"
//
#include "SimDataFormats/TrackingHit/interface/PSimHitContainer.h"
#include "SimDataFormats/TrackingHit/interface/PSimHit.h"
#include "SimTracker/TrackerHitAssociation/interface/TrackerHitAssociator.h"
#include "SimDataFormats/Track/interface/SimTrack.h"
#include "SimDataFormats/Track/interface/SimTrackContainer.h"
#include "SimDataFormats/Vertex/interface/SimVertex.h"
#include "SimDataFormats/Vertex/interface/SimVertexContainer.h"
//
#include "DataFormats/Math/interface/LorentzVector.h"
#include "DataFormats/Math/interface/Vector3D.h"
//
#include "SimDataFormats/SLHC/interface/L1CaloCluster.h"
//
#include "DataFormats/L1Trigger/interface/L1EmParticle.h"
#include "DataFormats/L1Trigger/interface/L1EmParticleFwd.h"
#include "DataFormats/L1Trigger/interface/L1JetParticle.h"
#include "DataFormats/L1Trigger/interface/L1JetParticleFwd.h"
//
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "DataFormats/Candidate/interface/Candidate.h"
//
#include "DataFormats/GeometryCommonDetAlgo/interface/MeasurementPoint.h"
#include "TrackingTools/GeomPropagators/interface/HelixArbitraryPlaneCrossing.h"
////////////////////////
// FAST SIMULATION STUFF
#include "FastSimulation/Particle/interface/RawParticle.h"
#include "FastSimulation/BaseParticlePropagator/interface/BaseParticlePropagator.h"
#include "SimGeneral/HepPDTRecord/interface/PDTRecord.h"
#include "SimGeneral/HepPDTRecord/interface/ParticleDataTable.h"
#include "SimGeneral/HepPDTRecord/interface/PdtEntry.h"
#include "DataFormats/TrajectorySeed/interface/PropagationDirection.h"

////////////////////////////
// DETECTOR GEOMETRY HEADERS
#include "MagneticField/Engine/interface/MagneticField.h"
#include "MagneticField/Records/interface/IdealMagneticFieldRecord.h"
#include "Geometry/TrackerGeometryBuilder/interface/TrackerGeometry.h"
#include "Geometry/TrackerGeometryBuilder/interface/PixelGeomDetUnit.h"
#include "Geometry/TrackerGeometryBuilder/interface/PixelGeomDetType.h"
#include "Geometry/TrackerGeometryBuilder/interface/PixelTopologyBuilder.h"
#include "Geometry/Records/interface/TrackerDigiGeometryRecord.h"
#include "Geometry/TrackerTopology/interface/RectangularPixelTopology.h"
#include "Geometry/CommonDetUnit/interface/GeomDetType.h"
#include "Geometry/CommonDetUnit/interface/GeomDetUnit.h"
//
#include "SLHCUpgradeSimulations/Utilities/interface/StackedTrackerGeometryRecord.h"
#include "SLHCUpgradeSimulations/Utilities/interface/StackedTrackerGeometry.h"
#include "SLHCUpgradeSimulations/Utilities/interface/StackedTrackerDetUnit.h"
#include "SLHCUpgradeSimulations/Utilities/interface/StackedTrackerDetId.h"

////////////////
// PHYSICS TOOLS
#include "PhysicsTools/UtilAlgos/interface/TFileService.h"
#include "RecoTracker/TkSeedGenerator/interface/FastHelix.h"
#include "TrackingTools/TrajectoryState/interface/FreeTrajectoryState.h"
#include "RecoTauTag/TauTagTools/interface/GeneratorTau.h"
//
#include "DataFormats/GeometryCommonDetAlgo/interface/MeasurementVector.h"
#include "DataFormats/GeometrySurface/interface/BoundPlane.h"
#include "SLHCUpgradeSimulations/Utilities/interface/constants.h"

///////////////
// ROOT HEADERS
#include <TROOT.h>
#include <TTree.h>
#include <TFile.h>
#include <TF1.h>
#include <TH2F.h>
#include <TH1F.h>
#include <TH2D.h>
#include <TH1D.h>
#include <TH2.h>
#include <TH1.h>

//////////////
// STD HEADERS
#include <memory>
#include <string>
#include <iostream>

//////////////
// NAMESPACES
// I hate them, but there is something
// magic behind and beyond ...
using namespace std;
using namespace edm;
using namespace reco;
using namespace cmsUpgrades;
using namespace l1slhc;
using namespace l1extra;

//////////////////////////////
//                          //
//     CLASS DEFINITION     //
//                          //
//////////////////////////////

class TTree;
class TFile;
class TH1D;
class TH2D;
class TGraph;
class RectangularPixelTopology;
class TransientInitialStateEstimator;
class MagneticField;
class TrackerGeometry;
class TrajectoryStateOnSurface;
class PTrajectoryStateOnDet;
//
............................
  /// Select the Superlayer you want to check
  if ( config.getParameter<int>("superLayer") >= 0  ) superlayer = config.getParameter<int>("superLayer");

  /// Select the kind of Tracklets you want to handle
  if ( config.getParameter<string>("trackletVTX") == "offcenter" ) beamspot00 = false;
............................
  /// Geometry setup
  /// Set pointers to Geometry
  es.get<TrackerDigiGeometryRecord>().get(geometryESH);
  theGeometry = &(*geometryESH);
  /// Set pointers to Stacked Modules
  es.get<StackedTrackerGeometryRecord>().get(stackedgeometryESH);
  theStackedGeometry = stackedgeometryESH.product(); /// Note this is different 
                                                     /// from the "global" geometry
  

............................
  ////////////////////////
  // GET MAGNETIC FIELD //
  ////////////////////////
  edm::ESHandle<MagneticField> magnet;
  const MagneticField *magnetF;
  
  es.get<IdealMagneticFieldRecord>().get(magnet);
  magnetF = magnet.product();
  double mMagneticFieldStrength = magnetF->inTesla(GlobalPoint(0,0,0)).z();

  /////////////////////////////////////////
  // First of all, we need to look       //
  // at each vertex: this is to check    //
  // that we have that each single track //
  // event does not provide us with      //
  // (0,0,0) tracks but has really       //
  // a wide luminous region...           //
  // Moreover, here we put some counting //
  // of multiplicity and leading track   //
  /////////////////////////////////////////
  /// Get SimTracks and their Vertices
  /// NOTE: this is good also for later on,
  /// when checking efficiencies etc ...
  edm::Handle<edm::SimTrackContainer> theSimTracks;
  edm::Handle<edm::SimVertexContainer> theSimVtx;
  edm::InputTag simtrackHitsTag = config.getParameter<edm::InputTag>("simtrackHits");
  e.getByLabel( simtrackHitsTag, theSimTracks ); //e.getByLabel( "famosSimHits", theSimTracks );
  e.getByLabel( simtrackHitsTag, theSimVtx );    //e.getByLabel( "famosSimHits", theSimVtx );
  /// SimTrack Multiplicity
  ///*** Fill histogram

  /// Go on only if there are SimTracks
  if ( theSimTracks->size() != 0 ) {
    /// Loop over SimTracks
    SimTrackContainer::const_iterator iterSimTracks;
    for ( iterSimTracks = theSimTracks->begin();  iterSimTracks != theSimTracks->end();  ++iterSimTracks ) {
      /// Get the corresponding vertex
      int vertexIndex = iterSimTracks->vertIndex();
      const SimVertex& theSimVertex = (*theSimVtx)[vertexIndex];

............................

  ///////////////////////
  // Test the Geometry //
  // of The Tracker    //
  ///////////////////////
  /// Do this only once, please
  std::vector<StackedTrackerDetUnit*> stackContainer = theStackedGeometry->stacks();
  if (testedGeometry==false) {
    /// Loop over Detector Pieces
    for ( unsigned int k=0; k<stackContainer.size(); k++ ) {
      StackedTrackerDetUnit* detUnitIt = stackContainer[k];
      StackedTrackerDetId stackedMemberId = detUnitIt->Id();
      int layer = stackedMemberId.layer();
      int iphi = stackedMemberId.iPhi();
      int iz = stackedMemberId.iZ();
      int doublestack;
      if (layer%2==0) doublestack = layer/2;
      else doublestack = (layer-1)/2;
      /// Choose Double Stack
      if (doublestack==superlayer) {
        const GeomDetUnit* detUnit = theStackedGeometry->idToDetUnit(  stackedMemberId, layer%2 );
        GlobalPoint zerozeroGP = detUnit->toGlobal( detUnit->topology().localPosition( MeasurementPoint( 0, 0) ) );
............................

  /// Get the Digis  
  edm::Handle<edm::DetSetVector<PixelDigi> > theDigis;
  e.getByLabel("simSiPixelDigis", theDigis);
  /// Get the PixelDigis SimLink
  /// This is useful to find references to SimTracks
  edm::Handle<edm::DetSetVector<PixelDigiSimLink> >  thePixelDigiSimLink;
  e.getByLabel("simSiPixelDigis", thePixelDigiSimLink);
  /// This is useful to store the SimTracks which released a Digi
  std::vector< std::pair<int, int> > alreadySThit; alreadySThit.clear();
  /// Loop over Detector Modules
  DetSetVector<PixelDigi>::const_iterator iterDet;
  for (iterDet=theDigis->begin(); iterDet!=theDigis->end(); iterDet++){
    DetId tkId(iterDet->id);
    /// Check if it is Pixel
    if(tkId.subdetId()==1) {
      PXBDetId pxbId(tkId);
      DetSet<PixelDigiSimLink> digiSimLink = (*thePixelDigiSimLink)[pxbId.rawId()];
      DetSet<PixelDigiSimLink>::const_iterator iterSimLink;

............................
    PSimHitContainer::const_iterator SimHitsRangeIteratorBegin = theSimHitsPP->begin();
    PSimHitContainer::const_iterator SimHitsRangeIteratorEnd = theSimHitsPP->end();
    PSimHitContainer::const_iterator iterSimHits;
    // Loop over all sim hits stored in the handle
    for ( iterSimHits = SimHitsRangeIteratorBegin;  iterSimHits != SimHitsRangeIteratorEnd;  ++iterSimHits ) {
      // Check if the hit is on one of the stacked layers
      // THIS IS PROPAGATION ACCORDING TO Mark P.
      const DetId& detIdSH =  iterSimHits->detUnitId();
      unsigned int subdetIdSH = detIdSH.subdetId();
............................      


  /////////////////////////////////////////
  // Get Stubs from PixelDigis and start //
  // counting them to check the goodness //
  // of the clustering and hit matching  //
  // algorithm. We aim at duplicate and  //
  // fake Stubs. We also want to find    //
  // how much the efficiency in Stub     //
  // production is and changes ...       //
  /////////////////////////////////////////
  /// Get the Stubs
  edm::Handle<cmsUpgrades::GlobalStub_PixelDigi_Collection> globStubHandlePD;
  edm::InputTag globStubsPixelDigisTag = config.getParameter<edm::InputTag>("globStubsPixelDigis");
  e.getByLabel(globStubsPixelDigisTag, globStubHandlePD);
  /// Go on only if there are Global Stubs from Pixel Digis
  if ( globStubHandlePD->size() > 0 ) { 
    /// Loop over GlobalStubs
    GlobalStub_PixelDigi_Collection::const_iterator iterGlobStub;
    for ( iterGlobStub = globStubHandlePD->begin();  iterGlobStub != globStubHandlePD->end();  ++iterGlobStub ) {
      /// Some variables needed to check if the
      /// Stub is fake or duplicate and which must
      /// be initialized here
      bool isTIGHT = iterGlobStub->localStub()->isTight();
      /// Check layer number
      StackedTrackerDetId Id = iterGlobStub->Id();
      const DetId id0=theStackedGeometry->idToDet(Id,0)->geographicalId();
      const DetId id1=theStackedGeometry->idToDet(Id,1)->geographicalId();
      unsigned int subdetId0 = id0.subdetId();
      unsigned int subdetId1 = id1.subdetId();
      if ( subdetId0 != subdetId1 ) {
        std::cerr << "GROSSO GUAIO A CHINATOWN !!!" << std::endl;
        continue;
      }
      int layerNumber;
      if ( subdetId0 ==  PixelSubdetector::PixelBarrel ) {
        PXBDetId pxbid(id0.rawId());
        layerNumber = pxbid.layer();
      } else if ( subdetId0 ==  PixelSubdetector::PixelEndcap ) {
        PXFDetId pxfid(id0.rawId());
        layerNumber = pxfid.disk();
      } else {
        std::cerr << "BIG TROUBLE IN LITTLE CHINA !!!" << std::endl;
        continue;
      }
      /// Renormalize layer number from 5-14 to 0-9
      int normLayer = layerNumber - 5;
      int phiSector = Id.iPhi();
      int dSidx = 0;
      if (normLayer%2 == 0)
         dSidx = normLayer/2;
      else dSidx = (normLayer - 1)/2;
      /// Go on only if the correct Double Stack id chosen
      if (dSidx != superlayer) continue;
/*
      /// Get corresponding Local Stub and hits
      /// composing the cluster in each module (0-1)
      const LocalStub<cmsUpgrades::Ref_PixelDigi_> *refLocStub = iterGlobStub->localStub();
      const std::vector<cmsUpgrades::Ref_PixelDigi_> hits0= refLocStub->hit(0); /// Lower Cluster
      const std::vector<cmsUpgrades::Ref_PixelDigi_> hits1= refLocStub->hit(1); /// Upper Cluster
      DetSet<PixelDigiSimLink> digiSimLink0 = (*thePixelDigiSimLink)[id0.rawId()];
      DetSet<PixelDigiSimLink> digiSimLink1 = (*thePixelDigiSimLink)[id1.rawId()];
      std::vector<int> simTrackId0;
      std::vector<int> simTrackId1;*/
............................ 


  ////////////////////////////////////////////////
  // Get Tracklets from Pixel Digis and         //
  // start looking at relevant spectra and      //
  // correlations. Look also for Fake Tracklets //
  // which have a Fake Stub of Stubs coming     //
  // from different SimTracks. Check also       //
  // Tracklets from the Luminous Region and try //
  // to clean from those coming from outside    //
  ////////////////////////////////////////////////
  int cntTotTrklet = 0;   /// Some counters
  int cntFakeTrkletS = 0; /// Tracklets with a fake Stub
  int cntFakeTrkletT = 0; /// Tracklets with good Stubs from different SimTracks
  /// Get the tracklets
  edm::Handle<cmsUpgrades::Tracklet_PixelDigi_Collection> trackletHandlePD;
  edm::InputTag trackletsPixelDigisTag = config.getParameter<edm::InputTag>("trackletsPixelDigis");
  e.getByLabel(trackletsPixelDigisTag, trackletHandlePD);

  /// Go on only if there are Tracklets from Pixel Digis
  if ( trackletHandlePD->size() > 0 ) {
    /// Loop over Tracklets
    Tracklet_PixelDigi_Collection::const_iterator iterTracklet;
    for ( iterTracklet = trackletHandlePD->begin();  iterTracklet != trackletHandlePD->end();  ++iterTracklet ) {
      if ( iterTracklet->isBeamSpot00() != beamspot00 ) continue;
      /// Accept only Hermetic Design
      bool isHermetic = iterTracklet->isHermetic();
      if (isHermetic==false) continue;
      bool isFakeS = false;
      bool isFakeT = false;
      /// Get the Stubs of this Tracklet, and Local ones
      TrackletMap theStubs = iterTracklet->stubs();
      GlobalStubPtrType innerStub = theStubs.begin()->second;
      GlobalStubPtrType outerStub = theStubs.rbegin()->second;
      FreeTrajectoryState helVtx = iterTracklet->VertexTrajectoryState( es );
      const LocalStub<cmsUpgrades::Ref_PixelDigi_> *innerLoc = innerStub->localStub();
      const LocalStub<cmsUpgrades::Ref_PixelDigi_> *outerLoc = outerStub->localStub();
............................      
      /// SimTrack ID matched to the Digis is always the same
      /// and then only a fast check is needed: only one hit for just
      /// one layer within the Stub (0th hit, 0-module chosen)
      /// Already declared needed handles
      StackedTrackerDetId innerId = innerStub->Id();
      StackedTrackerDetId outerId = outerStub->Id();
      const DetId innerId0 = theStackedGeometry->idToDet(innerId,0)->geographicalId();
      const DetId outerId0 = theStackedGeometry->idToDet(outerId,0)->geographicalId();

      /// Renormalize layer number from 5-14 to 0-9
      int normLayerInner = innerId.layer();
      int normLayerOuter = outerId.layer();
      /// Get the Double Stack index
      int dSidx = normLayerInner/2;
      if (dSidx != (normLayerOuter-1)/2 ) std::cerr << "HOUSTON WE GOT A PROBLEM!" << std::endl;
............................
