process ANA =  {

    ### General ###
    # Logging
    include "FWCore/MessageLogger/data/MessageLogger.cfi"
    replace MessageLogger.categories += { 
        "SelectorSequence", 
        "EventSelectorAND", "EventSelectorOR",
        "HLTEventSelector", "JetEventSelector", 
        "BJetEventSelector", "MetEventSelector", 
	"AlphaSelector", "DPhiEventSelector",
        "SusyDiJetEvent"
    }
    replace MessageLogger.cerr.threshold = "WARNING"
    replace MessageLogger.cerr.default.limit = -1
    replace MessageLogger.cerr.FwkReport.reportEvery = 100

    # return filter & timing reports
    untracked PSet options = { untracked bool wantSummary = true }
    
    ### Input / output ###
    # Output file for plots
    service = TFileService { string fileName = "test-HLT2JET_ISN.root" }
    

    # Input file
    source = PoolSource {
        untracked vstring fileNames = {
	"/store/cmscaf/physics/data/PAT/CMSSW_1_6_7-CSA07-CSA07JetMET-Chowder-T1-PDJetMET_Skims1-PAT_CMSSW_1_6_12/CMSSW_1_6_7-CSA07-CSA07JetMET-Chowder-T1-PDJetMET_Skims1-PAT_CMSSW_1_6_12-001.root",
	"/store/cmscaf/physics/data/PAT/CMSSW_1_6_7-CSA07-CSA07JetMET-Chowder-T1-PDJetMET_Skims1-PAT_CMSSW_1_6_12/CMSSW_1_6_7-CSA07-CSA07JetMET-Chowder-T1-PDJetMET_Skims1-PAT_CMSSW_1_6_12-002.root"
        }	
    }
    untracked PSet maxEvents = { untracked int32 input = -1 }
#    untracked PSet maxEvents = { untracked int32 input = 10000 }

    # CaloTowerConstituentsMap needed for Electron/Photon-Jet cleaning
    include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
    es_module = CaloTowerConstituentsMapBuilder
    {
        untracked string MapFile="Geometry/CaloTopology/data/CaloTowerEEGeometric.map.gz"
    }

    # the cross cleaning module:
    include "SusyAnalysis/PatCrossCleaner/data/PatCrossCleaner.cfi"
    replace patcrosscleaner.doMuonJetCC = true
    replace patcrosscleaner.doElectronJetCC = true
    replace patcrosscleaner.doPhotonJetCC = false

    # parameters in electron-jet cleaning:
    replace patcrosscleaner.ElectronJetCrossCleaning.SusyAnalyzerCleaning = true
    replace patcrosscleaner.ElectronJetCrossCleaning.deltaR_min         = 0.5
    replace patcrosscleaner.ElectronJetCrossCleaning.SharedEtoJetE      = 0.7
    replace patcrosscleaner.ElectronJetCrossCleaning.IsoValueCut        = 1.
    replace patcrosscleaner.ElectronJetCrossCleaning.SharedEForNIsoEle  = -1.
    #parameters in photon-jet cleaning:
    replace patcrosscleaner.PhotonJetCrossCleaning.deltaR_min = 0.5
    replace patcrosscleaner.PhotonJetCrossCleaning.isoValueCut  = 1.
    # parameters in muon-jet cleaning:
    replace patcrosscleaner.MuonJetCrossCleaning.deltaR_min   = 0.2
    replace patcrosscleaner.MuonJetCrossCleaning.caloIso_max  = 10.0
    replace patcrosscleaner.MuonJetCrossCleaning.trackIso_max = 10.0
  
    ### Analysis configuration ###
    module dijet = SusyDiJetAnalysis {

        # Event weight: if set to negative value, 
        # will take it from CSA07EventWeightProducer
        InputTag weightSource = csaweightproducer # The name of the module below
        double eventWeight = -1.0 

	untracked bool soup = true
	# set corresponding weight here for signal sample - note: soup must be false
	untracked double weight = -1.0  
        
	InputTag jetTag  = patcrosscleaner:ccJets
	InputTag elecTag = patcrosscleaner:ccElectrons
	InputTag muonTag = patcrosscleaner:ccMuons
#	InputTag photTag = patcrosscleaner:ccPhotons
	InputTag photTag = selectedLayer1Photons
	InputTag metTag  = patcrosscleaner:ccMETs
	InputTag tauTag  = selectedLayer1Taus
        InputTag genTag  = genParticles

        # Selection
        PSet selections = {
            PSet selectors = { # Definition of all selectors
                # 1. Preselection
                PSet HLT = {
                    string selector = "HLTEventSelector"
                    InputTag triggerResults = TriggerResults::HLT
                    vstring pathNames = { "HLT2jet" }
		}

                PSet PreJet = {
                    string selector = "JetEventSelector"
                    InputTag jetTag = selectedLayer1Jets
                    string correction = "none"
                    # require 3 jets
                    vdouble minEt = { 30., 30. }
                    vdouble maxEta = { 999., 999. }
                    vdouble maxEMFraction = { 999., 999. }
                }		

                # Put it all together in a preselection
                PSet Preselection = {
                    string selector = "EventSelectorAND"
                    vstring components = {
                        "HLT", "PreJet"
                    }
                }

	        # Final jet selector
        	PSet FinalJet = {
	            string selector = "JetEventSelector"
	            InputTag jetTag = selectedLayer1Jets
		    string correction = "none"
        	    # require jet Ets
          	    vdouble minEt = { 50., 50.  }
        	    vdouble maxEta = { 10., 10. }
          	    vdouble maxEMFraction = { 999., 999. }
	        }

		# Final DirectLepton veto selector
		PSet FinalDirectLeptonVeto = {
		    string selector = "DirectLeptonVetoSelector"
	            InputTag electronTag = selectedLayer1Electrons
	            InputTag muonTag = selectedLayer1Muons
                    InputTag tauTag = selectedLayer1Taus
	            # electron Et cuts and rel. pt sum isolation
		    double minElectronEt = 30000.
	            double electronIsolation = 0.5
	            # muon Et cuts and rel. pt sum isolation
	            double minMuonEt = 30000.
	            double muonIsolation = 0.5
	  	    # tau Et cuts and rel. pt sum isolation
	            double minTauEt = 30000.
	            double tauIsolation = 0.5
		}

		# Final max jets selector
		PSet FinalMaxNumJetsSelector = {
		  string selector = "MaxNumJetsEventSelector"
		  InputTag jetTag = selectedLayer1Jets
		  # Maximum et for n+1 jet
		  double maxEt = 30.
		  # Number of jets up to et threshold
		  uint32 maxNumJets = 100
		}

		# Dijet alpha selector
                PSet Alpha = {
                    string selector = "AlphaSelector"
                    InputTag jetTag = selectedLayer1Jets
                    double minAlpha = 0.0
                }

		# Dijet deltaPhi selector
                PSet DPhi = {
                    string selector = "DPhiEventSelector"
                    InputTag jetTag = selectedLayer1Jets
		    double maxDPhi = 3.15
                }

		# Cuts on dPhi Hemisphere topology
		PSet Hemisphere = { 
                     string selector = "HemisphereSelector"
                     InputTag hemisphereTag = selectedLayer2Hemispheres
                     double dPhiHemispheresMin = 0
                     double dPhiHemispheresMax = 3.2 
                }


            } # End selector's list

            # Sequence of selectors 
            vstring selectionSequence = { 
                "Preselection",
                "FinalJet", "FinalDirectLeptonVeto", "FinalMaxNumJetsSelector",
                "DPhi", "Alpha", "Hemisphere"
            }

        } # End selection

        # Plotting ... this really determines the cuts..
        vstring plotSelection = {  # Only plot what passes these selections
            "Preselection"         # If empty, plots all events
        }


    } # End analyzer

    ### PAT steering ###
    include "PhysicsTools/PatAlgos/data/patLayer0.cff"
    include "PhysicsTools/PatAlgos/data/patLayer1.cff"
    
    ### Event weight producer ###
#    module csa07weightproducer = CSA07EventWeightProducer {
#        InputTag src = source
#        untracked bool talkToMe = false
#        # overall luminosity normalization  (in pb-1)
#        double overallLumi = 1000.
#        # K-factor for ttbar (= 1. for ALPGEN LO cross sections)
#        # from MCFM NLO vs LO study, the K-factor is found to be 1.85
#        double ttKfactor = 1.85     
#    }

   module selectedLayer2Hemispheres = PATHemisphereProducer {
	InputTag patJets      = patcrosscleaner:ccJets
	InputTag patMets      = patcrosscleaner:ccMETs
	InputTag patMuons     = patcrosscleaner:ccMuons
	InputTag patElectrons = patcrosscleaner:ccElectrons
#	InputTag patPhotons   = patcrosscleaner:ccPhotons
	InputTag patPhotons   = selectedLayer1Photons
	InputTag patTaus      = selectedLayer1Taus

	int32 seedMethod = 3
	int32 combinationMethod = 3
   }

    ### Processing path: run PAT on the fly
    path p = { 
#        csa07weightproducer,   # <-- COMMENT OUT IF RUNNING ON SIGNAL!
#        patLayer0,
#        patLayer1,
	patcrosscleaner,
	selectedLayer2Hemispheres,
        dijet 
    } 

}
