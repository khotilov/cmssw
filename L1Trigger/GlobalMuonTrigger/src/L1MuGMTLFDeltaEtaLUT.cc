//-------------------------------------------------
//
//   Class: L1MuGMTLFDeltaEtaLUT
//
//   this class was automatically generated by L1MuGMTLUT::MakeSubClass()  
// 
//   $Date: 2004/02/03 16:33:44 $
//   $Revision: 1.3 $
//
//   Author :
//   H. Sakulin            HEPHY Vienna
//
//   Migrated to CMSSW:
//   I. Mikulec
//
//--------------------------------------------------

//-----------------------
// This Class's Header --
//-----------------------
#include "L1Trigger/GlobalMuonTrigger/src/L1MuGMTLFDeltaEtaLUT.h"
#include "L1Trigger/GlobalMuonTrigger/src/L1MuGMTScales.h"
#include "DataFormats/L1GlobalMuonTrigger/interface/L1MuTriggerScales.h"
#include "DataFormats/L1GlobalMuonTrigger/interface/L1MuPacking.h"
#include "SimG4Core/Notification/interface/Singleton.h"

//------------------------------------
// Collaborating Class Declarations --
//------------------------------------



void L1MuGMTLFDeltaEtaLUT::InitParameters() {
  m_theGMTScales = Singleton<L1MuGMTScales>::instance();
  m_theTriggerScales = Singleton<L1MuTriggerScales>::instance();
};

unsigned L1MuGMTLFDeltaEtaLUT::TheLookupFunction (int idx, unsigned eta_dtcsc, unsigned eta_rpc) const {
    // idx is DTRPC CSCRPC

    float etaValue_dtcsc = m_theTriggerScales->getRegionalEtaScale(idx*2)->getCenter(eta_dtcsc);
    float etaValue_rpc = m_theTriggerScales->getRegionalEtaScale(idx*2+1)->getCenter(eta_rpc); 

    float delta_eta = etaValue_dtcsc - etaValue_rpc;


    unsigned delta_eta_4bit = 0;

    // check out of range
    if (delta_eta < m_theGMTScales->getDeltaEtaScale(idx)->getScaleMin() ||
        delta_eta > m_theGMTScales->getDeltaEtaScale(idx)->getScaleMax()) {
      L1MuSignedPacking<4> pack;
      delta_eta_4bit = pack.packedFromIdx (-8);
    }
    else {
      delta_eta_4bit = m_theGMTScales->getDeltaEtaScale(idx)->getPacked( delta_eta );
    }

//      cout << "delta-eta LUT : idx= " << idx
//  	 << ", etaValue_dtcsc = " << etaValue_dtcsc
//  	 << ", etaValue_rpc = " << etaValue_rpc
//  	 << ", delta_eta = " << delta_eta
//  	 << ", packed = " << delta_eta_4bit
//  	 << endl;
 
    
    return delta_eta_4bit;
}; 



















