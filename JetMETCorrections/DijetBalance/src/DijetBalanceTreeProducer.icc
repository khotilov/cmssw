#include <iostream>
#include <sstream>
#include <istream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cmath>
#include <functional>

#include "JetMETCorrections/DijetBalance/interface/DijetBalanceTreeProducer.h"
#include "JetMETCorrections/DijetBalance/interface/JetUtil.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/Run.h"
#include "DataFormats/Common/interface/Handle.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/Framework/interface/EventSetup.h"
#include "FWCore/Framework/interface/ESHandle.h"
//#include "Geometry/Records/interface/IdealGeometryRecord.h"
#include "SimDataFormats/GeneratorProducts/interface/GenRunInfoProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h"

#include "DataFormats/JetReco/interface/CaloJet.h"
#include "DataFormats/JetReco/interface/CaloJetCollection.h"
#include "DataFormats/JetReco/interface/PFJet.h"
#include "DataFormats/JetReco/interface/PFJetCollection.h"
#include "DataFormats/JetReco/interface/GenJet.h"
#include "DataFormats/JetReco/interface/GenJetCollection.h"
using namespace edm;
using namespace reco;
using namespace std;

namespace cms
{
  template<class Jet>
  DijetBalanceTreeProducer<Jet>::DijetBalanceTreeProducer(edm::ParameterSet const& cfg) 
  {
    jets_               = cfg.getParameter<std::string>("jets");
    histogramFile_      = cfg.getParameter<std::string>("histogramFile");
    dijetPtCut_         = cfg.getParameter<double>("dijetPtCut"); 
    barrelEtaCut_       = cfg.getParameter<double>("barrelEtaCut"); 
    triggerNames_       = cfg.getParameter<std::vector<std::string> >("jetTriggerNames");
    triggerProcessName_ = cfg.getParameter<std::string>("triggerProcessName"); 
    triggerResultsTag_  = cfg.getParameter<edm::InputTag>("triggerResultsTag");
    isMCarlo_           = cfg.getParameter<bool>("isMCarlo");
  }
  //////////////////////////////////////////////////////////////////////////////////////////
  template<class Jet>
  void DijetBalanceTreeProducer<Jet>::beginJob(const edm::EventSetup &iSetup) 
  {
    if (triggerNames_.size()>6)
      {
        string errorMessage = "Too many trigger bits!!!! \n";
        throw  cms::Exception("Configuration",errorMessage);
      } 
    m_file_             = new TFile(histogramFile_.c_str(),"RECREATE"); 
    dijetTree_          = new TTree("DijetTree","DijetTree");
    dijetTree_->Branch("dphi",         &dphi_,         "dphi_/F");
    dijetTree_->Branch("ptBarrel",     &ptBarrel_,     "ptBarrel_/F");
    dijetTree_->Branch("ptProbe",      &ptProbe_,      "ptProbe_/F");
    dijetTree_->Branch("ptJet3",       &ptJet3_,       "ptJet3_/F");
    dijetTree_->Branch("etaProbe",     &etaProbe_,     "etaProbe_/F");
    dijetTree_->Branch("HLTBits",      HLTBits_,       "HLTBits[6]_/I");
    if (isMCarlo_)
      {
        dijetTree_->Branch("pthat",        &pthat_,        "pthat_/F"); 
        dijetTree_->Branch("xsec",         &xsec_,         "xsec_/F");
        hPtHat_             = new TH1F("ptHat","ptHat",5000,0,5000);
      }  
    //must be done at beginRun and not only at beginJob, because 
    //trigger names are allowed to change by run.
    hltConfig_.init(triggerProcessName_);
    //selected index of chosen triggers:
    //for(unsigned int i=0;i<hltConfig_.size();i++)
      //std::cout<<i<<" "<<hltConfig_.triggerName(i)<<std::endl;
    for(unsigned int i=0;i<triggerNames_.size();i++)
      {
        triggerIndex_.push_back(hltConfig_.triggerIndex(triggerNames_[i]));
        if (triggerIndex_[i] == hltConfig_.size())
          {
            string errorMessage="Requested TriggerName does not exist! -- "+triggerNames_[i]+"\n";
            throw  cms::Exception("Configuration",errorMessage);
          }
      }
  }
  //////////////////////////////////////////////////////////////////////////////////////////
  template<class Jet>
  void DijetBalanceTreeProducer<Jet>::beginRun(edm::Run const& run)
  {
    Handle<GenRunInfoProduct> hRunInfo;
    if (isMCarlo_)
      { 
        run.getByLabel("generator", hRunInfo);
        xsec_ = hRunInfo->externalXSecLO().value();
      }
  } 
  //////////////////////////////////////////////////////////////////////////////////////////
  template<class Jet>
  void DijetBalanceTreeProducer<Jet>::endJob() 
  {
    if (m_file_ !=0) 
      {
        m_file_->cd();
        dijetTree_->Write();
        if (isMCarlo_)
          hPtHat_->Write();
        delete m_file_;
        m_file_ = 0;      
      }
  }
  //////////////////////////////////////////////////////////////////////////////////////////
  template<class Jet>
  void DijetBalanceTreeProducer<Jet>::analyze(edm::Event const& event, edm::EventSetup const& iSetup) 
  { 
    ////////////// Trigger bits //////
    edm::Handle<edm::TriggerResults> triggerResultsHandle;
    event.getByLabel(triggerResultsTag_,triggerResultsHandle); 
    if (!triggerResultsHandle.isValid())
      {
        string errorMessage="Requested TriggerResult is not present in file! -- \n";
        throw  cms::Exception("Configuration",errorMessage);
      }
    //check if configuration matches trigger results:
    assert(triggerResultsHandle->size() == hltConfig_.size());
    for (unsigned int i=0;i<6;i++)
      HLTBits_[i] = 0;
    for (unsigned int i=0;i<triggerIndex_.size();i++)
      { 
        bool result = triggerResultsHandle->accept(triggerIndex_[i]); 
        if (result)
          HLTBits_[i] = 1;
      }
    ////////////// Pt hat //////
    Handle<GenEventInfoProduct> hEventInfo;
    if (isMCarlo_)
      { 
        event.getByLabel("generator", hEventInfo);
        pthat_ = hEventInfo->binningValues()[0];
        hPtHat_->Fill(pthat_);
      }
    edm::Handle<JetCollection> jets;
    event.getByLabel (jets_,jets);
    ////////////// Jets //////
    typename JetCollection::const_iterator i_jet;
    int barrel(-1),probe(-1),ind(0);
    std::vector<double> PtJet(3);
    std::vector<double> EtaJet(3);
    std::vector<double> PhiJet(3);
    PtJet[2] = 0.;
    EtaJet[2] = 0.;
    PhiJet[2] = 0.;
    ///////////////////////////////////////////
    if (jets->size()<2) return;   
    for (i_jet = jets->begin(); i_jet != jets->end(); i_jet++)
      {
        PtJet[ind] = i_jet->pt();
        EtaJet[ind] = i_jet->eta();
        PhiJet[ind] = i_jet->phi();
        if (ind==2) break;
        ind++;
      } 
    if ((PtJet[0]+PtJet[1])/2.<dijetPtCut_) return;  
    dphi_ = dPhi(PhiJet[0],PhiJet[1]);
    ptJet3_ = PtJet[2];
    FindProbeJet(EtaJet[0],EtaJet[1],probe,barrel);
    if (barrel<0 || probe<0) return;
    ptBarrel_ = PtJet[barrel];
    ptProbe_  = PtJet[probe];
    etaProbe_ = EtaJet[probe];
    dijetTree_->Fill();
  }
  //////////////////////////////////////////////////////////////////////////////////////////  
  template<class Jet>
  void DijetBalanceTreeProducer<Jet>::FindProbeJet(double eta1, double eta2, int &probe, int &barrel)
  {
    bool FirstJetIsCentral  = (fabs(eta1)<barrelEtaCut_);
    bool SecondJetIsCentral = (fabs(eta2)<barrelEtaCut_);
    double RMAX = (1.+double(RAND_MAX))/2.;
    if (FirstJetIsCentral && SecondJetIsCentral) 
      {
        if (double(std::rand())<RMAX)
          {
            barrel=0;
            probe=1;
          } //Both central, pick trigger randomly, phi is random
        else
          {
            barrel=1;
            probe=0;
          }
      }
    else if (FirstJetIsCentral) 
      {
        barrel=0;
        probe=1;
      }
    else if (SecondJetIsCentral)
      {
        barrel=1;
        probe=0;
      } 
    else 
      {
        barrel=-1;
	probe=-1;
      }
  } 
  //////////////////////////////////////////////////////////////////////////////////////////
  template<class Jet>
  DijetBalanceTreeProducer<Jet>::DijetBalanceTreeProducer() 
  {
    m_file_=0;
  }
}
