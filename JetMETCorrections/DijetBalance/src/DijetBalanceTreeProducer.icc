#include <iostream>
#include <sstream>
#include <istream>
#include <fstream>
#include <iomanip>
#include <string>
#include <cmath>
#include <functional>

#include "JetMETCorrections/DijetBalance/interface/DijetBalanceTreeProducer.h"
#include "JetMETCorrections/DijetBalance/interface/JetUtil.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/Run.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/Framework/interface/EventSetup.h"
#include "FWCore/Framework/interface/ESHandle.h"
#include "SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/GenRunInfoProduct.h"
#include "DataFormats/JetReco/interface/CaloJet.h"
#include "DataFormats/JetReco/interface/PFJet.h"
#include "DataFormats/JetReco/interface/JPTJet.h"
#include "DataFormats/JetReco/interface/CaloJetCollection.h"
#include "DataFormats/JetReco/interface/PFJetCollection.h"
#include "DataFormats/JetReco/interface/JPTJetCollection.h"
#include "DataFormats/JetReco/interface/JetID.h"
#include "DataFormats/Common/interface/Handle.h"

using namespace edm;
using namespace reco;
using namespace std;

namespace cms
{
  template<class Jet>
  DijetBalanceTreeProducer<Jet>::DijetBalanceTreeProducer(edm::ParameterSet const& cfg) 
  {
    jets_               = cfg.getParameter<std::string>               ("jets");
    jetsID_             = cfg.getParameter<std::string>               ("jetsID");   
    jetType_            = cfg.getParameter<std::string>               ("jetType");
    dijetPtCut_         = cfg.getParameter<double>                    ("dijetPtCut"); 
    barrelEtaCut_       = cfg.getParameter<double>                    ("barrelEtaCut"); 
    triggerNames_       = cfg.getParameter<std::vector<std::string> > ("jetTriggerNames");
    triggerProcessName_ = cfg.getParameter<std::string>               ("triggerProcessName"); 
    triggerResultsTag_  = cfg.getParameter<edm::InputTag>             ("triggerResultsTag");
    isMCarlo_           = cfg.getParameter<bool>                      ("isMCarlo");
  }
  //////////////////////////////////////////////////////////////////////////////////////////
  template<class Jet>
  void DijetBalanceTreeProducer<Jet>::beginJob() 
  {
    if (triggerNames_.size()>6)
      {
        string errorMessage = "Too many trigger bits!!!! \n";
        throw  cms::Exception("Configuration",errorMessage);
      } 
    dijetTree_ = fs->make<TTree>("DiJetTree","DiJetTree");
    dijetTree_->Branch("lumi",         &lumi_,         "lumi_/I");
    dijetTree_->Branch("bunch",        &bunch_,        "bunch_/I");
    dijetTree_->Branch("evtNo",        &evtNo_,        "evtNo_/I");
    dijetTree_->Branch("runNo",        &runNo_,        "runNo_/I");
    dijetTree_->Branch("dphi",         &dphi_,         "dphi_/F");
    dijetTree_->Branch("ptBarrel",     &ptBarrel_,     "ptBarrel_/F");
    dijetTree_->Branch("ptProbe",      &ptProbe_,      "ptProbe_/F");
    dijetTree_->Branch("ptJet3",       &ptJet3_,       "ptJet3_/F");
    dijetTree_->Branch("dijetPt",      &dijetPt_,      "dijetPt_/F");
    dijetTree_->Branch("etaBarrel",    &etaBarrel_,    "etaBarrel_/F");
    dijetTree_->Branch("etaProbe",     &etaProbe_,     "etaProbe_/F");
    dijetTree_->Branch("etaJet3",      &etaJet3_,      "etaJet3_/F");
    dijetTree_->Branch("passLooseIdBarrel",&passLooseIdBarrel_,"passLooseIdBarrel_/I");
    dijetTree_->Branch("passLooseIdProbe", &passLooseIdProbe_, "passLooseIdProbe_/I");
    dijetTree_->Branch("passLooseIdJet3",  &passLooseIdJet3_,  "passLooseIdJet3_/I");
    for (unsigned int jname=0;jname<triggerNames_.size();jname++) 
       {
         const char* branchname = triggerNames_[jname].c_str();
         dijetTree_->Branch(branchname,&HLTTrigResults_[jname],"prescale/I:fired/I");
       }
    if (isMCarlo_)
      {
        dijetTree_->Branch("pthat",        &pthat_,        "pthat_/F"); 
        dijetTree_->Branch("weight",       &weight_,       "weight_/F");
        dijetTree_->Branch("xsec",         &xsec_,         "xsec_/F"); 
        hPtHat_ = fs->make<TH1F>("ptHat","ptHat",3500,0,3500);
      }  
  }
  //////////////////////////////////////////////////////////////////////////////////////////
  template<class Jet>
  void DijetBalanceTreeProducer<Jet>::beginRun(edm::Run const & iRun, edm::EventSetup const& iSetup)
  {
    bool changed(true);
    if (hltConfig_.init(iRun,iSetup,triggerResultsTag_.process(),changed)) 
      {
         // if init returns TRUE, initialisation has succeeded!
         triggerIndex_.clear();
         for(unsigned int i=0;i<triggerNames_.size();i++)
           {
             std::cout<<triggerNames_[i]<<" "<<hltConfig_.triggerIndex(triggerNames_[i])<<std::endl;
             triggerIndex_.push_back(hltConfig_.triggerIndex(triggerNames_[i]));
             if (triggerIndex_[i] == hltConfig_.size())
               {
                 string errorMessage="Requested TriggerName does not exist! -- "+triggerNames_[i]+"\n";
                 //throw  cms::Exception("Configuration",errorMessage);
               }
           }
         if (changed) 
           {
             // The HLT config has actually changed wrt the previous Run, hence rebook your
             // histograms or do anything else dependent on the revised HLT config
             std::cout<<"Run: "<<iRun.run()<<".....Changed HLTConfig"<<std::endl;
           }
      } 
    else 
      {
        // if init returns FALSE, initialisation has NOT succeeded, which indicates a problem
        // with the file and/or code and needs to be investigated!
        LogError("MyAnalyzer") << " HLT config extraction failure with process name " << triggerResultsTag_.process();
        // In this case, all access methods will return empty values!
      }
    Handle<GenRunInfoProduct> hRunInfo;
    if (isMCarlo_)
      { 
        iRun.getByLabel("generator", hRunInfo);
        xsec_ = hRunInfo->externalXSecLO().value();
      }
  } 
  //////////////////////////////////////////////////////////////////////////////////////////
  template<class Jet>
  void DijetBalanceTreeProducer<Jet>::endJob() 
  {
    
  }
  //////////////////////////////////////////////////////////////////////////////////////////
  template<class Jet>
  void DijetBalanceTreeProducer<Jet>::analyze(edm::Event const& event, edm::EventSetup const& iSetup) 
  { 
    runNo_ = event.id().run();
    evtNo_ = event.id().event();
    lumi_  = event.luminosityBlock();
    bunch_ = event.bunchCrossing(); 


    ////////////// Trigger bits //////
    edm::Handle<edm::TriggerResults> triggerResultsHandle;
    event.getByLabel(triggerResultsTag_,triggerResultsHandle); 

    int ErrFlag=0;
    if (!triggerResultsHandle.isValid())
        {
          string errorMessage = "Requested TriggerResult is not present in file! -- \n";
          cout << errorMessage << endl;
          ErrFlag=-1;
        }
    for(unsigned int i=0;i<triggerNames_.size();i++) 
        {
          HLTTrigResults_[i].fired = ErrFlag;
          HLTTrigResults_[i].prescale = 1;
          bool accept=false;
          if (ErrFlag>-1) {
          try {
             unsigned int trIndex = hltConfig_.triggerIndex(triggerNames_[i]);
              if (hltConfig_.size() != trIndex) {
                accept = triggerResultsHandle->accept(trIndex);
              }
              else {
                accept = false;
                HLTTrigResults_[i].fired = -1;
              }
          }
          catch (...) {
              accept = false;
              HLTTrigResults_[i].fired = -1;
            }
         
          if (accept) {
              HLTTrigResults_[i].fired = 1;
            }
          }
         //std::cout<<triggerNames_[i]<<" "<<hltConfig_.triggerIndex(triggerNames_[i])<<" "<< HLTTrigResults_[i].fired<<std::endl;
        }
    ////////////// Pt hat //////
    Handle<GenEventInfoProduct> hEventInfo;
    if (isMCarlo_)
      { 
        event.getByLabel("generator", hEventInfo);
        pthat_  = hEventInfo->binningValues()[0];
        weight_ = hEventInfo->weight();
        hPtHat_->Fill(pthat_);
      }
    ////////////// Jets //////
    edm::Handle<JetCollection> jets;
    typename JetCollection::const_iterator i_jet;
    event.getByLabel (jets_,jets);
    edm::Handle<ValueMap<reco::JetID> > jetsID;

    int barrel(-1),probe(-1),ind(0);
    std::vector<double> PtJet(3);
    std::vector<double> EtaJet(3);
    std::vector<double> PhiJet(3);
    std::vector<int> PassLooseId(3);
    PtJet[2]   = 0.;
    EtaJet[2]  = 0.;
    PhiJet[2]  = 0.;
    PassLooseId[2]  = 0.;
    ///////////////////////////////////////////
    if (jets->size()<2) return;   
    for (i_jet = jets->begin(); i_jet != jets->end(); i_jet++)
      {
        const Jet *fJet = &*i_jet;
        bool pass;  
        if (jetType_ == "Calo")
          {  
            const reco::CaloJet& caloJet = dynamic_cast <const reco::CaloJet&> (*fJet);
            event.getByLabel(jetsID_,jetsID);
            RefToBase<reco::Jet> jetRef(Ref<JetCollection>(jets,ind));
            int    n90hits = int((*jetsID)[jetRef].n90Hits);
            double fHPD = (*jetsID)[jetRef].fHPD;
            pass = ((caloJet.emEnergyFraction()>0.01 || (fabs(caloJet.eta())>2.6)) && (n90hits > 1) && (fHPD < 0.98));
          } 
        else if (jetType_ == "PF")
          {
            const reco::PFJet& pfJet = dynamic_cast <const reco::PFJet&> (*fJet);
            pass =((pfJet.neutralHadronEnergyFraction()<1) && (pfJet.neutralEmEnergyFraction()<1) && (pfJet.chargedEmEnergyFraction()<1) && (pfJet.chargedHadronEnergyFraction()>0 || fabs(pfJet.eta())>2.4)); 
          }
        else if (jetType_ == "JPT")
          {
            const reco::JPTJet& jptJet = dynamic_cast <const reco::JPTJet&> (*fJet);
            event.getByLabel(jetsID_,jetsID);
            RefToBase<reco::Jet> jetRef(jptJet.getCaloJetRef());
            int    n90hits = int((*jetsID)[jetRef].n90Hits);
            double fHPD    = (*jetsID)[jetRef].fHPD;
            double emf     = (*jetsID)[jetRef].restrictedEMF;
            pass = ((emf>0.01 || (fabs(i_jet->eta())>2.6)) && (n90hits > 1) && (fHPD < 0.98)); 
          }
        else if (jetType_ == "CaloCor")
          {
            const reco::CaloJet& caloJet = dynamic_cast <const reco::CaloJet&> (*fJet);
            pass = ((caloJet.emEnergyFraction()>0.01 || (fabs(caloJet.eta())>2.6)));
          }
        else 
          pass = true;
        if (pass)
          PassLooseId[ind] = 1;
        else
          PassLooseId[ind] = 0;  
        PtJet[ind]   = i_jet->pt();
        EtaJet[ind]  = i_jet->eta();
        PhiJet[ind]  = i_jet->phi();
        if (ind==2) break;
        ind++;
      } 
    dijetPt_ = 0.5*(PtJet[0]+PtJet[1]);
    if ((PtJet[0]+PtJet[1])/2.<dijetPtCut_) return;  
    dphi_        = dPhi(PhiJet[0],PhiJet[1]);
    ptJet3_      = PtJet[2];
    etaJet3_     = EtaJet[2];
    passLooseIdJet3_ = PassLooseId[2]; 
    FindProbeJet(EtaJet[0],EtaJet[1],probe,barrel);
    if (barrel<0 || probe<0) return;
    ptBarrel_      = PtJet[barrel];
    ptProbe_       = PtJet[probe];
    etaBarrel_     = EtaJet[barrel]; 
    etaProbe_      = EtaJet[probe];
    passLooseIdBarrel_ = PassLooseId[barrel]; 
    passLooseIdProbe_  = PassLooseId[probe];
    dijetTree_->Fill();
  }
  //////////////////////////////////////////////////////////////////////////////////////////  
  template<class Jet>
  void DijetBalanceTreeProducer<Jet>::FindProbeJet(double eta1, double eta2, int &probe, int &barrel)
  {
    bool FirstJetIsCentral  = (fabs(eta1)<barrelEtaCut_);
    bool SecondJetIsCentral = (fabs(eta2)<barrelEtaCut_);
    double RMAX = (1.+double(RAND_MAX))/2.;
    if (FirstJetIsCentral && SecondJetIsCentral) 
      {
        if (double(std::rand())<RMAX)
          {
            barrel=0;
            probe=1;
          } //Both central, pick trigger randomly, phi is random
        else
          {
            barrel=1;
            probe=0;
          }
      }
    else if (FirstJetIsCentral) 
      {
        barrel=0;
        probe=1;
      }
    else if (SecondJetIsCentral)
      {
        barrel=1;
        probe=0;
      } 
    else 
      {
        barrel=-1;
	probe=-1;
      }
  } 
  //////////////////////////////////////////////////////////////////////////////////////////
  template<class Jet>
  DijetBalanceTreeProducer<Jet>::~DijetBalanceTreeProducer() 
  {
    
  }
}
