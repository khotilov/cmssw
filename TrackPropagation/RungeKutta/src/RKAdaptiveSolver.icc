#include "RKAdaptiveSolver.h"
#include <cmath>

inline double signum( double d) {return d>=0 ? 1.0 : -1.0;}

template <typename T, 
	  template <typename,int> class StepWithPrec, 
	  int N>
typename  RKAdaptiveSolver<T, StepWithPrec, N>::Vector
RKAdaptiveSolver<T,StepWithPrec,N>::operator()( Scalar startPar, const Vector& startState,
						     Scalar step, const RKDerivative<T,N>& deriv,
						     const RKDistance<T,N>& dist,
						     Scalar eps)
{
    const double Safety = 0.9;
    double remainigStep = step;
    double stepSize = step;   // attempt to solve in one step
    Scalar currentPar   = startPar;
    Vector currentStart = startState;
    int nsteps = 0;
    std::pair<Vector, Scalar> tryStep;

    StepWithPrec<T,N> stepWithAccuracy;

    do {
	tryStep = stepWithAccuracy( currentPar, currentStart, deriv, dist, stepSize);
	nsteps++;
	//either we are very close or the step size is small enough
	if (tryStep.second <eps || std::abs(stepSize) < std::abs(remainigStep)*0.1) {
	    if (std::abs(remainigStep - stepSize) < eps/2) {
		if (verbose()) std::cout << "Accuracy reached, and full step taken in " 
				    << nsteps << " steps" << std::endl;
		return tryStep.first; // we are there
	    }
	    else {
		remainigStep -= stepSize;
		currentPar += stepSize;
                // increase step size
                // double factor =  std::min( Safety * pow( std::fabs(eps/tryStep.second),0.2), 4.); // gives division by 0 FPE
		double factor =  tryStep.second == 0 ? 4. : std::min( Safety * pow( std::fabs(eps/tryStep.second),0.2), 4.);

		// stepSize = std::min( stepSize*factor, remainigStep);
	        double absRemainingStep = std::abs(remainigStep);
		double absSize =  std::min( std::abs(stepSize*factor), absRemainingStep);
	        if (absSize < 0.05* absRemainingStep ) absSize =  0.05* absRemainingStep;
		stepSize = absSize * signum(stepSize);
		currentStart = tryStep.first;
		if (verbose()) std::cout << "Accuracy reached, but " << remainigStep 
		     << " remain after " << nsteps << " steps. Step size increased by " 
		     << factor << " to " << stepSize << std::endl;
	    }
	}
	else {
	    // decrease step size
	    double factor =  std::max( Safety * pow( std::fabs(eps/tryStep.second),0.25), 0.1);
	    stepSize *= factor;
	    //don't let it run crazy
	    if (std::abs(stepSize) < 0.05*std::abs(remainigStep)) stepSize = 0.05*remainigStep;
	    if (verbose()) std::cout << "Accuracy not yet reached: delta = " << tryStep.second
		 << ", step reduced by " << factor << " to " << stepSize <<" of remaining "<< remainigStep << std::endl;
	}
    } while (std::abs(remainigStep) > eps/2);

    return tryStep.first;
}
