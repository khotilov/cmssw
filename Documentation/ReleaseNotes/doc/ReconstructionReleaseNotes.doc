/*!
\page ReconstructionReleaseNotes Reconstruction Release Notes - CMSSW_2_0_x


- General:

- Main changes and new features:

- Major bug fixes:

- Known issues:

<hr>
Main changes and new features by subsystem:

- Tracker

- ECAL
 - ChannelStatusMap integrated in the reconstruction chain
 - RecHit re-calibrator
 - New super-cluster corrections
 - Cluster position tools: tell if a DetId is close to a module boundary

- HCAL
 - DB Interface
  - templated conditions objects are introduced. Most of the objects (except electronics map) built through  "typedef HcalCondObjectContainer<single cell object>" (unified container, uses hashed id's).
  - new Conditions objects added for response correction factors and zero supressions thresholds. Also changed is the channel quality format.
  - HcalCalibrationsSet is modified to work also with pedestals in ADC counts in addition to previously used pedestals in fC.
  - new PopCon v2 applications for the conditions objects. 
 -  Off-Line Conditions
  - new QIE data and corresponding new pedestals and pedestal widths. Trivial response correction (=1) is set as default. 
 -  Data Formats
  - new method in HcalGenericDetId: int hashedId() const. It returns a hashed id separately for HB, HE, HO, HF, HT, CALIB, ZDC (CASTOR to be finished). 
  - RecHits:  introduction of multiplication of gains with response corrections prior to reconstructing the RecHit, in the HcalCalibrations. New "respcorrgain" method used in RecHit formatting and in trigger code.
  - CaloTowers:  UseHO flag is enabled.  The mass in the CaloTower 4-vector iz explicitly set to zero (requested by the Jet/Met Group). 

- CSC
 - Geometry updates
 - Data Formats:
  - CSCDigi: minor updates and cleanup to all digi types.
  - CSCRecHit: CSCRecHit2D has minor updates and cleanup.
    - Replaced chi2 and chi2 probability of superseded Gatti fit by a 'quality' value.
    - Added estimated position of shower centre within central strip, and estimated error.
    - Add flags for bad strips or wire groups contributing to a rechit (for future use.)
 - CondFormats
  -CSCObjects: content of all calibration-type conditions data (gains, pedestals, crosstalk, noise) have been rationalized,
   and are stored as short int instead of float to minimize memory requirements.
   Classes added to handle bad (hot, dead, noisy) strip and wire group channels.
   A class CSCConditions encapsulates a user interface for all conditions data
   and handles conversion back to float where appropriate.

 - Calibration data handling (CalibMuon/CSCCalibration)
  - Uses conditions data with the short int storage format.
  - PopCon implementation.

 - Local reconstruction (RecoLocalMuon) uses new default algorithms as mandated by CSC DPG.
  - Rechit building uses RecoLocalMuon/CSCRecHitD (faster since no Gatti fit;
    improved error estimates) in place of CSCRecHitB.
    Uses conditions data with the short int storage format.
  - Segment building uses CSCSegAlgoSK (a spanning-tree algorithm)
    in RecoLocalMuon/CSCSegment, in place of CSCSegAlgoDF.

 - Raw data unpacking (EventFilter/CSCRawToDigi)
  - Considerable changes for improved handling of raw data stream.
  - Unpacking is more robust so that occasional local data
    corruption does not invalidate CSC data of entire event.

- DT

- RPC


- EGamma
 - H/E cut and Et cut before conversion track finding
   - For both Photons and Conversions the new H/E calculation developed for electrons is used
     Default cuts are  H/E < 0.2 and Et>5 GeV
 - Photons are no longer applied any energy correction since all corrections will be included at SuperCluster leve
 - Photons with e3x3/Esc > R9threshold (which with high probablity are uncoverted)
   are constructed forcing their energy  to be the e5x5. Photons with e3x3/Esc < R9threshold get the SuperCluster energy.
 - Protect all Producers against invalid Handle to collections
 - Remove from beginJob all EventSetup-depending stuff
 - ckfTracksFromConversions: no longer separate collections for barrel and endcap. Config files changed accordingly
  - OneToOne association map between tracks and Super Cluster was replaced with a ValueMap
 - Further revision of photonSequence and conversionSequence. Now that energy corrections are no longer applied to Photons, the
   correctedPhotons do not exist anymore. Only 2 collections are stored in the event recoPhotons_photons and
   recoConversions_conversions
 - Remove from the Photon constructor the charge
 - Electron seeding improvements
  - Pixel match uses TID nad TEC for searching the 2nd hit
  - Pt dependent phi windows
 - Relax E/p cut in default electron preselection
 - Energy corrections are now at SC level
 - Speed/data size improvements
  - Move Et and H/E cuts at seeding level
  - H/E is calculated using a single HCAL cell rather than using CaloConSelector

- JetMET
 - reduce number of officially supported algorithms (running in production):
   iterativeCone R=0.5, sisCone R=0.5, siscone R=0.7, kt D=0.4, kt D=0.6
 - produce only one GenJet collection per jet algorithm: include all genParticles
   except invisible BSM, and neutrinos and muons produced from gauge bosons  decays
 - apply pT>5GeV/c cut on produced GenJets
 - fine tune of jet "physics eta" - effect of interaction point Z displaced
 - use factorized corrections for JES, release L1,L2,L3,L4,L5,L7 jet corrections
 - use chained corrections to combine stable corrections sequences into one effective
   correction

- Muon POG

- B Tagging

- Particle Flow 
 - DataFormats
 - Unified set up for the reconstruction of electrons, conversions, nuclear interactions in ParticleFlowReco and ParticleFlowCandidate. In particular PFCandidate was inheriting from LeafCandidate, and is now inheriting from CompositeCandidate.
 - ParticleFlowCandidate: prepared the integration with PAT. New classes inheriting from PFCandidate added. In PFCandidate, added a reference to the parent PFCandidate, to keep track of what is happening when doing a selection with object copy.
 - ParticleFlowCandidate: bug fix in the reference to the source PFBlock. A PFCandidate now refers to PFBlockElements that can come from several different blocks, as it should because of cluster recovery.
 - Now making use of the Particle::pdgId_ data member. PFCandidate::particleId_ will soon be removed.

 - Algorithm: no change, all new features are deactivated by default.
 - Software:
  - ECAL clustering: hashed index used to speed up navigation. Gain in terms of speed to be quantified
  - All clustering: general cleanup of the producers and sequences. Production of PFRecHits and of PFClusters are done in separate producers. Processing of ECAL, HCAL and PS data done in separate producers.
  - All algorithms now make use of permanent refs in full framework, and of transient refs in FWLite
  - PFRootEvent: jet reconstruction is working.




<hr>
Last updated: @DATE@ Andrea Rizzi
 
*/
