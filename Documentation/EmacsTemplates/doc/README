cmssw-mode.el is a major modefor editing CMSSW configuration files in
Emacs or XEmacs.

(Copyright (C) 2006 Jim Pivarski, see package for copyright and warantee)

If you routinely edit .cfg, .cfi, or .cff files in Emacs or XEmacs,
this package can help by

  * colorizing the text in the buffer according to syntax, thus making
    it easier to catch syntax errors,
  * indenting according to curly-brackets depth with the TAB key,
  * and searching for .cfi and .cff files referenced by include
    statements with a mouse-click or key combination.

To use this package, 

  1. save Documentation/EmacsTemplates/src/cmssw-mode.el to a
convenient local directory, such as ~/bin/emacs.

  2. Insert the following into your ~/.emacs or ~/.xemacs/init.el:

        (require 'cmssw-mode "/location/of/your/cmssw-mode.el")

  3) Visit a .cfg, .cfi, or .cff file.  The mode name (bar on the bottom of
     the screen) should now say `(CMSSW)'.

If you are working in font-lock-mode (which is to say, if syntax
coloring works for any other Emacs modes, such as cc-mode for C++
files), the text in the configuration script should be
syntax-colored.  To toggle font-lock-mode, enter `font-lock-mode' in
the minibuffer (meta-X font-lock-mode).

Pressing TAB (control-i) should indent the current line according to
the depth of curly brackets.  The default is four spaces per unclosed
curly bracket.  To indent an entire region (selection), press
control-meta-\.  To indent an entire file, use this sequence:

   meta-shift-<        (go to beginning of buffer)
   meta-shift->        (set mark at beginning and go to end of buffer)
   control-meta-\      (indent everything that region)

This can help to standardize indentation and make configuration files
more readable.  It can also help to catch unclosed curly brackets.

To open a file specified by an include statement,

   * meta-left click on the filename (meta may be alt), or
   * move the cursor over the filename and type control-c control-c.

(This can be a great help when working with .cfg files that include
.cff files that include .cfi files.)  Mouse-based interaction won't
work if you're using Emacs inside a terminal or specify no-windows
(emacs -nw).  (X)Emacs searches for the file in the path order
specified by CMSSW_SEARCH_PATH, that is, it will search your local
directories first, then the read-only files in the packaged release
you are working with ($CMSSW_RELEASE_BASE/src).

FOR THIS FEATURE TO WORK, it is necessary that you set
CMSSW_SEARCH_PATH before starting (X)Emacs.  Run

   eval `scramv1 runtime -sh'    (or -csh)

before starting (X)Emacs, in the same terminal that you use to invoke
(X)Emacs, in the correct project directory.

If you have started (X)Emacs without having first defined
CMSSW_SEARCH_PATH, you can still get the functionality by manually
setting the variable inside (X)Emacs.  To do so, follow this recipe:

   1. eval `scramv1 runtime -sh' (or -csh) if you haven't already to
      set CMSSW_SERACH_PATH.
   2. echo $CMSSW_SEARCH_PATH to see its value.  Copy this.
   3. In (X)Emacs, meta-X eval-expression, and enter

   (setenv "CMSSW_SEARCH_PATH" "string:that:you:copied")

Now you should be able to follow include files with meta-click or
control-c control-c.

Finally, you can get the copyright and lack-of-a-warantee messages by
typing

    meta-x cmssw-mode-copying        and
    meta-x cmssw-mode-no-warantee

These are hold-overs from the days when cmssw-mode was not a part of
CMSSW and needed the standard protections any publicly-available
software should have.  The copyright is a standard Gnu Public Licence.

The HyperNews thread for this package may be found at

   https://hypernews.cern.ch/HyperNews/CMS/get/sw-develtools/119.html?inline=-1
