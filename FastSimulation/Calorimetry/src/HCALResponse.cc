//FastSimulation headers
#include "FastSimulation/Calorimetry/interface/HCALResponse.h"
#include "FastSimulation/Utilities/interface/RandomEngine.h"

// CMSSW Headers
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"

#include<iostream>
#include <math.h>

#define debug 0

using namespace edm;

HCALResponse::HCALResponse(const edm::ParameterSet& pset,
			   const RandomEngine* engine) :
  random(engine)
{ 
  
  RespPar[HCAL][0][0] =  
    pset.getParameter<double>("HadronBarrelResolution_Stochastic");
  RespPar[HCAL][0][1] =  
    pset.getParameter<double>("HadronBarrelResolution_Constant");
  RespPar[HCAL][0][2] =  
    pset.getParameter<double>("HadronBarrelResolution_Noise");

  RespPar[HCAL][1][0] =  
    pset.getParameter<double>("HadronEndcapResolution_Stochastic");
  RespPar[HCAL][1][1] =  
    pset.getParameter<double>("HadronEndcapResolution_Constant");
  RespPar[HCAL][1][2] =  
    pset.getParameter<double>("HadronEndcapResolution_Noise");

  RespPar[VFCAL][0][0] =  
    pset.getParameter<double>("HadronForwardResolution_Stochastic");
  RespPar[VFCAL][0][1] =  
    pset.getParameter<double>("HadronForwardResolution_Constant");
  RespPar[VFCAL][0][2] =  
    pset.getParameter<double>("HadronForwardResolution_Noise");

  RespPar[VFCAL][1][0] =  
    pset.getParameter<double>("ElectronForwardResolution_Stochastic");
  RespPar[VFCAL][1][1] =  
    pset.getParameter<double>("ElectronForwardResolution_Constant");
  RespPar[VFCAL][1][2] =  
    pset.getParameter<double>("ElectronForwardResolution_Noise");

  eResponseScale[0] = 
    pset.getParameter<double>("eResponseScaleHB");  
  eResponseScale[1] = 
    pset.getParameter<double>("eResponseScaleHE");
  eResponseScale[2] = 
    pset.getParameter<double>("eResponseScaleHF");

  eResponsePlateau[0] = 
    pset.getParameter<double>("eResponsePlateauHB");
  eResponsePlateau[1] = 
    pset.getParameter<double>("eResponsePlateauHE");
  eResponsePlateau[2] = 
    pset.getParameter<double>("eResponsePlateauHF");

  eResponseExponent = 
    pset.getParameter<double>("eResponseExponent");

  eResponseCoefficient = 
    pset.getParameter<double>("eResponseCoefficient");

  eResponseCorrection = 
    pset.getParameter<double>("eResponseCorrection");

  // If need - add a small energy to each hadron ...
  eBias = 
    pset.getParameter<double>("energyBias");
  
  
  etaStep = 0.1;
  muStep  = 0.25;

  double _eGridHDB[maxHDeB]   = {1., 2., 3., 5., 9., 15., 20., 30., 50., 150.,
                                 225., 300. };
  double _eGridHDF[maxHDeF]   = {10., 30., 100., 300., 700., 1000., 3000.};
  double _eGridEM[maxEMe]     = {10., 30., 100., 300., 700., 1000., 3000.};
  double _eGridMU[maxMUe]     = {10., 30., 100., 300.};
  double _etaGridMU[maxMUeta] = {0.3, 0.6, 0.8, 1.25, 1.4, 3.0};


  // new HB parameters and eta-energy 

  double _meanHDB[maxHDeB][maxHDetaB] = {

    { 0.568435 , 0.581157 , 0.535524 , 0.533992 , 0.501348 , 0.486947 , 0.419568 , 0.746564 , 0.723906 , 0.573738 , 0.513449 , 0.50197 , 0.510642 , 0.530663 , 0.513894 , 0.522374 , 0.497763 , 0.509543 , 0.538099 , 0.559572 , 0.578176 , 0.52589 , 0.500291 , 0.512384 , 0.5 , 0.518493 , 0.544268 , 0.469633 , 0.516954 , 0.500546 },

    { 1.49995 , 1.50356 , 1.48182 , 1.43871 , 1.44501 , 1.38695 , 1.38756 , 1.34685 , 1.32376 , 1.25681 , 1.27943 , 1.22469 , 1.29924 , 1.51005 , 1.52364 , 1.49599 , 1.51428 , 1.49413 , 1.52216 , 1.52108 , 1.45148 , 1.52227 , 1.62458 , 1.55357 , 1.50025 , 1.60653 , 1.62089 , 1.48593 , 1.14068 , 1.00029},

    { 2.39071 , 2.39404 , 2.33671 , 2.29248 , 2.30786 , 2.29406 , 2.17728 , 2.20881 , 2.18971 , 2.15036 , 2.14836 , 2.16882 , 2.07845 , 2.21135 , 2.63871 , 2.56163 , 2.43503 , 2.3676 , 2.42444 , 2.52679 , 2.45442 , 2.53011 , 2.41238 , 2.47163 , 2.48197 , 2.63264 , 2.50835 , 2.70113 , 2.51443 , 1.66363},

    { 4.2223 , 4.21688 , 4.24724 , 4.19224 , 4.16865 , 4.14472 , 4.14101 , 4.11577 , 4.10966 , 4.03728 , 3.9883 , 3.9814 , 4.00942 , 3.98234 , 4.68722 , 5.07483 , 4.72215 , 4.5337 , 4.80451 , 4.69918 , 4.68544 , 4.71681 , 4.55891 , 4.5454 , 4.5616 , 4.89283 , 4.73549 , 4.80538 , 4.97887 , 4.17356 },

    { 8.00706 , 8.02172 , 7.82048 , 7.93424 , 7.70879 , 7.92543 , 7.68784 , 7.55889 , 7.65814 , 7.65885 , 7.51355 , 7.44811 , 7.67596 , 7.65921 , 7.94415 , 8.39656 , 9.10504 , 8.81854 , 8.70495 , 8.95899 , 9.09215 , 8.89339 , 8.97297 , 8.99587 , 9.0867 , 8.942 , 9.15767 , 9.1551 , 9.17254 , 8.87461 },

    { 13.4856 , 13.5295 , 13.8898 , 13.5197 , 13.4548 , 13.4268 , 13.1677 , 13.0136 , 13.2002 , 13.1582 , 12.9706 , 12.9237 , 13.3406 , 13.4027 , 13.8355 , 14.5451 , 15.4652 , 15.5071 , 15.442 , 15.4884 , 15.3628 , 15.7552 , 15.491 , 15.6661 , 15.6398 , 15.4681 , 15.8655 , 15.4205 , 15.2068 , 14.9865 },

    { 18.5132 , 18.5305 , 18.536 , 18.4873 , 18.2554 , 18.1009 , 18.3225 , 18.2078 , 17.9741 , 17.8698 , 17.7501 , 17.7858 , 18.032 , 18.4086 , 18.6885 , 20.2262 , 21.2185 , 20.896 , 20.5884 , 21.0642 , 20.8273 , 20.896 , 20.9308 , 21.4422 , 21.0457 , 21.0582 , 21.3619 , 21.0995 , 21.1714 , 20.7916 },

    { 28.4747 , 28.3258 , 28.1125 , 28.0497 , 27.9626 , 28.0129 , 27.7286 , 27.3278 , 27.5628 , 27.3297 , 27.2271 , 27.01 , 27.8585 , 28.3968 , 28.9441 , 31.2056 , 31.9144 , 31.7659 , 31.816 , 32.0362 , 31.9742 , 32.0011 , 32.1656 , 32.605 , 32.2603 , 32.3514 , 32.5371 , 32.2708 , 31.9263 , 32.0019 },

    { 47.6805 , 47.7675 , 47.4529 , 47.4647 , 47.3125 , 47.4544 , 46.6312 , 46.2238 , 46.2357 , 46.1264 , 45.8794 , 46.1385 , 46.825 , 48.0292 , 48.9424 , 54.3691 , 53.7965 , 53.452 , 53.7212 , 53.9765 , 53.1962 , 53.9177 , 53.5088 , 54.1537 , 54.1085 , 53.9163 , 54.3511 , 53.8127 , 53.5989 , 53.2054 },

    { 144.625 , 144.394 , 144.516 , 143.105 , 144.213 , 144.242 , 143.531 , 142.834 , 142.939 , 142.278 , 140.956 , 142.045 , 144.571 , 145.156 , 149.425 , 162.688 , 161.602 , 161.852 , 161.855 , 163.142 , 161.433 , 162.799 , 162.28 , 163.163 , 162.742 , 162.126 , 162.775 , 161.979 , 160.326 , 156.958 },

    { 217.087 , 218.284 , 218.328 , 217.3 , 214.808 , 216.96 , 215.647 , 215.03 , 215.547 , 216.061 , 212.836 , 214.273 , 216.12 , 214.487 , 224.094 , 243.999 , 242.507 , 242.561 , 242.899 , 243.418 , 241.714 , 243.213 , 243.629 , 243.614 , 242.985 , 242.51 , 243.461 , 241.142 , 238.606 , 231.665 },

    {291.674 , 290.466 , 292.702 , 290.401 , 289.927 , 288.303 , 289.992 , 286.985 , 289.207 , 287.936 , 283.787 , 287.869 , 290.324 , 287.984 , 298.522 , 325.847 , 321.912 , 322.189 , 321.571 , 324.811 , 323.23 , 325.465 , 323.672 , 326.213 , 324.048 , 323.579 , 326.608 , 321.704 , 317.602 , 309.905 }

  };

  double _sigmaHDB[maxHDeB][maxHDetaB] = {

    { 0.342228 , 0.374138 , 0.327231 , 0.345981 , 0.293963 , 0.34084 , 0.388163 , 0.941721 , 1.05989 , 0.734312 , 0.638574 , 0.563231 , 0.59309 , 0.598979 , 0.626575 , 0.648912 , 0.619916 , 0.596478 , 0.635296 , 0.777022 , 0.871913 , 0.895345 , 0.988462 , 1.04368 , 1.01333 , 1.04605 , 1.09793 , 0.9576 , 1.02733 , 1.05114 },

    { 0.928427 , 1.08488 , 0.927491 , 0.843929 , 1.0558 , 0.845063 , 0.915855 , 0.866387 , 0.903753 , 0.742495 , 0.839519 , 0.764705 , 1.08534 , 1.29761 , 1.26661 , 1.24474 , 1.4442 , 1.28767 , 1.38876 , 1.30216 , 1.20989 , 1.2644 , 1.41003 , 1.34105 , 1.20819 , 1.36838 , 1.34887 , 1.54547 , 1.68869 , 1.62674  },

    { 1.41162 , 1.39113 , 1.31478 , 1.25917 , 1.35245 , 1.28327 , 1.16481 , 1.38516 , 1.24195 , 1.23447 , 1.23012 , 1.35239 , 1.18784 , 1.61128 , 1.83356 , 1.79739 , 1.69284 , 1.70134 , 1.7352 , 1.70854 , 1.8154 , 1.91254 , 1.66075 , 1.69613 , 1.697 , 1.89169 , 1.60034 , 1.95615 , 2.17286 , 2.05696 },

    { 1.86654 , 1.81119 , 1.86508 , 1.72062 , 1.74672 , 1.73905 , 1.87335 , 2.01479 , 1.95791 , 1.77667 , 1.77758 , 2.05003 , 1.96499 , 1.94731 , 2.59583 , 2.60662 , 2.46954 , 2.42239 , 3.01737 , 2.54338 , 2.57903 , 2.66401 , 2.24359 , 2.23474 , 2.50431 , 2.4851 , 2.29357 , 2.37818 , 2.51982 , 2.91928 },

    { 2.8395 , 2.54548 , 2.68296 , 2.76361 , 2.63107 , 2.77042 , 2.67386 , 2.48073 , 2.60121 , 2.75501 , 2.64946 , 2.5958 , 2.70732 , 2.74449 , 3.17218 , 3.60345 , 3.42717 , 3.30139 , 3.16616 , 3.4608 , 3.64501 , 3.50217 , 3.30312 , 3.57036 , 3.64341 , 3.56217 , 3.39826 , 3.66402 , 3.4394 , 3.7789 },

    { 3.39426 , 3.42109 , 3.90018 , 3.45243 , 3.64641 , 3.56715 , 3.7178 , 3.51378 , 3.60167 , 3.73476 , 3.67249 , 3.59069 , 3.81671 , 3.79389 , 4.54008 , 5.53243 , 4.41706 , 4.73643 , 4.75034 , 4.53349 , 4.61952 , 4.78473 , 4.57724 , 4.78344 , 4.91606 , 4.56105 , 4.71795 , 4.31 , 4.26585 , 5.03259 },

    { 4.32216 , 4.09533 , 4.38134 , 4.2606 , 4.14205 , 4.2183 , 4.3235 , 4.49908 , 4.36486 , 4.33911 , 4.38672 , 4.35319 , 4.41581 , 4.68709 , 5.25832 , 6.50577 , 5.26652 , 5.39547 , 5.19476 , 5.46518 , 5.62934 , 5.1095 , 5.2999 , 5.67409 , 5.49858 , 5.42389 , 5.504 , 5.31651 , 5.39269 , 5.42418 },

    { 5.48177 , 5.32969 , 5.37157 , 5.39433 , 5.55037 , 5.19 , 5.53481 , 5.28595 , 5.53451 , 5.56258 , 5.64761 , 5.50886 , 5.66444 , 5.97257 , 6.46733 , 7.64355 , 6.33066 , 6.55413 , 6.77489 , 6.52854 , 6.68903 , 6.90215 , 6.78808 , 6.88261 , 6.74266 , 6.733 , 6.67561 , 6.88302 , 6.46332 , 6.27923 },

    { 7.44515 , 7.43543 , 7.44724 , 7.62214 , 7.40217 , 7.70899 , 7.44356 , 7.68783 , 7.88456 , 7.71954 , 7.84648 , 8.09682 , 8.07295 , 8.52831 , 8.73395 , 9.86675 , 8.72905 , 8.42843 , 8.9889 , 9.41506 , 8.8164 , 9.1121 , 9.02076 , 9.35131 , 9.09339 , 9.14747 , 8.98791 , 8.99644 , 8.78827 , 8.89997 },

    { 15.3141 , 15.3699 , 14.8072 , 15.5817 , 16.7834 , 16.0866 , 16.7953 , 17.4122 , 17.0883 , 17.6962 , 18.1822 , 18.3855 , 18.0229 , 17.4652 , 16.8176 , 17.1226 , 15.8604 , 16.1167 , 16.4969 , 16.4283 , 16.8649 , 16.8088 , 16.4494 , 16.7188 , 16.9709 , 16.7914 , 17.255 , 16.4888 , 16.3179 , 16.6981 },

    { 20.8543 , 20.6433 , 20.6231 , 21.7353 , 21.9817 , 22.299 , 23.1573 , 24.3929 , 23.013 , 24.0475 , 24.7719 , 24.9448 , 24.8023 , 22.7907 , 23.4438 , 21.2179 , 19.2524 , 20.0071 , 20.1309 , 21.5005 , 19.8266 , 22.4108 , 20.9756 , 21.733 , 22.4184 , 21.1918 , 22.5338 , 22.1481 , 21.5299 , 25.0145  },

    { 26.9621 , 24.5777 , 26.5863 , 27.603 , 27.5768 , 27.154 , 29.6305 , 31.2964 , 30.0699 , 30.8516 , 31.7029 , 32.9043 , 31.4147 , 29.8774 , 29.7229 , 24.9885 , 23.1796 , 23.7512 , 23.9185 , 25.5394 , 24.4471 , 26.2267 , 25.4202 , 26.0496 , 26.3082 , 25.6382 , 26.2608 , 25.7415 , 28.0092 , 29.901 },

  };

  // new HF parameters and eta-et grid 
  // sometimes - too precise, just like it came from printout ...  

  double _meanHDF[maxHDeF][maxHDetaF] = {

    { 7.57591 , 8.33004 , 7.83697 , 7.12823 , 7.96476 , 7.40117 , 7.79405 , 7.55665 , 7.70435 , 7.14182 , 7.67556 , 7.84583 , 7.55453 , 7.62121 , 7.04319 , 6.80797 , 7.48835 , 6.29018 , 5.53254 , 5.8641 },
   
    {  27.6418 , 27.8125 , 26.9753 , 27.0838 , 26.2757 , 27.5768 , 26.6758 , 26.339 , 25.4984 , 26.5209 , 25.4216 , 25.0822 , 26.4129 , 25.7823 , 23.3293 , 25.0636 , 23.0646 , 23.4203 , 20.3477 , 22.1853 },

    { 102.893 , 103.051 , 104.753 , 103.567 , 103.759 , 102.4 , 103.311 , 103.706 , 102.475 , 101.715 , 101.218 , 102.852 , 97.3419 , 94.9526 , 99.2764 , 94.1891 , 93.95 , 95.5811 , 86.8717 , 88.5269 },

    { 328.572 , 321.977 , 327.175 , 325.702 , 322.903 , 328.56 , 319.991 , 321.768 , 320.221 , 316.707 , 313.441 , 312.386 , 310.32 , 312.264 , 304.283 , 296.175 , 292.838 , 296.155 , 280.258 , 280.792 },

    { 787.509 , 785.007 , 781.866 , 775.069 , 774.054 , 782.198 , 774.966 , 767.002 , 766.461 , 756.732 , 763.592 , 756.682 , 748.805 , 743.501 , 732.646 , 725.772 , 721.646 , 710.744 , 684.092 , 671.511 },

    { 1130.51 , 1132.68 , 1122.05 , 1122.26 , 1121.82 , 1134.7 , 1111.66 , 1129.58 , 1112.18 , 1104.95 , 1095.94 , 1075.3 , 1076.28 , 1084.9 , 1070.55 , 1050.28 , 1040.29 , 1008.48 , 989.144 , 962.206 },

    { 3397.39 , 3407.38 , 3406.2 , 3370.96 , 3372.23 , 3360.26 , 3333.91 , 3347.55 , 3315.63 , 3303.05 , 3280.36 , 3256.76 , 3269.86 , 3233.37 , 3177.61 , 3156.6 , 3142.69 , 3048.8 , 3033.91 , 2901.93 }
  
  };


  double _sigmaHDF[maxHDeF][maxHDetaF] = {

    { 7.21428 , 7.2655 , 7.10897 , 6.44593 , 7.4628 , 7.09214 , 7.72143 , 7.04127 , 6.80605 , 6.71848 , 7.10968 , 7.50737 , 6.81337 , 7.03095 , 6.49406 , 6.5828 , 7.39794 , 6.59783 , 5.85046 , 6.42454 },

    { 13.4795 , 13.6844 , 13.1064 , 13.0285 , 11.9962 , 12.9159 , 12.3113 , 12.4975 , 12.3698 , 12.9622 , 12.5086 , 12.8897 , 12.9483 , 13.2713 , 11.9734 , 12.6523 , 11.7811 , 12.2943 , 14.0499 , 12.2862 },

    { 29.7048 , 30.6147 , 31.3521 , 30.8227 , 30.6437 , 30.7686 , 32.0622 , 30.487 , 31.604 , 32.7244 , 29.7642 , 31.98 , 29.7257 , 30.2833 , 30.9487 , 30.0073 , 29.1148 , 28.5399 , 28.8705 , 28.3978 },

    { 53.2783 , 52.044 , 53.5698 , 58.3353 , 53.4832 , 54.8112 , 58.9478 , 58.2511 , 56.576 , 56.0014 , 56.5491 , 57.2649 , 54.2963 , 57.4275 , 61.7037 , 53.4861 , 54.4125 , 54.4004 , 52.5522 , 55.4795 },

    { 99.8769 , 107.17 , 101.501 , 98.6464 , 105.424 , 98.7739 , 100.753 , 105.924 , 98.5924 , 108.963 , 102.736 , 107.325 , 109.969 , 105.851 , 101.558 , 112.298 , 108.995 , 125.931 , 105.68 },

    { 163.667 , 174.034 , 171.254 , 165.645 , 177.574 , 184.851 , 179.787 , 179.29 , 188.247 , 168.282 , 180.037 , 174.934 , 172.627 , 181.443 , 181.828 , 180.122 , 183.794 , 180.219 , 202.188 , 181.48 },

    { 288.224 , 318.123 , 335.645 , 347.205 , 317.727 , 331.226 , 319.015 , 335.482 , 335.65 , 333.37 , 343.217 , 376.658 , 363.492 , 346.877 , 344.02 , 360.171 , 346.01 , 322.359 , 334.337 , 329.984 }

    };


  // e-gamma mean response and sigma in HF 
  double _meanEM[maxEMe][maxEMeta] = 
    { 

      { 8.45992 , 8.63583 , 8.02996 , 8.97919 , 8.82544 , 8.25 , 8.07106 , 8.34085 , 7.94789 , 8.64608 , 8.54919 , 7.93515 , 8.24598 , 8.27851 , 6.99648 , 6.38774 , 1.96863 , 1.99444 , 0.463971 , 1.85597 },

      { 27.0178 , 27.5436 , 27.2402 , 27.033 , 27.3868 , 25.6628 , 27.281 , 28.5243 , 26.2394 , 26.6339 , 25.1889 , 26.7813 , 25.7826 , 25.489 , 25.5799 , 20.935 , 8.29258 , 7.65 , 1.63656 , 6.04511 },

      { 96.8961 , 94.332 , 94.5504 , 98.344 , 96.5179 , 93.4123 , 94.3248 , 93.201 , 93.8986 , 94.2246 , 94.5596 , 91.9108 , 91.6629 , 93.0828 , 90.2524 , 82.5382 , 38.8545 , 52.6627 , 4.11778 , 23.5803 },

      { 314.837 , 306.694 , 314.115 , 305.044 , 305.018 , 308.364 , 306.552 , 302.859 , 299.284 , 300.775 , 303.902 , 297.587 , 298.982 , 297.452 , 288.804 , 277.016 , 221.93 , 230.533 , 14.5807 , 76.9597 },

      { 780.491 , 779.594 , 764.682 , 777.392 , 772.422 , 773.774 , 765.144 , 758.003 , 756.913 , 753.151 , 761.062 , 742.631 , 736.608 , 745.717 , 718.31 , 704.612 , 676.861 , 676.872 , 30.3429 , 231.996 },

      { 1123.48 , 1138.38 , 1139.27 , 1133.34 , 1142.2 , 1120.54 , 1100.99 , 1113.59 , 1092.92 , 1105.28 , 1110.92 , 1079.62 , 1079.63 , 1073.68 , 1066.91 , 1029.93 , 936.019 , 975.08 , 55.2746 , 322.708 },

      { 3418.28 , 3448.06 , 3415.97 , 3346.42 , 3404.7 , 3374.67 , 3372.47 , 3351.11 , 3316 , 3337.46 , 3309.82 , 3247.97 , 3241.04 , 3271.23 , 3161.16 , 3121.28 , 3062.65 , 3175.16 , 126.643 , 982.95 }


    }; 

  double _sigmaEM[maxEMe][maxEMeta] =
    { 
      
      { 7.34058 , 7.08079 , 7.23214 , 8.06263 , 7.30624 , 7.08314 , 7.12469 , 7.18147 , 7.17955 , 7.28179 , 7.56118 , 7.0407 , 7.59106 , 7.49638 , 6.75414 , 7.17367 , 4.70368 , 4.42008 , 2.05961 , 4.8895 },

      {  12.9084 , 12.6178 , 12.4915 , 12.3874 , 13.2901 , 11.8766 , 11.9469 , 14.1489 , 12.9496 , 12.2286 , 12.3921 , 14.045 , 13.4044 , 13.6155 , 14.0631 , 14.6692 , 13.6443 , 13.6275 , 6.82313 , 11.9411 },

      { 33.2929 , 32.7502 , 31.5466 , 34.8465 , 34.189 , 30.3185 , 32.5117 , 35.5203 , 36.7793 , 32.5331 , 32.9382 , 33.3213 , 33.8772 , 34.2328 , 34.0775 , 40.2445 , 47.9594 , 48.9547 , 19.6232 , 43.8259 },

      { 65.6405 , 64.1397 , 62.6258 , 64.9663 , 63.5784 , 68.6845 , 68.383 , 63.4324 , 61.6744 , 61.3449 , 66.4723 , 66.5365 , 71.3094 , 69.2828 , 68.652 , 79.5868 , 123.485 , 123.836 , 59.2157 , 130.709 },

      { 126.574 , 131.893 , 129.359 , 138.861 , 127.105 , 143.23 , 141.569 , 136.978 , 141.678 , 136.704 , 151.253 , 149.417 , 150.685 , 140.786 , 148.325 , 161.185 , 262.263 , 167.322 , 146.05 , 337.333 },

      { 205.354 , 218.242 , 224.552 , 237.143 , 238.286 , 244.237 , 230.449 , 243.406 , 250.26 , 260.09 , 248.435 , 247.354 , 272.659 , 246.76 , 286.364 , 259.995 , 283.664 , 363.005 , 249.778 , 476.116 },

      { 399.332 , 426.213 , 439.176 , 461.66 , 480.137 , 438.204 , 437.622 , 451.579 , 509.787 , 487.307 , 482.618 , 514.53 , 554.844 , 506.243 , 525.057 , 584.281 , 613.339 , 537.544 , 620.743 , 1434. }


    }; 


  // MUON probability histos for bin size = 0.25 GeV (0-10 GeV, 40 bins)  

  double _responseMU[maxMUe][maxMUeta][maxMUbin] = {
   { 
  // 10 GeV
     {1, 0.999009, 0.999009, 0.999009, 0.997027, 0.981169, 0.949455, 0.922696, 0.863231, 0.782953, 0.665015, 0.555996, 0.443013, 0.322101, 0.230922, 0.162537, 0.114965, 0.0812686, 0.0604559, 0.0475719, 0.0376611, 0.0307235, 0.0178394, 0.0138751, 0.0099108, 0.00792864, 0.00792864, 0.00693756, 0.00396432, 0.00297324, 0.00297324, 0.00198216, 0.00198216, 0.00198216, 0.00198216, 0.00198216, 0.00198216, 0.00099108, 0.00099108, 0}, 
     {1, 1, 1, 0.998037, 0.993131, 0.976447, 0.908734, 0.843965, 0.698724, 0.546614, 0.437684, 0.336605, 0.245339, 0.177625, 0.123651, 0.077527, 0.063788, 0.0451423, 0.0353288, 0.0284593, 0.0245339, 0.0215898, 0.0186457, 0.0147203, 0.013739, 0.00981354, 0.00490677, 0.00490677, 0.00392542, 0.00294406, 0.00294406, 0.00196271, 0.00196271, 0.00196271, 0.00196271, 0.000981354, 0.000981354, 0.000981354, 0.000981354, 0}, 
   {1, 1, 1, 1, 0.99854, 0.986861, 0.964964, 0.941606, 0.870073, 0.747445, 0.640876, 0.562044, 0.426277, 0.344526, 0.255474, 0.191241, 0.135766, 0.109489, 0.0729927, 0.0525547, 0.0423358, 0.0291971, 0.0233577, 0.0175182, 0.0131387, 0.010219, 0.00437956, 0.00437956, 0.00437956, 0.00291971, 0.00145985, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
   {1, 1, 1, 1, 1, 1, 0.987603, 0.982782, 0.9573, 0.909091, 0.85124, 0.800275, 0.727961, 0.626722, 0.536501, 0.447658, 0.341598, 0.274793, 0.208678, 0.153581, 0.125344, 0.0971074, 0.0764463, 0.0633609, 0.0495868, 0.0371901, 0.0316804, 0.0213499, 0.0172176, 0.0144628, 0.0110193, 0.00964187, 0.00826446, 0.00757576, 0.00688705, 0.00413223, 0.00344353, 0.00206612, 0.00206612, 0.00206612}, 
    {1, 0.995918, 0.995918, 0.995918, 0.953061, 0.846939, 0.75102, 0.634694, 0.512245, 0.355102, 0.263265, 0.218367, 0.136735, 0.0836735, 0.0612245, 0.0469388, 0.0326531, 0.0265306, 0.0142857, 0.0102041, 0.00408163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0},
   {1, 0.999541, 0.999541, 0.999541, 0.996784, 0.977257, 0.977257, 0.909028, 0.909028, 0.769354, 0.698369, 0.698369, 0.455088, 0.244659, 0.244429, 0.129566, 0.129336, 0.0884448, 0.0443372, 0.0438778, 0.0238916, 0.0238916, 0.0130944, 0.00987824, 0.00735125, 0.00574317, 0.00436481, 0.00229727, 0.00229727, 0.00160809, 0.00160809, 0.00160809, 0.00114863, 0.00114863, 0.000459453, 0.000229727, 0.000229727, 0.000229727, 0.000229727, 0}
   },
   //30 GeV
   {
     {1, 1, 1, 1, 1, 0.997006, 0.981038, 0.963074, 0.928144, 0.852295, 0.761477, 0.662675, 0.538922, 0.399202, 0.299401, 0.234531, 0.190619, 0.154691, 0.125749, 0.0918164, 0.0718563, 0.0638723, 0.0568862, 0.0399202, 0.0319361, 0.0259481, 0.0199601, 0.0159681, 0.0149701, 0.011976, 0.00898204, 0.00798403, 0.00299401, 0.00299401, 0.00299401, 0.00299401, 0.00199601, 0.00199601, 0.000998004, 0.000998004}, 
     {1, 0.998024, 0.998024, 0.998024, 0.996047, 0.982213, 0.927866, 0.885375, 0.791502, 0.601779, 0.477273, 0.383399, 0.29249, 0.205534, 0.177866, 0.126482, 0.100791, 0.0790514, 0.0494071, 0.0375494, 0.0286561, 0.0217391, 0.0217391, 0.0158103, 0.0128458, 0.0118577, 0.0108696, 0.00988142, 0.00889328, 0.00889328, 0.00889328, 0.00790514, 0.00592885, 0.00592885, 0.00395257, 0.00197628, 0.000988142, 0.000988142, 0, 0}, 
     {1, 1, 1, 1, 1, 0.997041, 0.97929, 0.964497, 0.903846, 0.803254, 0.681953, 0.594675, 0.5, 0.360947, 0.298817, 0.214497, 0.150888, 0.130178, 0.0872781, 0.0695266, 0.0591716, 0.0384615, 0.0340237, 0.0251479, 0.0192308, 0.0177515, 0.0177515, 0.0162722, 0.0162722, 0.0133136, 0.010355, 0.00739645, 0.00443787, 0.00443787, 0.00443787, 0.00443787, 0.00295858, 0.00295858, 0, 0}, 
     {1, 1, 1, 1, 1, 0.999306, 0.997917, 0.997222, 0.986111, 0.953472, 0.901389, 0.865972, 0.775, 0.6625, 0.603472, 0.501389, 0.402083, 0.349306, 0.264583, 0.220833, 0.194444, 0.145139, 0.119444, 0.09375, 0.0763889, 0.0625, 0.0472222, 0.0368056, 0.0326389, 0.0291667, 0.0201389, 0.0145833, 0.0145833, 0.0111111, 0.00833333, 0.00694444, 0.00486111, 0.00416667, 0.00208333, 0.000694444}, 
     {1, 0.991803, 0.991803, 0.991803, 0.969262, 0.881148, 0.762295, 0.67623, 0.532787, 0.409836, 0.295082, 0.243852, 0.188525, 0.139344, 0.122951, 0.0778689, 0.0532787, 0.0471311, 0.0368852, 0.0286885, 0.0286885, 0.022541, 0.0184426, 0.0163934, 0.0163934, 0.0122951, 0.0122951, 0.00819672, 0.00819672, 0.00819672, 0.00819672, 0.00614754, 0.00204918, 0.00204918, 0.00204918, 0.00204918, 0, 0, 0, 0}, 
     {1, 0.999304, 0.999304, 0.999304, 0.998609, 0.990958, 0.990958, 0.952469, 0.952237, 0.819615, 0.777417, 0.777417, 0.563877, 0.332251, 0.332251, 0.190587, 0.190587, 0.157663, 0.0987712, 0.0987712, 0.061674, 0.061674, 0.0377927, 0.0352423, 0.0268954, 0.0257361, 0.0234176, 0.0132159, 0.0127521, 0.0106654, 0.0106654, 0.00881057, 0.00394157, 0.00394157, 0.00370971, 0.001623, 0.001623, 0.000927429, 0.000927429, 0.000695572}
   },
   // 100 GeV
   {
     {1, 1, 1, 1, 1, 0.998976, 0.9826, 0.971341, 0.947799, 0.895599, 0.804504, 0.73695, 0.650972, 0.520983, 0.417605, 0.350051, 0.286592, 0.239509, 0.192426, 0.146366, 0.125896, 0.106448, 0.0921187, 0.073695, 0.0593654, 0.0470829, 0.0388946, 0.0286592, 0.0225179, 0.0214944, 0.0184237, 0.0153531, 0.0143296, 0.011259, 0.00921187, 0.00716479, 0.00716479, 0.00511771, 0.00409417, 0.00307062}, 
    {1, 1, 1, 1, 0.999004, 0.989044, 0.949203, 0.922311, 0.850598, 0.724104, 0.600598, 0.510956, 0.432271, 0.334661, 0.293825, 0.217131, 0.184263, 0.164343, 0.123506, 0.10757, 0.0916335, 0.0717131, 0.062749, 0.0507968, 0.0418327, 0.0408367, 0.0328685, 0.0278884, 0.0268924, 0.0229084, 0.0199203, 0.0179283, 0.0149402, 0.0119522, 0.0109562, 0.00996016, 0.00896414, 0.00697211, 0.00498008, 0.00199203},
    {1, 1, 1, 1, 1, 0.994048, 0.985119, 0.974702, 0.934524, 0.827381, 0.708333, 0.639881, 0.5625, 0.450893, 0.392857, 0.316964, 0.258929, 0.235119, 0.162202, 0.130952, 0.120536, 0.0907738, 0.078869, 0.0669643, 0.0625, 0.0565476, 0.047619, 0.0357143, 0.0342262, 0.0282738, 0.0208333, 0.0208333, 0.016369, 0.0133929, 0.0119048, 0.0104167, 0.00446429, 0.00446429, 0.0014881, 0.0014881}, 
    {1, 0.999281, 0.999281, 0.999281, 0.999281, 0.999281, 0.997124, 0.996405, 0.991373, 0.966211, 0.925953, 0.893602, 0.839684, 0.742631, 0.695902, 0.597412, 0.507549, 0.470884, 0.38821, 0.327822, 0.295471, 0.230769, 0.199856, 0.166068, 0.136592, 0.119339, 0.0941769, 0.0754853, 0.069734, 0.0603882, 0.0510424, 0.0409777, 0.0359454, 0.0287563, 0.0201294, 0.0143781, 0.0107836, 0.00790798, 0.00647017, 0.00359454}, 
    {1, 0.997934, 0.997934, 0.997934, 0.987603, 0.92562, 0.834711, 0.77686, 0.654959, 0.518595, 0.409091, 0.353306, 0.299587, 0.216942, 0.206612, 0.161157, 0.130165, 0.123967, 0.0909091, 0.0867769, 0.0681818, 0.053719, 0.0433884, 0.035124, 0.0330579, 0.0330579, 0.0289256, 0.0268595, 0.0227273, 0.0227273, 0.0206612, 0.018595, 0.0123967, 0.0103306, 0.00619835, 0.00619835, 0.00413223, 0.00413223, 0.00206612, 0.00206612},
    {1, 1, 1, 1, 0.999765, 0.995535, 0.9953, 0.970153, 0.969918, 0.881316, 0.853584, 0.853584, 0.670035, 0.441833, 0.441833, 0.286251, 0.286016, 0.251234, 0.171798, 0.171798, 0.114454, 0.114454, 0.0777908, 0.0747356, 0.0571093, 0.0552291, 0.053349, 0.0293772, 0.0293772, 0.026557, 0.0249119, 0.0211516, 0.012691, 0.0115159, 0.0110458, 0.00658049, 0.00634548, 0.00305523, 0.00305523, 0.00188014}
   },
   // 300 GeV
   {
     {1, 1, 1, 1, 1, 0.997817, 0.99345, 0.983624, 0.966157, 0.933406, 0.873362, 0.815502, 0.74345, 0.64083, 0.558952, 0.479258, 0.419214, 0.379913, 0.325328, 0.270742, 0.239083, 0.19869, 0.167031, 0.141921, 0.113537, 0.0971616, 0.0840611, 0.0687773, 0.058952, 0.0436681, 0.0393013, 0.0327511, 0.0305677, 0.0262009, 0.0196507, 0.0163755, 0.0120087, 0.00982533, 0.00873362, 0.00327511}, 
    {1, 1, 1, 1, 1, 0.996865, 0.972832, 0.948798, 0.904911, 0.802508, 0.719958, 0.649948, 0.584117, 0.491118, 0.46604, 0.364681, 0.331243, 0.308255, 0.244514, 0.221526, 0.202717, 0.169279, 0.15256, 0.126437, 0.111808, 0.106583, 0.0909091, 0.0783699, 0.0710554, 0.0574713, 0.0501567, 0.045977, 0.0376176, 0.0344828, 0.030303, 0.0261233, 0.0188088, 0.0135841, 0.0104493, 0.00522466}, 
    {1, 1, 1, 1, 1, 0.998415, 0.993661, 0.988906, 0.977813, 0.935024, 0.858954, 0.812995, 0.762282, 0.662441, 0.622821, 0.505547, 0.445325, 0.426307, 0.329635, 0.29794, 0.275753, 0.242472, 0.22187, 0.191759, 0.171157, 0.158479, 0.141046, 0.125198, 0.120444, 0.110935, 0.0982567, 0.0792393, 0.0586371, 0.0570523, 0.0538827, 0.0459588, 0.0332805, 0.0269414, 0.0174326, 0.0110935}, 
    {1, 1, 1, 1, 1, 1, 0.998436, 0.997654, 0.992963, 0.982017, 0.960125, 0.94527, 0.906177, 0.845192, 0.820954, 0.744332, 0.671618, 0.624707, 0.538702, 0.475371, 0.441751, 0.36982, 0.333855, 0.291634, 0.250977, 0.22674, 0.199375, 0.1681, 0.150899, 0.137608, 0.110242, 0.0992963, 0.0820954, 0.0664582, 0.0578577, 0.0453479, 0.0359656, 0.0289289, 0.0187647, 0.00938233},
    {1, 1, 1, 1, 0.989177, 0.941558, 0.887446, 0.839827, 0.75974, 0.612554, 0.525974, 0.478355, 0.426407, 0.361472, 0.350649, 0.279221, 0.253247, 0.24026, 0.168831, 0.145022, 0.134199, 0.108225, 0.101732, 0.0779221, 0.0606061, 0.0562771, 0.0497835, 0.04329, 0.0411255, 0.034632, 0.034632, 0.0238095, 0.0194805, 0.017316, 0.017316, 0.0108225, 0.0108225, 0.0108225, 0.00649351, 0.00649351},
     {1, 0.99926, 0.99926, 0.99926, 0.99852, 0.995312, 0.995312, 0.984949, 0.984703, 0.925241, 0.915865, 0.915865, 0.798668, 0.630891, 0.630891, 0.484826, 0.484579, 0.455712, 0.356279, 0.356279, 0.268937, 0.268937, 0.196891, 0.191463, 0.154453, 0.149519, 0.146558, 0.0957316, 0.0949914, 0.0885764, 0.0880829, 0.0745127, 0.0478658, 0.0471256, 0.0446583, 0.0264002, 0.0261535, 0.0157908, 0.0152973, 0.00986923}
   }
  };

  // now assign
  for (int i1 = 0; i1 < maxMUe; i1++) { 
    eGridMU[i1] = _eGridMU[i1];
    for (int i2 = 0; i2 < maxMUeta; i2++) {
      for (int i3 = 0; i3 < maxMUbin; i3++) {
	
	responseMU[i1][i2][i3] = _responseMU[i1][i2][i3];

	if(debug) {
	  //cout.width(6);
	  LogDebug("FastCalorimetry") << " responseMU " << i1 << " " << i2 << " " << i3  << " = " 
	       << responseMU[i1][i2][i3] << std::endl;
	}
	
      }
    }
  }
  for (int i2 = 0; i2 < maxMUeta; i2++) {
    etaGridMU[i2] = _etaGridMU[i2];
  }


  // Normalize the response and sigmas to the corresponding energies
  for(int i = 0; i<maxHDeB;  i++) {
    eGridHDB[i] = _eGridHDB[i];
    for(int j = 0; j<maxHDetaB; j++) {
       meanHDB[i][j] =  _meanHDB[i][j] / eGridHDB[i];
      sigmaHDB[i][j] =  _sigmaHDB[i][j] / eGridHDB[i];
    }
  }

  for(int i = 0; i<maxHDeF;  i++) {
    eGridHDF[i] = _eGridHDF[i];
    for(int j = 0; j<maxHDetaF; j++) {
       meanHDF[i][j] =  _meanHDF[i][j] / eGridHDF[i];
      sigmaHDF[i][j] =  _sigmaHDF[i][j] / eGridHDF[i];
    }
  }



  for(int i = 0; i<maxEMe;  i++) {
    eGridEM[i] = _eGridEM[i];
    for(int j = 0; j<maxEMeta; j++) {
       meanEM[i][j] = _meanEM[i][j] / eGridEM[i];
      sigmaEM[i][j] = _sigmaEM[i][j] / eGridEM[i];
    }
  }


}

 
std::pair<double,double> 
HCALResponse::responseHCAL(double energy, double eta, int partype)
{

  int ieta = abs((int)(eta / etaStep)) ;
  int ie = -1;

  mean  = 0.;
  sigma = 0.;

  // e/gamma
  if(partype == 0) {
    ieta -=  maxHDetaB;  // HF starts at eta=3, but resp.vector from index = 0
    if(ieta >= maxEMeta ) ieta = maxEMeta;
    else if(ieta < 0) ieta = 0;
 
    for (int i = 0; i < maxEMe; i++) {
      if(energy < eGridEM[i])  {
	if(i == 0) ie = 0;       
        else  ie = i-1;
        break;
      }
    }
    if(ie == -1) ie = maxEMe - 2;  
    interEM(energy, ie, ieta);
  }  
     
  else { 
    // hadrons
    if(partype == 1) {  
      
      if(ieta > maxHDetaB)  {  // HF
	ieta -= maxHDetaB; 

	if(ieta >= maxHDetaF) ieta = maxHDetaF;
	
	for (int i = 0; i < maxHDeF; i++) {
	  if(energy < eGridHDF[i])  {
	    if(i == 0) ie = 0;     // less than minimal -
	    else  ie = i-1;        // back extrapolation with the 1st interval
	    break;
	  }
	}
	if(ie == -1) ie = maxHDeF - 2;     // more than maximum - 
	interHDF(energy, ie, ieta);         // extrapolation with last interv.
      }
      else { // HB-HE
	if(ieta <0 ) ieta = 0;
	for (int i = 0; i < maxHDeB; i++) {
	  if(energy < eGridHDB[i])  {
	    if(i == 0) ie = 0;     // less than minimal -
	    else  ie = i-1;        // back extrapolation with the 1st interval
	    break;
	  }	
	}
	if(ie == -1) ie = maxHDeB - 2;     // more than maximum - 
	interHDB(energy, ie, ieta);        // extrapolation with last interv.
      }

      // finally apply energy scale correction
      mean  *= eResponseCorrection;
      mean  += eBias;
      sigma *= eResponseCorrection;      
      
    }
    
  }
  
  // muons
  if(partype == 2) { 
    
    ieta = maxMUeta;
    for(int i = 0; i < maxMUeta; i++) {
      if(fabs(eta) < etaGridMU[i]) {
	ieta = i;  
	break;
      }       
    }     
    
    if(ieta < 0) ieta = 0;
    if(ieta < maxMUeta) {  // HB-HE
      
      for (int i = 0; i < maxMUe; i++) {
	if(energy < eGridMU[i])  {
	  if(i == 0) ie = 0;     // less than minimal -
	  else  ie = i-1;        // back extrapolation with the first interval
	  break;
	}
	
	if(ie == -1) ie = maxMUe - 2;     // more than maximum - 
	interMU(energy, ie, ieta);         // extrapolation using the last interv
	if(mean > energy) mean = energy;  
	
      }
    }
  }
  
  // debugging
  if(debug) {
    //  cout.width(6);
  LogDebug("FastCalorimetry") << std::endl
       << " HCALResponse::responseHCAL, partype = " <<  partype 
       << " E, eta = " << energy << " " << eta  
       << "  mean & sigma = " << mean   << " " << sigma << std::endl;

  }

  return std::pair<double,double>(mean,sigma);

}

void HCALResponse::interMU(double e, int ie, int ieta)
{

  double x = random->flatShoot();

  int bin1 = maxMUbin;
  for(int i = 0; i < maxMUbin; i++) {
    if(x > responseMU[ie][ieta][i]) {
      bin1 = i-1;
      break;
    }
  }
  int bin2 = maxMUbin;
  for(int i = 0; i < maxMUbin; i++) {
    if(x > responseMU[ie+1][ieta][i]) {
      bin2 = i-1;
      break;
    }
  }
   
  double x1 = eGridMU[ie];
  double x2 = eGridMU[ie+1];
  double y1 = (bin1 + random->flatShoot()) * muStep;   
  double y2 = (bin2 + random->flatShoot()) * muStep;   

  if(debug) {
    //  cout.width(6);
  LogDebug("FastCalorimetry") << std::endl
       << " HCALResponse::interMU  " << std::endl
       << " x, x1-x2, y1-y2 = " 
       << e << ", " << x1 <<"-" << x2 << " " << y1 <<"-" << y2 << std::endl; 
  
  }


  mean  = y1 + (y2-y1) * (e - x1)/(x2 - x1);
  sigma = 0.;

  if(debug) {
    //cout.width(6);
  LogDebug("FastCalorimetry") << std::endl
       << " HCALResponse::interMU " << std::endl
       << " e, ie, ieta = " << e << " " << ie << " " << ieta << std::endl
       << " response  = " << mean << std::endl; 
  }

}

void HCALResponse::interHDB(double e, int ie, int ieta)
{
  double y1 = meanHDB[ie][ieta]; 
  double y2 = meanHDB[ie+1][ieta]; 
  double x1 = eGridHDB[ie];
  double x2 = eGridHDB[ie+1];

  if(debug) {
    //  cout.width(6);
  LogDebug("FastCalorimetry") << std::endl
       << " HCALResponse::interHDB mean " << std::endl
       << " x, x1-x2, y1-y2 = " 
       << e << ", " << x1 <<"-" << x2 << " " << y1 <<"-" << y2 << std::endl; 
  
  }
  
  mean =  e * (y1 + (y2 - y1) * (e - x1)/(x2 - x1));      
  
  y1 = sigmaHDB[ie][ieta]; 
  y2 = sigmaHDB[ie+1][ieta]; 
  
  if(debug) {
    //  cout.width(6);
  LogDebug("FastCalorimetry") << std::endl
       << " HCALResponse::interHDB sigma" << std::endl
       << " x, x1-x2, y1-y2 = " 
       << e << ", " << x1 <<"-" << x2 << " " << y1 <<"-" << y2 << std::endl; 
  
  }
 
  sigma = e * (y1 + (y2 - y1) * (e - x1)/(x2 - x1));      


  if(debug) {
    //cout.width(6);
  LogDebug("FastCalorimetry") << std::endl
       << " HCALResponse::interHDB " << std::endl
       << " e, ie, ieta = " << e << " " << ie << " " << ieta << std::endl
			      << " mean, sigma  = " << mean << " " << sigma << std::endl ;
  }

}


void HCALResponse::interHDF(double e, int ie, int ieta)
{
  double y1 = meanHDF[ie][ieta]; 
  double y2 = meanHDF[ie+1][ieta]; 
  double x1 = eGridHDF[ie];
  double x2 = eGridHDF[ie+1];

  if(debug) {
    //  cout.width(6);
  LogDebug("FastCalorimetry") << std::endl
       << " HCALResponse::interHDF mean " << std::endl
       << " x, x1-x2, y1-y2 = " 
       << e << ", " << x1 <<"-" << x2 << " " << y1 <<"-" << y2 << std::endl;
  
  }
  
  mean =  e * (y1 + (y2 - y1) * (e - x1)/(x2 - x1));      
  
  y1 = sigmaHDF[ie][ieta]; 
  y2 = sigmaHDF[ie+1][ieta]; 
  
  if(debug) {
    //  cout.width(6);
  LogDebug("FastCalorimetry") << std::endl
       << " HCALResponse::interHDF sigma" << std::endl
       << " x, x1-x2, y1-y2 = " 
       << e << ", " << x1 <<"-" << x2 << " " << y1 <<"-" << y2 << std::endl; 
  
  }
 
  sigma = e * (y1 + (y2 - y1) * (e - x1)/(x2 - x1));      


  if(debug) {
    //cout.width(6);
  LogDebug("FastCalorimetry") << std::endl
       << " HCALResponse::interHDF " << std::endl
       << " et, ie, ieta = " << e << " " << ie << " " << ieta << std::endl
       << " mean, sigma  = " << mean << " " << sigma << std::endl; 
  }

}

void HCALResponse::interEM(double e, int ie, int ieta)
{ 
  double y1 = meanEM[ie][ieta]; 
  double y2 = meanEM[ie+1][ieta]; 
  double x1 = eGridEM[ie];
  double x2 = eGridEM[ie+1];
  
  if(debug) {
    //  cout.width(6);
  LogDebug("FastCalorimetry") << std::endl
       << " HCALResponse::interEM mean " << std::endl
       << " x, x1-x2, y1-y2 = " 
       << e << ", " << x1 <<"-" << x2 << " " << y1 <<"-" << y2 << std::endl; 
  
  }

  mean =  e * (y1 + (y2 - y1) * (e - x1)/(x2 - x1));      
  
  y1 = sigmaEM[ie][ieta]; 
  y2 = sigmaEM[ie+1][ieta]; 
  
  if(debug) {
    //  cout.width(6);
  LogDebug("FastCalorimetry") << std::endl
       << " HCALResponse::interEM sigma" << std::endl
       << " x, x1-x2, y1-y2 = " 
       << e << ", " << x1 <<"-" << x2 << " " << y1 <<"-" << y2 << std::endl; 
  
  }

  sigma = e * (y1 + (y2 - y1) * (e - x1)/(x2 - x1));      
}



// Old parametrization for hadrons
double HCALResponse::getHCALEnergyResolution(double e, int hit){
  
   if(hit==hcforward) 
     return e *sqrt( RespPar[VFCAL][1][0]*RespPar[VFCAL][1][0] / e + 
		     RespPar[VFCAL][1][1]*RespPar[VFCAL][1][1] );
   else
     return  e * sqrt( RespPar[HCAL][hit][0]*RespPar[HCAL][hit][0]/(e)
                     + RespPar[HCAL][hit][1]*RespPar[HCAL][hit][1]);   

}

// Old parameterization of the calo response to hadrons
double HCALResponse::getHCALEnergyResponse(double e, int hit){

  double s = eResponseScale[hit];
  double n = eResponseExponent;
  double p = eResponsePlateau[hit];
  double c = eResponseCoefficient;

  double response = e * p / (1+c*exp(n * log(s/e)));

  if(response<0.) response = 0.;

  return response;
}

// old parameterization of the HF response to electrons
double HCALResponse::getHFEnergyResolution(double EGen)
{
    return EGen *sqrt( RespPar[VFCAL][0][0]*RespPar[VFCAL][0][0] / EGen + 
		       RespPar[VFCAL][0][1]*RespPar[VFCAL][0][1] );
}  


#ifdef IJKLMMNOP // This stuff was moved to Calorimetry.cfi
// default values for old prameterizations
const double HCALResponse::RespByDefault[3][2][3] = {
//Numbers taken from Calorimetry TDR's.
  //ECAL - dummy, the numbers are in  FASTEnergyReconstructor.cc
  //Stochastic Constant Noise 
 {{3*0.},   //barrel
  {3*0.}}, //endcap
  //HCAL
 {{1.22,       0.05,       0},    //barrel
  {1.30,       0.05,       0}},   //endcap (R. Harris - 17-oct-2004)
  //VFCAL
 {{1.82,       0.09,    0},  //hadrons
  {1.38,       0.05,    0}}  //electrons & photons
};
#endif
