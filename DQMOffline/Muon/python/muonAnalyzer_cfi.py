import FWCore.ParameterSet.Config as cms

from RecoMuon.TrackingTools.MuonServiceProxy_cff import *

# MuonAnalyzer
muonAnalyzer = cms.EDAnalyzer("MuonAnalyzer",
    MuonServiceProxy,
    OutputMEsInRootFile = cms.bool(False),
    trackSegmentsAnalysis = cms.PSet(
        phiMin = cms.double(-3.2),
        ptBin = cms.int32(200),
        SegmentsTrackAssociatorParameters = cms.PSet(
            segmentsDt = cms.untracked.InputTag("dt4DSegments"),
            SelectedSegments = cms.untracked.InputTag("SelectedSegments"),
            segmentsCSC = cms.untracked.InputTag("cscSegments")
        ),
        etaBin = cms.int32(100),
        etaMin = cms.double(-3.0),
        ptMin = cms.double(0.0),
        phiBin = cms.int32(100),
        ptMax = cms.double(200.0),
        etaMax = cms.double(3.0),
        phiMax = cms.double(3.2)
    ),
    GlobalMuTrackCollection = cms.InputTag("globalMuons"),
    SeedCollection = cms.InputTag("MuonSeed"),
    muonRecoAnalysis = cms.PSet(
        thetaMin = cms.double(0.0),
        phiMin = cms.double(-3.2),
        ptBin = cms.int32(500),
        thetaBin = cms.int32(100),
        rhBin = cms.int32(25),
        pResMin = cms.double(-0.01),
        pResMax = cms.double(0.01),
        thetaMax = cms.double(3.2),
        pResBin = cms.int32(50),
        rhMin = cms.double(0.0),
        pMin = cms.double(0.0),
        rhMax = cms.double(1.001),
        etaMin = cms.double(-3.0),
        etaBin = cms.int32(100),
        phiBin = cms.int32(100),
        pBin = cms.int32(500),
        ptMin = cms.double(0.0),
        ptMax = cms.double(500.0),
        etaMax = cms.double(3.0),
        pMax = cms.double(500.0),
        phiMax = cms.double(3.2)
    ),
    DoMuonSeedAnalysis = cms.untracked.bool(True),
    DoTrackSegmentsAnalysis = cms.untracked.bool(True),
    seedsAnalysis = cms.PSet(
        seedPxyzMin = cms.double(-50.0),
        pxyzErrMin = cms.double(-100.0),
        phiErrMax = cms.double(3.2),
        pxyzErrMax = cms.double(100.0),
        RecHitBin = cms.int32(25),
        etaErrMin = cms.double(0.0),
        seedPtMin = cms.double(0.0),
        seedPxyzBin = cms.int32(100),
        ThetaBin = cms.int32(100),
        RecHitMin = cms.double(0.0),
        EtaMin = cms.double(-3.0),
        pErrBin = cms.int32(200),
        phiErrBin = cms.int32(160),
        EtaMax = cms.double(3.0),
        etaErrBin = cms.int32(200),
        seedPxyzMax = cms.double(50.0),
        ThetaMin = cms.double(0.0),
        PhiMin = cms.double(-3.2),
        pxyzErrBin = cms.int32(100),
        RecHitMax = cms.double(25.0),
        ThetaMax = cms.double(3.2),
        pErrMin = cms.double(0.0),
        EtaBin = cms.int32(100),
        pErrMax = cms.double(200.0),
        seedPtMax = cms.double(200.0),
        seedPtBin = cms.int32(1000),
        phiErrMin = cms.double(0.0),
        PhiBin = cms.int32(100),
        debug = cms.bool(False),
        etaErrMax = cms.double(0.5),
        PhiMax = cms.double(3.2)
    ),
    OutputFileName = cms.string('MuonMonitoring.root'),
    DoMuonEnergyAnalysis = cms.untracked.bool(True),
    STAMuTrackCollection = cms.InputTag("standAloneMuons"),
    DoMuonRecoAnalysis = cms.untracked.bool(True),
    MuonCollection = cms.InputTag("muons"),
    muonEnergyAnalysis = cms.PSet(
        AlgoName = cms.string('muons'),
        hadS9SizeMin = cms.double(0.0),
        emSizeMin = cms.double(0.0),
        emS9SizeBin = cms.int32(100),
        emS9SizeMin = cms.double(0.0),
        hoSizeMax = cms.double(4.0),
        hoS9SizeBin = cms.int32(100),
        hoSizeMin = cms.double(0.0),
        emSizeMax = cms.double(4.0),
        hadS9SizeMax = cms.double(10.0),
        hoS9SizeMin = cms.double(0.0),
        hadSizeMin = cms.double(0.0),
        emSizeBin = cms.int32(100),
        hadS9SizeBin = cms.int32(200),
        debug = cms.bool(False),
        emS9SizeMax = cms.double(4.0),
        hoS9SizeMax = cms.double(4.0),
        hadSizeMax = cms.double(10.0),
        hoSizeBin = cms.int32(100),
        hadSizeBin = cms.int32(200)
    )
)



