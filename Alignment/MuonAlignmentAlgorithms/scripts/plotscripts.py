import ROOT
from math import *
execfile("/home/jpivarski/bin/tdrstyle.py")

def mean(xlist):
  s, n = 0., 0.
  for x in xlist:
    s += x
    n += 1.
  return s/n

def rms(xlist):
  s2, n = 0., 0.
  for x in xlist:
    s2 += x**2
    n += 1.
  return math.sqrt(s2/n)

def stdev(xlist):
  s, s2, n = 0., 0., 0.
  for x in xlist:
    s += x
    s2 += x**2
    n += 1.
  return math.sqrt(s2/n - (s/n)**2)

def wheelm2only(dt, wheel, station, sector): return dt == "DT" and wheel == -2
def wheelm1only(dt, wheel, station, sector): return dt == "DT" and wheel == -1
def wheel0only(dt, wheel, station, sector): return dt == "DT" and wheel == 0
def wheelp1only(dt, wheel, station, sector): return dt == "DT" and wheel == 1
def wheelp2only(dt, wheel, station, sector): return dt == "DT" and wheel == 2

signConventions = {
("DT", -2, 1, 1): (1, -1, -1, 432.946, 0.0904811, -533.35),
("DT", -2, 1, 2): (1, -1, -1, 432.946, 0.61408, -533.35),
("DT", -2, 1, 3): (1, -1, -1, 432.946, 1.13768, -533.35),
("DT", -2, 1, 4): (1, -1, -1, 432.946, 1.66128, -533.35),
("DT", -2, 1, 5): (1, -1, -1, 432.946, 2.18488, -533.35),
("DT", -2, 1, 6): (1, -1, -1, 432.946, 2.70847, -533.35),
("DT", -2, 1, 7): (1, -1, -1, 432.946, -3.05111, -533.35),
("DT", -2, 1, 8): (1, -1, -1, 432.946, -2.52751, -533.35),
("DT", -2, 1, 9): (1, -1, -1, 432.946, -2.00391, -533.35),
("DT", -2, 1, 10): (1, -1, -1, 432.946, -1.48032, -533.35),
("DT", -2, 1, 11): (1, -1, -1, 432.946, -0.956716, -533.35),
("DT", -2, 1, 12): (1, -1, -1, 432.946, -0.433118, -533.35),
("DT", -2, 2, 1): (1, -1, -1, 512.923, -0.0417923, -533.35),
("DT", -2, 2, 2): (1, -1, -1, 512.923, 0.481806, -533.35),
("DT", -2, 2, 3): (1, -1, -1, 512.923, 1.00541, -533.35),
("DT", -2, 2, 4): (1, -1, -1, 512.923, 1.529, -533.35),
("DT", -2, 2, 5): (1, -1, -1, 512.923, 2.0526, -533.35),
("DT", -2, 2, 6): (1, -1, -1, 512.923, 2.5762, -533.35),
("DT", -2, 2, 7): (1, -1, -1, 512.923, 3.0998, -533.35),
("DT", -2, 2, 8): (1, -1, -1, 512.923, -2.65979, -533.35),
("DT", -2, 2, 9): (1, -1, -1, 512.923, -2.13619, -533.35),
("DT", -2, 2, 10): (1, -1, -1, 512.923, -1.61259, -533.35),
("DT", -2, 2, 11): (1, -1, -1, 512.923, -1.08899, -533.35),
("DT", -2, 2, 12): (1, -1, -1, 512.923, -0.565391, -533.35),
("DT", -2, 3, 1): (1, -1, -1, 618.269, 0.0357202, -533.35),
("DT", -2, 3, 2): (1, -1, -1, 618.269, 0.559319, -533.35),
("DT", -2, 3, 3): (1, -1, -1, 618.269, 1.08292, -533.35),
("DT", -2, 3, 4): (1, -1, -1, 618.269, 1.60652, -533.35),
("DT", -2, 3, 5): (1, -1, -1, 618.269, 2.13012, -533.35),
("DT", -2, 3, 6): (1, -1, -1, 618.269, 2.65371, -533.35),
("DT", -2, 3, 7): (1, -1, -1, 618.269, -3.10587, -533.35),
("DT", -2, 3, 8): (1, -1, -1, 618.269, -2.58227, -533.35),
("DT", -2, 3, 9): (1, -1, -1, 618.269, -2.05868, -533.35),
("DT", -2, 3, 10): (1, -1, -1, 618.269, -1.53508, -533.35),
("DT", -2, 3, 11): (1, -1, -1, 618.269, -1.01148, -533.35),
("DT", -2, 3, 12): (1, -1, -1, 618.269, -0.487879, -533.35),
("DT", -2, 4, 1): (1, -1, -1, 726.425, -0.131007, -533.35),
("DT", -2, 4, 2): (1, -1, -1, 726.425, 0.392591, -533.35),
("DT", -2, 4, 3): (1, -1, -1, 726.425, 0.91619, -533.35),
("DT", -2, 4, 4): (1, -1, -1, 737.922, 1.35119, -533.35),
("DT", -2, 4, 13): (1, -1, -1, 737.922, 1.7904, -533.35),
("DT", -2, 4, 5): (1, -1, -1, 726.425, 2.2254, -533.35),
("DT", -2, 4, 6): (1, -1, -1, 726.425, 2.749, -533.35),
("DT", -2, 4, 7): (1, -1, -1, 726.425, -3.01059, -533.35),
("DT", -2, 4, 8): (1, -1, -1, 725.376, -2.49846, -533.35),
("DT", -2, 4, 9): (1, -1, -1, 722.674, -2.08612, -533.35),
("DT", -2, 4, 10): (1, -1, -1, 733.072, -1.75847, -533.35),
("DT", -2, 4, 14): (1, -1, -1, 733.072, -1.38313, -533.35),
("DT", -2, 4, 11): (1, -1, -1, 722.674, -1.05548, -533.35),
("DT", -2, 4, 12): (1, -1, -1, 725.376, -0.643132, -533.35),
("DT", -1, 1, 1): (1, -1, -1, 432.946, 0.0904811, -267.75),
("DT", -1, 1, 2): (1, -1, -1, 432.946, 0.61408, -267.75),
("DT", -1, 1, 3): (1, -1, -1, 432.946, 1.13768, -287.25),
("DT", -1, 1, 4): (1, -1, -1, 432.946, 1.66128, -267.75),
("DT", -1, 1, 5): (1, -1, -1, 432.946, 2.18488, -267.75),
("DT", -1, 1, 6): (1, -1, -1, 432.946, 2.70847, -267.75),
("DT", -1, 1, 7): (1, -1, -1, 432.946, -3.05111, -267.75),
("DT", -1, 1, 8): (1, -1, -1, 432.946, -2.52751, -267.75),
("DT", -1, 1, 9): (1, -1, -1, 432.946, -2.00391, -267.75),
("DT", -1, 1, 10): (1, -1, -1, 432.946, -1.48032, -267.75),
("DT", -1, 1, 11): (1, -1, -1, 432.946, -0.956716, -267.75),
("DT", -1, 1, 12): (1, -1, -1, 432.946, -0.433118, -267.75),
("DT", -1, 2, 1): (1, -1, -1, 512.923, -0.0417923, -267.75),
("DT", -1, 2, 2): (1, -1, -1, 512.923, 0.481806, -267.75),
("DT", -1, 2, 3): (1, -1, -1, 512.923, 1.00541, -287.25),
("DT", -1, 2, 4): (1, -1, -1, 512.923, 1.529, -267.75),
("DT", -1, 2, 5): (1, -1, -1, 512.923, 2.0526, -267.75),
("DT", -1, 2, 6): (1, -1, -1, 512.923, 2.5762, -267.75),
("DT", -1, 2, 7): (1, -1, -1, 512.923, 3.0998, -267.75),
("DT", -1, 2, 8): (1, -1, -1, 512.923, -2.65979, -267.75),
("DT", -1, 2, 9): (1, -1, -1, 512.923, -2.13619, -267.75),
("DT", -1, 2, 10): (1, -1, -1, 512.923, -1.61259, -267.75),
("DT", -1, 2, 11): (1, -1, -1, 512.923, -1.08899, -267.75),
("DT", -1, 2, 12): (1, -1, -1, 512.923, -0.565391, -267.75),
("DT", -1, 3, 1): (1, -1, -1, 618.269, 0.0357202, -267.75),
("DT", -1, 3, 2): (1, -1, -1, 618.269, 0.559319, -267.75),
("DT", -1, 3, 3): (1, -1, -1, 618.269, 1.08292, -287.25),
("DT", -1, 3, 4): (1, -1, -1, 618.269, 1.60652, -267.75),
("DT", -1, 3, 5): (1, -1, -1, 618.269, 2.13012, -267.75),
("DT", -1, 3, 6): (1, -1, -1, 618.269, 2.65371, -267.75),
("DT", -1, 3, 7): (1, -1, -1, 618.269, -3.10587, -267.75),
("DT", -1, 3, 8): (1, -1, -1, 618.269, -2.58227, -267.75),
("DT", -1, 3, 9): (1, -1, -1, 618.269, -2.05868, -267.75),
("DT", -1, 3, 10): (1, -1, -1, 618.269, -1.53508, -267.75),
("DT", -1, 3, 11): (1, -1, -1, 618.269, -1.01148, -267.75),
("DT", -1, 3, 12): (1, -1, -1, 618.269, -0.487879, -267.75),
("DT", -1, 4, 1): (1, -1, -1, 726.425, -0.131007, -267.75),
("DT", -1, 4, 2): (1, -1, -1, 726.425, 0.392591, -267.75),
("DT", -1, 4, 3): (1, -1, -1, 726.425, 0.91619, -287.25),
("DT", -1, 4, 4): (1, -1, -1, 737.922, 1.35119, -267.75),
("DT", -1, 4, 13): (1, -1, -1, 737.922, 1.7904, -267.75),
("DT", -1, 4, 5): (1, -1, -1, 726.425, 2.2254, -267.75),
("DT", -1, 4, 6): (1, -1, -1, 726.425, 2.749, -267.75),
("DT", -1, 4, 7): (1, -1, -1, 726.425, -3.01059, -267.75),
("DT", -1, 4, 8): (1, -1, -1, 725.376, -2.49846, -267.75),
("DT", -1, 4, 9): (1, -1, -1, 722.674, -2.08612, -267.75),
("DT", -1, 4, 10): (1, -1, -1, 733.072, -1.75847, -267.75),
("DT", -1, 4, 14): (1, -1, -1, 733.072, -1.38313, -267.75),
("DT", -1, 4, 11): (1, -1, -1, 722.674, -1.05548, -267.75),
("DT", -1, 4, 12): (1, -1, -1, 725.376, -0.643132, -267.75),
("DT", 0, 1, 1): (1, -1, -1, 432.946, 0.0904811, 0.85),
("DT", 0, 1, 5): (1, -1, -1, 432.946, 2.18488, 0.85),
("DT", 0, 1, 9): (1, -1, -1, 432.946, -2.00391, 0.85),
("DT", 0, 1, 2): (-1, 1, -1, 432.946, 0.61408, -0.85),
("DT", 0, 1, 6): (-1, 1, -1, 432.946, 2.70847, -0.85),
("DT", 0, 1, 10): (-1, 1, -1, 432.946, -1.48032, -0.85),
("DT", 0, 1, 3): (-1, 1, -1, 432.946, 1.13768, -0.85),
("DT", 0, 1, 7): (-1, 1, -1, 432.946, -3.05111, -0.85),
("DT", 0, 1, 11): (-1, 1, -1, 432.946, -0.956716, -0.85),
("DT", 0, 1, 4): (1, -1, -1, 432.946, 1.66128, 0.85),
("DT", 0, 1, 8): (1, -1, -1, 432.946, -2.52751, 0.85),
("DT", 0, 1, 12): (1, -1, -1, 432.946, -0.433118, 0.85),
("DT", 0, 2, 1): (1, -1, -1, 512.923, -0.0417923, 0.85),
("DT", 0, 2, 5): (1, -1, -1, 512.923, 2.0526, 0.85),
("DT", 0, 2, 9): (1, -1, -1, 512.923, -2.13619, 0.85),
("DT", 0, 2, 2): (-1, 1, -1, 512.923, 0.481806, -0.85),
("DT", 0, 2, 6): (-1, 1, -1, 512.923, 2.5762, -0.85),
("DT", 0, 2, 10): (-1, 1, -1, 512.923, -1.61259, -0.85),
("DT", 0, 2, 3): (-1, 1, -1, 512.923, 1.00541, -0.85),
("DT", 0, 2, 7): (-1, 1, -1, 512.923, 3.0998, -0.85),
("DT", 0, 2, 11): (-1, 1, -1, 512.923, -1.08899, -0.85),
("DT", 0, 2, 4): (1, -1, -1, 512.923, 1.529, 0.85),
("DT", 0, 2, 8): (1, -1, -1, 512.923, -2.65979, 0.85),
("DT", 0, 2, 12): (1, -1, -1, 512.923, -0.565391, 0.85),
("DT", 0, 3, 1): (1, -1, -1, 618.269, 0.0357202, 0.85),
("DT", 0, 3, 5): (1, -1, -1, 618.269, 2.13012, 0.85),
("DT", 0, 3, 9): (1, -1, -1, 618.269, -2.05868, 0.85),
("DT", 0, 3, 2): (-1, 1, -1, 618.269, 0.559319, -0.85),
("DT", 0, 3, 6): (-1, 1, -1, 618.269, 2.65371, -0.85),
("DT", 0, 3, 10): (-1, 1, -1, 618.269, -1.53508, -0.85),
("DT", 0, 3, 3): (-1, 1, -1, 618.269, 1.08292, -0.85),
("DT", 0, 3, 7): (-1, 1, -1, 618.269, -3.10587, -0.85),
("DT", 0, 3, 11): (-1, 1, -1, 618.269, -1.01148, -0.85),
("DT", 0, 3, 4): (1, -1, -1, 618.269, 1.60652, 0.85),
("DT", 0, 3, 8): (1, -1, -1, 618.269, -2.58227, 0.85),
("DT", 0, 3, 12): (1, -1, -1, 618.269, -0.487879, 0.85),
("DT", 0, 4, 1): (1, -1, -1, 726.425, -0.131007, 0.85),
("DT", 0, 4, 2): (-1, 1, -1, 726.425, 0.392591, -0.85),
("DT", 0, 4, 3): (-1, 1, -1, 726.425, 0.91619, -0.85),
("DT", 0, 4, 4): (1, -1, -1, 737.922, 1.35119, 0.85),
("DT", 0, 4, 13): (1, -1, -1, 737.922, 1.7904, 0.85),
("DT", 0, 4, 5): (1, -1, -1, 726.425, 2.2254, 0.85),
("DT", 0, 4, 6): (-1, 1, -1, 726.425, 2.749, -0.85),
("DT", 0, 4, 7): (-1, 1, -1, 726.425, -3.01059, -0.85),
("DT", 0, 4, 8): (1, -1, -1, 725.376, -2.49846, 0.85),
("DT", 0, 4, 9): (1, -1, -1, 722.674, -2.08612, 0.85),
("DT", 0, 4, 10): (-1, 1, -1, 733.072, -1.75847, -0.85),
("DT", 0, 4, 14): (-1, 1, -1, 733.072, -1.38313, -0.85),
("DT", 0, 4, 11): (-1, 1, -1, 722.674, -1.05548, -0.85),
("DT", 0, 4, 12): (1, -1, -1, 725.376, -0.643132, 0.85),
("DT", 1, 1, 1): (-1, 1, -1, 432.946, 0.0904811, 267.75),
("DT", 1, 1, 2): (-1, 1, -1, 432.946, 0.61408, 267.75),
("DT", 1, 1, 3): (-1, 1, -1, 432.946, 1.13768, 267.75),
("DT", 1, 1, 4): (-1, 1, -1, 432.946, 1.66128, 287.25),
("DT", 1, 1, 5): (-1, 1, -1, 432.946, 2.18488, 267.75),
("DT", 1, 1, 6): (-1, 1, -1, 432.946, 2.70847, 267.75),
("DT", 1, 1, 7): (-1, 1, -1, 432.946, -3.05111, 267.75),
("DT", 1, 1, 8): (-1, 1, -1, 432.946, -2.52751, 267.75),
("DT", 1, 1, 9): (-1, 1, -1, 432.946, -2.00391, 267.75),
("DT", 1, 1, 10): (-1, 1, -1, 432.946, -1.48032, 267.75),
("DT", 1, 1, 11): (-1, 1, -1, 432.946, -0.956716, 267.75),
("DT", 1, 1, 12): (-1, 1, -1, 432.946, -0.433118, 267.75),
("DT", 1, 2, 1): (-1, 1, -1, 512.923, -0.0417923, 267.75),
("DT", 1, 2, 2): (-1, 1, -1, 512.923, 0.481806, 267.75),
("DT", 1, 2, 3): (-1, 1, -1, 512.923, 1.00541, 267.75),
("DT", 1, 2, 4): (-1, 1, -1, 512.923, 1.529, 287.25),
("DT", 1, 2, 5): (-1, 1, -1, 512.923, 2.0526, 267.75),
("DT", 1, 2, 6): (-1, 1, -1, 512.923, 2.5762, 267.75),
("DT", 1, 2, 7): (-1, 1, -1, 512.923, 3.0998, 267.75),
("DT", 1, 2, 8): (-1, 1, -1, 512.923, -2.65979, 267.75),
("DT", 1, 2, 9): (-1, 1, -1, 512.923, -2.13619, 267.75),
("DT", 1, 2, 10): (-1, 1, -1, 512.923, -1.61259, 267.75),
("DT", 1, 2, 11): (-1, 1, -1, 512.923, -1.08899, 267.75),
("DT", 1, 2, 12): (-1, 1, -1, 512.923, -0.565391, 267.75),
("DT", 1, 3, 1): (-1, 1, -1, 618.269, 0.0357202, 267.75),
("DT", 1, 3, 2): (-1, 1, -1, 618.269, 0.559319, 267.75),
("DT", 1, 3, 3): (-1, 1, -1, 618.269, 1.08292, 267.75),
("DT", 1, 3, 4): (-1, 1, -1, 618.269, 1.60652, 287.25),
("DT", 1, 3, 5): (-1, 1, -1, 618.269, 2.13012, 267.75),
("DT", 1, 3, 6): (-1, 1, -1, 618.269, 2.65371, 267.75),
("DT", 1, 3, 7): (-1, 1, -1, 618.269, -3.10587, 267.75),
("DT", 1, 3, 8): (-1, 1, -1, 618.269, -2.58227, 267.75),
("DT", 1, 3, 9): (-1, 1, -1, 618.269, -2.05868, 267.75),
("DT", 1, 3, 10): (-1, 1, -1, 618.269, -1.53508, 267.75),
("DT", 1, 3, 11): (-1, 1, -1, 618.269, -1.01148, 267.75),
("DT", 1, 3, 12): (-1, 1, -1, 618.269, -0.487879, 267.75),
("DT", 1, 4, 1): (-1, 1, -1, 726.425, -0.131007, 267.75),
("DT", 1, 4, 2): (-1, 1, -1, 726.425, 0.392591, 267.75),
("DT", 1, 4, 3): (-1, 1, -1, 726.425, 0.91619, 267.75),
("DT", 1, 4, 4): (-1, 1, -1, 737.922, 1.35119, 287.25),
("DT", 1, 4, 13): (-1, 1, -1, 737.922, 1.7904, 287.25),
("DT", 1, 4, 5): (-1, 1, -1, 726.425, 2.2254, 267.75),
("DT", 1, 4, 6): (-1, 1, -1, 726.425, 2.749, 267.75),
("DT", 1, 4, 7): (-1, 1, -1, 726.425, -3.01059, 267.75),
("DT", 1, 4, 8): (-1, 1, -1, 725.376, -2.49846, 267.75),
("DT", 1, 4, 9): (-1, 1, -1, 722.674, -2.08612, 267.75),
("DT", 1, 4, 10): (-1, 1, -1, 733.072, -1.75847, 267.75),
("DT", 1, 4, 14): (-1, 1, -1, 733.072, -1.38313, 267.75),
("DT", 1, 4, 11): (-1, 1, -1, 722.674, -1.05548, 267.75),
("DT", 1, 4, 12): (-1, 1, -1, 725.376, -0.643132, 267.75),
("DT", 2, 1, 1): (-1, 1, -1, 432.946, 0.0904811, 533.35),
("DT", 2, 1, 2): (-1, 1, -1, 432.946, 0.61408, 533.35),
("DT", 2, 1, 3): (-1, 1, -1, 432.946, 1.13768, 533.35),
("DT", 2, 1, 4): (-1, 1, -1, 432.946, 1.66128, 533.35),
("DT", 2, 1, 5): (-1, 1, -1, 432.946, 2.18488, 533.35),
("DT", 2, 1, 6): (-1, 1, -1, 432.946, 2.70847, 533.35),
("DT", 2, 1, 7): (-1, 1, -1, 432.946, -3.05111, 533.35),
("DT", 2, 1, 8): (-1, 1, -1, 432.946, -2.52751, 533.35),
("DT", 2, 1, 9): (-1, 1, -1, 432.946, -2.00391, 533.35),
("DT", 2, 1, 10): (-1, 1, -1, 432.946, -1.48032, 533.35),
("DT", 2, 1, 11): (-1, 1, -1, 432.946, -0.956716, 533.35),
("DT", 2, 1, 12): (-1, 1, -1, 432.946, -0.433118, 533.35),
("DT", 2, 2, 1): (-1, 1, -1, 512.923, -0.0417923, 533.35),
("DT", 2, 2, 2): (-1, 1, -1, 512.923, 0.481806, 533.35),
("DT", 2, 2, 3): (-1, 1, -1, 512.923, 1.00541, 533.35),
("DT", 2, 2, 4): (-1, 1, -1, 512.923, 1.529, 533.35),
("DT", 2, 2, 5): (-1, 1, -1, 512.923, 2.0526, 533.35),
("DT", 2, 2, 6): (-1, 1, -1, 512.923, 2.5762, 533.35),
("DT", 2, 2, 7): (-1, 1, -1, 512.923, 3.0998, 533.35),
("DT", 2, 2, 8): (-1, 1, -1, 512.923, -2.65979, 533.35),
("DT", 2, 2, 9): (-1, 1, -1, 512.923, -2.13619, 533.35),
("DT", 2, 2, 10): (-1, 1, -1, 512.923, -1.61259, 533.35),
("DT", 2, 2, 11): (-1, 1, -1, 512.923, -1.08899, 533.35),
("DT", 2, 2, 12): (-1, 1, -1, 512.923, -0.565391, 533.35),
("DT", 2, 3, 1): (-1, 1, -1, 618.269, 0.0357202, 533.35),
("DT", 2, 3, 2): (-1, 1, -1, 618.269, 0.559319, 533.35),
("DT", 2, 3, 3): (-1, 1, -1, 618.269, 1.08292, 533.35),
("DT", 2, 3, 4): (-1, 1, -1, 618.269, 1.60652, 533.35),
("DT", 2, 3, 5): (-1, 1, -1, 618.269, 2.13012, 533.35),
("DT", 2, 3, 6): (-1, 1, -1, 618.269, 2.65371, 533.35),
("DT", 2, 3, 7): (-1, 1, -1, 618.269, -3.10587, 533.35),
("DT", 2, 3, 8): (-1, 1, -1, 618.269, -2.58227, 533.35),
("DT", 2, 3, 9): (-1, 1, -1, 618.269, -2.05868, 533.35),
("DT", 2, 3, 10): (-1, 1, -1, 618.269, -1.53508, 533.35),
("DT", 2, 3, 11): (-1, 1, -1, 618.269, -1.01148, 533.35),
("DT", 2, 3, 12): (-1, 1, -1, 618.269, -0.487879, 533.35),
("DT", 2, 4, 1): (-1, 1, -1, 726.425, -0.131007, 533.35),
("DT", 2, 4, 2): (-1, 1, -1, 726.425, 0.392591, 533.35),
("DT", 2, 4, 3): (-1, 1, -1, 726.425, 0.91619, 533.35),
("DT", 2, 4, 4): (-1, 1, -1, 737.922, 1.35119, 533.35),
("DT", 2, 4, 13): (-1, 1, -1, 737.922, 1.7904, 533.35),
("DT", 2, 4, 5): (-1, 1, -1, 726.425, 2.2254, 533.35),
("DT", 2, 4, 6): (-1, 1, -1, 726.425, 2.749, 533.35),
("DT", 2, 4, 7): (-1, 1, -1, 726.425, -3.01059, 533.35),
("DT", 2, 4, 8): (-1, 1, -1, 725.376, -2.49846, 533.35),
("DT", 2, 4, 9): (-1, 1, -1, 722.674, -2.08612, 533.35),
("DT", 2, 4, 10): (-1, 1, -1, 733.072, -1.75847, 533.35),
("DT", 2, 4, 14): (-1, 1, -1, 733.072, -1.38313, 533.35),
("DT", 2, 4, 11): (-1, 1, -1, 722.674, -1.05548, 533.35),
("DT", 2, 4, 12): (-1, 1, -1, 725.376, -0.643132, 533.35),
("CSC", 1, 1, 1, 1): (1, 1, -1, 181.5, -2.27939e-15, 616.95),
("CSC", 1, 1, 1, 3): (1, 1, -1, 181.5, 0.349066, 616.95),
("CSC", 1, 1, 1, 5): (1, 1, -1, 181.5, 0.698132, 616.95),
("CSC", 1, 1, 1, 7): (1, 1, -1, 181.5, 1.0472, 616.95),
("CSC", 1, 1, 1, 9): (1, 1, -1, 181.5, 1.39626, 616.95),
("CSC", 1, 1, 1, 11): (1, 1, -1, 181.5, 1.74533, 616.95),
("CSC", 1, 1, 1, 13): (1, 1, -1, 181.5, 2.0944, 616.95),
("CSC", 1, 1, 1, 15): (1, 1, -1, 181.5, 2.44346, 616.95),
("CSC", 1, 1, 1, 17): (1, 1, -1, 181.5, 2.79253, 616.95),
("CSC", 1, 1, 1, 19): (1, 1, -1, 181.5, 3.14159, 616.95),
("CSC", 1, 1, 1, 21): (1, 1, -1, 181.5, -2.79253, 616.95),
("CSC", 1, 1, 1, 23): (1, 1, -1, 181.5, -2.44346, 616.95),
("CSC", 1, 1, 1, 25): (1, 1, -1, 181.5, -2.0944, 616.95),
("CSC", 1, 1, 1, 27): (1, 1, -1, 181.5, -1.74533, 616.95),
("CSC", 1, 1, 1, 29): (1, 1, -1, 181.5, -1.39626, 616.95),
("CSC", 1, 1, 1, 31): (1, 1, -1, 181.5, -1.0472, 616.95),
("CSC", 1, 1, 1, 33): (1, 1, -1, 181.5, -0.698132, 616.95),
("CSC", 1, 1, 1, 35): (1, 1, -1, 181.5, -0.349066, 616.95),
("CSC", 1, 1, 1, 2): (1, 1, -1, 181.5, 0.174533, 587.65),
("CSC", 1, 1, 1, 4): (1, 1, -1, 181.5, 0.523599, 587.65),
("CSC", 1, 1, 1, 6): (1, 1, -1, 181.5, 0.872665, 587.65),
("CSC", 1, 1, 1, 8): (1, 1, -1, 181.5, 1.22173, 587.65),
("CSC", 1, 1, 1, 10): (1, 1, -1, 181.5, 1.5708, 587.65),
("CSC", 1, 1, 1, 12): (1, 1, -1, 181.5, 1.91986, 587.65),
("CSC", 1, 1, 1, 14): (1, 1, -1, 181.5, 2.26893, 587.65),
("CSC", 1, 1, 1, 16): (1, 1, -1, 181.5, 2.61799, 587.65),
("CSC", 1, 1, 1, 18): (1, 1, -1, 181.5, 2.96706, 587.65),
("CSC", 1, 1, 1, 20): (1, 1, -1, 181.5, -2.96706, 587.65),
("CSC", 1, 1, 1, 22): (1, 1, -1, 181.5, -2.61799, 587.65),
("CSC", 1, 1, 1, 24): (1, 1, -1, 181.5, -2.26893, 587.65),
("CSC", 1, 1, 1, 26): (1, 1, -1, 181.5, -1.91986, 587.65),
("CSC", 1, 1, 1, 28): (1, 1, -1, 181.5, -1.5708, 587.65),
("CSC", 1, 1, 1, 30): (1, 1, -1, 181.5, -1.22173, 587.65),
("CSC", 1, 1, 1, 32): (1, 1, -1, 181.5, -0.872665, 587.65),
("CSC", 1, 1, 1, 34): (1, 1, -1, 181.5, -0.523599, 587.65),
("CSC", 1, 1, 1, 36): (1, 1, -1, 181.5, -0.174533, 587.65),
("CSC", 1, 1, 2, 1): (1, 1, -1, 369.7, -1.32737e-15, 712.761),
("CSC", 1, 1, 2, 3): (1, 1, -1, 369.7, 0.349066, 712.761),
("CSC", 1, 1, 2, 5): (1, 1, -1, 369.7, 0.698132, 712.761),
("CSC", 1, 1, 2, 7): (1, 1, -1, 369.7, 1.0472, 712.761),
("CSC", 1, 1, 2, 9): (1, 1, -1, 369.7, 1.39626, 712.761),
("CSC", 1, 1, 2, 11): (1, 1, -1, 369.7, 1.74533, 712.761),
("CSC", 1, 1, 2, 13): (1, 1, -1, 369.7, 2.0944, 712.761),
("CSC", 1, 1, 2, 15): (1, 1, -1, 369.7, 2.44346, 712.761),
("CSC", 1, 1, 2, 17): (1, 1, -1, 369.7, 2.79253, 712.761),
("CSC", 1, 1, 2, 19): (1, 1, -1, 369.7, -3.14159, 712.761),
("CSC", 1, 1, 2, 21): (1, 1, -1, 369.7, -2.79253, 712.761),
("CSC", 1, 1, 2, 23): (1, 1, -1, 369.7, -2.44346, 712.761),
("CSC", 1, 1, 2, 25): (1, 1, -1, 369.7, -2.0944, 712.761),
("CSC", 1, 1, 2, 27): (1, 1, -1, 369.7, -1.74533, 712.761),
("CSC", 1, 1, 2, 29): (1, 1, -1, 369.7, -1.39626, 712.761),
("CSC", 1, 1, 2, 31): (1, 1, -1, 369.7, -1.0472, 712.761),
("CSC", 1, 1, 2, 33): (1, 1, -1, 369.7, -0.698132, 712.761),
("CSC", 1, 1, 2, 35): (1, 1, -1, 369.7, -0.349066, 712.761),
("CSC", 1, 1, 2, 2): (1, 1, -1, 369.7, 0.174533, 685.361),
("CSC", 1, 1, 2, 4): (1, 1, -1, 369.7, 0.523599, 685.361),
("CSC", 1, 1, 2, 6): (1, 1, -1, 369.7, 0.872665, 685.361),
("CSC", 1, 1, 2, 8): (1, 1, -1, 369.7, 1.22173, 685.361),
("CSC", 1, 1, 2, 10): (1, 1, -1, 369.7, 1.5708, 685.361),
("CSC", 1, 1, 2, 12): (1, 1, -1, 369.7, 1.91986, 685.361),
("CSC", 1, 1, 2, 14): (1, 1, -1, 369.7, 2.26893, 685.361),
("CSC", 1, 1, 2, 16): (1, 1, -1, 369.7, 2.61799, 685.361),
("CSC", 1, 1, 2, 18): (1, 1, -1, 369.7, 2.96706, 685.361),
("CSC", 1, 1, 2, 20): (1, 1, -1, 369.7, -2.96706, 685.361),
("CSC", 1, 1, 2, 22): (1, 1, -1, 369.7, -2.61799, 685.361),
("CSC", 1, 1, 2, 24): (1, 1, -1, 369.7, -2.26893, 685.361),
("CSC", 1, 1, 2, 26): (1, 1, -1, 369.7, -1.91986, 685.361),
("CSC", 1, 1, 2, 28): (1, 1, -1, 369.7, -1.5708, 685.361),
("CSC", 1, 1, 2, 30): (1, 1, -1, 369.7, -1.22173, 685.361),
("CSC", 1, 1, 2, 32): (1, 1, -1, 369.7, -0.872665, 685.361),
("CSC", 1, 1, 2, 34): (1, 1, -1, 369.7, -0.523599, 685.361),
("CSC", 1, 1, 2, 36): (1, 1, -1, 369.7, -0.174533, 685.361),
("CSC", 1, 1, 3, 1): (1, 1, -1, 595.15, -1.18508e-15, 695.159),
("CSC", 1, 1, 3, 2): (1, 1, -1, 595.15, 0.174533, 695.159),
("CSC", 1, 1, 3, 3): (1, 1, -1, 595.15, 0.349066, 695.159),
("CSC", 1, 1, 3, 4): (1, 1, -1, 595.15, 0.523599, 695.159),
("CSC", 1, 1, 3, 5): (1, 1, -1, 595.15, 0.698132, 695.159),
("CSC", 1, 1, 3, 6): (1, 1, -1, 595.15, 0.872665, 695.159),
("CSC", 1, 1, 3, 7): (1, 1, -1, 595.15, 1.0472, 695.159),
("CSC", 1, 1, 3, 8): (1, 1, -1, 595.15, 1.22173, 695.159),
("CSC", 1, 1, 3, 9): (1, 1, -1, 595.15, 1.39626, 695.159),
("CSC", 1, 1, 3, 10): (1, 1, -1, 595.15, 1.5708, 695.159),
("CSC", 1, 1, 3, 11): (1, 1, -1, 595.15, 1.74533, 695.159),
("CSC", 1, 1, 3, 12): (1, 1, -1, 595.15, 1.91986, 695.159),
("CSC", 1, 1, 3, 13): (1, 1, -1, 595.15, 2.0944, 695.159),
("CSC", 1, 1, 3, 14): (1, 1, -1, 595.15, 2.26893, 695.159),
("CSC", 1, 1, 3, 15): (1, 1, -1, 595.15, 2.44346, 695.159),
("CSC", 1, 1, 3, 16): (1, 1, -1, 595.15, 2.61799, 695.159),
("CSC", 1, 1, 3, 17): (1, 1, -1, 595.15, 2.79253, 695.159),
("CSC", 1, 1, 3, 18): (1, 1, -1, 595.15, 2.96706, 695.159),
("CSC", 1, 1, 3, 19): (1, 1, -1, 595.15, -3.14159, 695.159),
("CSC", 1, 1, 3, 20): (1, 1, -1, 595.15, -2.96706, 695.159),
("CSC", 1, 1, 3, 21): (1, 1, -1, 595.15, -2.79253, 695.159),
("CSC", 1, 1, 3, 22): (1, 1, -1, 595.15, -2.61799, 695.159),
("CSC", 1, 1, 3, 23): (1, 1, -1, 595.15, -2.44346, 695.159),
("CSC", 1, 1, 3, 24): (1, 1, -1, 595.15, -2.26893, 695.159),
("CSC", 1, 1, 3, 25): (1, 1, -1, 595.15, -2.0944, 695.159),
("CSC", 1, 1, 3, 26): (1, 1, -1, 595.15, -1.91986, 695.159),
("CSC", 1, 1, 3, 27): (1, 1, -1, 595.15, -1.74533, 695.159),
("CSC", 1, 1, 3, 28): (1, 1, -1, 595.15, -1.5708, 695.159),
("CSC", 1, 1, 3, 29): (1, 1, -1, 595.15, -1.39626, 695.159),
("CSC", 1, 1, 3, 30): (1, 1, -1, 595.15, -1.22173, 695.159),
("CSC", 1, 1, 3, 31): (1, 1, -1, 595.15, -1.0472, 695.159),
("CSC", 1, 1, 3, 32): (1, 1, -1, 595.15, -0.872665, 695.159),
("CSC", 1, 1, 3, 33): (1, 1, -1, 595.15, -0.698132, 695.159),
("CSC", 1, 1, 3, 34): (1, 1, -1, 595.15, -0.523599, 695.159),
("CSC", 1, 1, 3, 35): (1, 1, -1, 595.15, -0.349066, 695.159),
("CSC", 1, 1, 3, 36): (1, 1, -1, 595.15, -0.174533, 695.159),
("CSC", 1, 1, 4, 1): (1, 1, -1, 181.5, -2.27939e-15, 616.95),
("CSC", 1, 1, 4, 3): (1, 1, -1, 181.5, 0.349066, 616.95),
("CSC", 1, 1, 4, 5): (1, 1, -1, 181.5, 0.698132, 616.95),
("CSC", 1, 1, 4, 7): (1, 1, -1, 181.5, 1.0472, 616.95),
("CSC", 1, 1, 4, 9): (1, 1, -1, 181.5, 1.39626, 616.95),
("CSC", 1, 1, 4, 11): (1, 1, -1, 181.5, 1.74533, 616.95),
("CSC", 1, 1, 4, 13): (1, 1, -1, 181.5, 2.0944, 616.95),
("CSC", 1, 1, 4, 15): (1, 1, -1, 181.5, 2.44346, 616.95),
("CSC", 1, 1, 4, 17): (1, 1, -1, 181.5, 2.79253, 616.95),
("CSC", 1, 1, 4, 19): (1, 1, -1, 181.5, 3.14159, 616.95),
("CSC", 1, 1, 4, 21): (1, 1, -1, 181.5, -2.79253, 616.95),
("CSC", 1, 1, 4, 23): (1, 1, -1, 181.5, -2.44346, 616.95),
("CSC", 1, 1, 4, 25): (1, 1, -1, 181.5, -2.0944, 616.95),
("CSC", 1, 1, 4, 27): (1, 1, -1, 181.5, -1.74533, 616.95),
("CSC", 1, 1, 4, 29): (1, 1, -1, 181.5, -1.39626, 616.95),
("CSC", 1, 1, 4, 31): (1, 1, -1, 181.5, -1.0472, 616.95),
("CSC", 1, 1, 4, 33): (1, 1, -1, 181.5, -0.698132, 616.95),
("CSC", 1, 1, 4, 35): (1, 1, -1, 181.5, -0.349066, 616.95),
("CSC", 1, 1, 4, 2): (1, 1, -1, 181.5, 0.174533, 587.65),
("CSC", 1, 1, 4, 4): (1, 1, -1, 181.5, 0.523599, 587.65),
("CSC", 1, 1, 4, 6): (1, 1, -1, 181.5, 0.872665, 587.65),
("CSC", 1, 1, 4, 8): (1, 1, -1, 181.5, 1.22173, 587.65),
("CSC", 1, 1, 4, 10): (1, 1, -1, 181.5, 1.5708, 587.65),
("CSC", 1, 1, 4, 12): (1, 1, -1, 181.5, 1.91986, 587.65),
("CSC", 1, 1, 4, 14): (1, 1, -1, 181.5, 2.26893, 587.65),
("CSC", 1, 1, 4, 16): (1, 1, -1, 181.5, 2.61799, 587.65),
("CSC", 1, 1, 4, 18): (1, 1, -1, 181.5, 2.96706, 587.65),
("CSC", 1, 1, 4, 20): (1, 1, -1, 181.5, -2.96706, 587.65),
("CSC", 1, 1, 4, 22): (1, 1, -1, 181.5, -2.61799, 587.65),
("CSC", 1, 1, 4, 24): (1, 1, -1, 181.5, -2.26893, 587.65),
("CSC", 1, 1, 4, 26): (1, 1, -1, 181.5, -1.91986, 587.65),
("CSC", 1, 1, 4, 28): (1, 1, -1, 181.5, -1.5708, 587.65),
("CSC", 1, 1, 4, 30): (1, 1, -1, 181.5, -1.22173, 587.65),
("CSC", 1, 1, 4, 32): (1, 1, -1, 181.5, -0.872665, 587.65),
("CSC", 1, 1, 4, 34): (1, 1, -1, 181.5, -0.523599, 587.65),
("CSC", 1, 1, 4, 36): (1, 1, -1, 181.5, -0.174533, 587.65),
("CSC", 1, 2, 1, 1): (1, 1, -1, 242.7, 0.0872665, 840.961),
("CSC", 1, 2, 1, 3): (1, 1, -1, 242.7, 0.785398, 840.961),
("CSC", 1, 2, 1, 5): (1, 1, -1, 242.7, 1.48353, 840.961),
("CSC", 1, 2, 1, 7): (1, 1, -1, 242.7, 2.18166, 840.961),
("CSC", 1, 2, 1, 9): (1, 1, -1, 242.7, 2.87979, 840.961),
("CSC", 1, 2, 1, 11): (1, 1, -1, 242.7, -2.70526, 840.961),
("CSC", 1, 2, 1, 13): (1, 1, -1, 242.7, -2.00713, 840.961),
("CSC", 1, 2, 1, 15): (1, 1, -1, 242.7, -1.309, 840.961),
("CSC", 1, 2, 1, 17): (1, 1, -1, 242.7, -0.610865, 840.961),
("CSC", 1, 2, 1, 2): (1, 1, -1, 242.7, 0.436332, 816.161),
("CSC", 1, 2, 1, 4): (1, 1, -1, 242.7, 1.13446, 816.161),
("CSC", 1, 2, 1, 6): (1, 1, -1, 242.7, 1.8326, 816.161),
("CSC", 1, 2, 1, 8): (1, 1, -1, 242.7, 2.53073, 816.161),
("CSC", 1, 2, 1, 10): (1, 1, -1, 242.7, -3.05433, 816.161),
("CSC", 1, 2, 1, 12): (1, 1, -1, 242.7, -2.35619, 816.161),
("CSC", 1, 2, 1, 14): (1, 1, -1, 242.7, -1.65806, 816.161),
("CSC", 1, 2, 1, 16): (1, 1, -1, 242.7, -0.959931, 816.161),
("CSC", 1, 2, 1, 18): (1, 1, -1, 242.7, -0.261799, 816.161),
("CSC", 1, 2, 2, 1): (1, 1, -1, 526.5, -1.39541e-15, 840.961),
("CSC", 1, 2, 2, 3): (1, 1, -1, 526.5, 0.349066, 840.961),
("CSC", 1, 2, 2, 5): (1, 1, -1, 526.5, 0.698132, 840.961),
("CSC", 1, 2, 2, 7): (1, 1, -1, 526.5, 1.0472, 840.961),
("CSC", 1, 2, 2, 9): (1, 1, -1, 526.5, 1.39626, 840.961),
("CSC", 1, 2, 2, 11): (1, 1, -1, 526.5, 1.74533, 840.961),
("CSC", 1, 2, 2, 13): (1, 1, -1, 526.5, 2.0944, 840.961),
("CSC", 1, 2, 2, 15): (1, 1, -1, 526.5, 2.44346, 840.961),
("CSC", 1, 2, 2, 17): (1, 1, -1, 526.5, 2.79253, 840.961),
("CSC", 1, 2, 2, 19): (1, 1, -1, 526.5, 3.14159, 840.961),
("CSC", 1, 2, 2, 21): (1, 1, -1, 526.5, -2.79253, 840.961),
("CSC", 1, 2, 2, 23): (1, 1, -1, 526.5, -2.44346, 840.961),
("CSC", 1, 2, 2, 25): (1, 1, -1, 526.5, -2.0944, 840.961),
("CSC", 1, 2, 2, 27): (1, 1, -1, 526.5, -1.74533, 840.961),
("CSC", 1, 2, 2, 29): (1, 1, -1, 526.5, -1.39626, 840.961),
("CSC", 1, 2, 2, 31): (1, 1, -1, 526.5, -1.0472, 840.961),
("CSC", 1, 2, 2, 33): (1, 1, -1, 526.5, -0.698132, 840.961),
("CSC", 1, 2, 2, 35): (1, 1, -1, 526.5, -0.349066, 840.961),
("CSC", 1, 2, 2, 2): (1, 1, -1, 526.5, 0.174533, 816.161),
("CSC", 1, 2, 2, 4): (1, 1, -1, 526.5, 0.523599, 816.161),
("CSC", 1, 2, 2, 6): (1, 1, -1, 526.5, 0.872665, 816.161),
("CSC", 1, 2, 2, 8): (1, 1, -1, 526.5, 1.22173, 816.161),
("CSC", 1, 2, 2, 10): (1, 1, -1, 526.5, 1.5708, 816.161),
("CSC", 1, 2, 2, 12): (1, 1, -1, 526.5, 1.91986, 816.161),
("CSC", 1, 2, 2, 14): (1, 1, -1, 526.5, 2.26893, 816.161),
("CSC", 1, 2, 2, 16): (1, 1, -1, 526.5, 2.61799, 816.161),
("CSC", 1, 2, 2, 18): (1, 1, -1, 526.5, 2.96706, 816.161),
("CSC", 1, 2, 2, 20): (1, 1, -1, 526.5, -2.96706, 816.161),
("CSC", 1, 2, 2, 22): (1, 1, -1, 526.5, -2.61799, 816.161),
("CSC", 1, 2, 2, 24): (1, 1, -1, 526.5, -2.26893, 816.161),
("CSC", 1, 2, 2, 26): (1, 1, -1, 526.5, -1.91986, 816.161),
("CSC", 1, 2, 2, 28): (1, 1, -1, 526.5, -1.5708, 816.161),
("CSC", 1, 2, 2, 30): (1, 1, -1, 526.5, -1.22173, 816.161),
("CSC", 1, 2, 2, 32): (1, 1, -1, 526.5, -0.872665, 816.161),
("CSC", 1, 2, 2, 34): (1, 1, -1, 526.5, -0.523599, 816.161),
("CSC", 1, 2, 2, 36): (1, 1, -1, 526.5, -0.174533, 816.161),
("CSC", 1, 3, 1, 1): (-1, 1, 1, 252.7, 0.0872665, 923.039),
("CSC", 1, 3, 1, 3): (-1, 1, 1, 252.7, 0.785398, 923.039),
("CSC", 1, 3, 1, 5): (-1, 1, 1, 252.7, 1.48353, 923.039),
("CSC", 1, 3, 1, 7): (-1, 1, 1, 252.7, 2.18166, 923.039),
("CSC", 1, 3, 1, 9): (-1, 1, 1, 252.7, 2.87979, 923.039),
("CSC", 1, 3, 1, 11): (-1, 1, 1, 252.7, -2.70526, 923.039),
("CSC", 1, 3, 1, 13): (-1, 1, 1, 252.7, -2.00713, 923.039),
("CSC", 1, 3, 1, 15): (-1, 1, 1, 252.7, -1.309, 923.039),
("CSC", 1, 3, 1, 17): (-1, 1, 1, 252.7, -0.610865, 923.039),
("CSC", 1, 3, 1, 2): (-1, 1, 1, 252.7, 0.436332, 947.839),
("CSC", 1, 3, 1, 4): (-1, 1, 1, 252.7, 1.13446, 947.839),
("CSC", 1, 3, 1, 6): (-1, 1, 1, 252.7, 1.8326, 947.839),
("CSC", 1, 3, 1, 8): (-1, 1, 1, 252.7, 2.53073, 947.839),
("CSC", 1, 3, 1, 10): (-1, 1, 1, 252.7, -3.05433, 947.839),
("CSC", 1, 3, 1, 12): (-1, 1, 1, 252.7, -2.35619, 947.839),
("CSC", 1, 3, 1, 14): (-1, 1, 1, 252.7, -1.65806, 947.839),
("CSC", 1, 3, 1, 16): (-1, 1, 1, 252.7, -0.959931, 947.839),
("CSC", 1, 3, 1, 18): (-1, 1, 1, 252.7, -0.261799, 947.839),
("CSC", 1, 3, 2, 1): (-1, 1, 1, 526.5, -1.25133e-15, 923.039),
("CSC", 1, 3, 2, 3): (-1, 1, 1, 526.5, 0.349066, 923.039),
("CSC", 1, 3, 2, 5): (-1, 1, 1, 526.5, 0.698132, 923.039),
("CSC", 1, 3, 2, 7): (-1, 1, 1, 526.5, 1.0472, 923.039),
("CSC", 1, 3, 2, 9): (-1, 1, 1, 526.5, 1.39626, 923.039),
("CSC", 1, 3, 2, 11): (-1, 1, 1, 526.5, 1.74533, 923.039),
("CSC", 1, 3, 2, 13): (-1, 1, 1, 526.5, 2.0944, 923.039),
("CSC", 1, 3, 2, 15): (-1, 1, 1, 526.5, 2.44346, 923.039),
("CSC", 1, 3, 2, 17): (-1, 1, 1, 526.5, 2.79253, 923.039),
("CSC", 1, 3, 2, 19): (-1, 1, 1, 526.5, -3.14159, 923.039),
("CSC", 1, 3, 2, 21): (-1, 1, 1, 526.5, -2.79253, 923.039),
("CSC", 1, 3, 2, 23): (-1, 1, 1, 526.5, -2.44346, 923.039),
("CSC", 1, 3, 2, 25): (-1, 1, 1, 526.5, -2.0944, 923.039),
("CSC", 1, 3, 2, 27): (-1, 1, 1, 526.5, -1.74533, 923.039),
("CSC", 1, 3, 2, 29): (-1, 1, 1, 526.5, -1.39626, 923.039),
("CSC", 1, 3, 2, 31): (-1, 1, 1, 526.5, -1.0472, 923.039),
("CSC", 1, 3, 2, 33): (-1, 1, 1, 526.5, -0.698132, 923.039),
("CSC", 1, 3, 2, 35): (-1, 1, 1, 526.5, -0.349066, 923.039),
("CSC", 1, 3, 2, 2): (-1, 1, 1, 526.5, 0.174533, 947.839),
("CSC", 1, 3, 2, 4): (-1, 1, 1, 526.5, 0.523599, 947.839),
("CSC", 1, 3, 2, 6): (-1, 1, 1, 526.5, 0.872665, 947.839),
("CSC", 1, 3, 2, 8): (-1, 1, 1, 526.5, 1.22173, 947.839),
("CSC", 1, 3, 2, 10): (-1, 1, 1, 526.5, 1.5708, 947.839),
("CSC", 1, 3, 2, 12): (-1, 1, 1, 526.5, 1.91986, 947.839),
("CSC", 1, 3, 2, 14): (-1, 1, 1, 526.5, 2.26893, 947.839),
("CSC", 1, 3, 2, 16): (-1, 1, 1, 526.5, 2.61799, 947.839),
("CSC", 1, 3, 2, 18): (-1, 1, 1, 526.5, 2.96706, 947.839),
("CSC", 1, 3, 2, 20): (-1, 1, 1, 526.5, -2.96706, 947.839),
("CSC", 1, 3, 2, 22): (-1, 1, 1, 526.5, -2.61799, 947.839),
("CSC", 1, 3, 2, 24): (-1, 1, 1, 526.5, -2.26893, 947.839),
("CSC", 1, 3, 2, 26): (-1, 1, 1, 526.5, -1.91986, 947.839),
("CSC", 1, 3, 2, 28): (-1, 1, 1, 526.5, -1.5708, 947.839),
("CSC", 1, 3, 2, 30): (-1, 1, 1, 526.5, -1.22173, 947.839),
("CSC", 1, 3, 2, 32): (-1, 1, 1, 526.5, -0.872665, 947.839),
("CSC", 1, 3, 2, 34): (-1, 1, 1, 526.5, -0.523599, 947.839),
("CSC", 1, 3, 2, 36): (-1, 1, 1, 526.5, -0.174533, 947.839),
("CSC", 1, 4, 1, 1): (-1, 1, 1, 262.65, 0.0872665, 1012.54),
("CSC", 1, 4, 1, 3): (-1, 1, 1, 262.65, 0.785398, 1012.54),
("CSC", 1, 4, 1, 5): (-1, 1, 1, 262.65, 1.48353, 1012.54),
("CSC", 1, 4, 1, 7): (-1, 1, 1, 262.65, 2.18166, 1012.54),
("CSC", 1, 4, 1, 9): (-1, 1, 1, 262.65, 2.87979, 1012.54),
("CSC", 1, 4, 1, 11): (-1, 1, 1, 262.65, -2.70526, 1012.54),
("CSC", 1, 4, 1, 13): (-1, 1, 1, 262.65, -2.00713, 1012.54),
("CSC", 1, 4, 1, 15): (-1, 1, 1, 262.65, -1.309, 1012.54),
("CSC", 1, 4, 1, 17): (-1, 1, 1, 262.65, -0.610865, 1012.54),
("CSC", 1, 4, 1, 2): (-1, 1, 1, 262.65, 0.436332, 1037.34),
("CSC", 1, 4, 1, 4): (-1, 1, 1, 262.65, 1.13446, 1037.34),
("CSC", 1, 4, 1, 6): (-1, 1, 1, 262.65, 1.8326, 1037.34),
("CSC", 1, 4, 1, 8): (-1, 1, 1, 262.65, 2.53073, 1037.34),
("CSC", 1, 4, 1, 10): (-1, 1, 1, 262.65, -3.05433, 1037.34),
("CSC", 1, 4, 1, 12): (-1, 1, 1, 262.65, -2.35619, 1037.34),
("CSC", 1, 4, 1, 14): (-1, 1, 1, 262.65, -1.65806, 1037.34),
("CSC", 1, 4, 1, 16): (-1, 1, 1, 262.65, -0.959931, 1037.34),
("CSC", 1, 4, 1, 18): (-1, 1, 1, 262.65, -0.261799, 1037.34),
("CSC", 2, 1, 1, 1): (-1, 1, 1, 181.5, -7.56017e-17, -616.95),
("CSC", 2, 1, 1, 3): (-1, 1, 1, 181.5, 0.349066, -616.95),
("CSC", 2, 1, 1, 5): (-1, 1, 1, 181.5, 0.698132, -616.95),
("CSC", 2, 1, 1, 7): (-1, 1, 1, 181.5, 1.0472, -616.95),
("CSC", 2, 1, 1, 9): (-1, 1, 1, 181.5, 1.39626, -616.95),
("CSC", 2, 1, 1, 11): (-1, 1, 1, 181.5, 1.74533, -616.95),
("CSC", 2, 1, 1, 13): (-1, 1, 1, 181.5, 2.0944, -616.95),
("CSC", 2, 1, 1, 15): (-1, 1, 1, 181.5, 2.44346, -616.95),
("CSC", 2, 1, 1, 17): (-1, 1, 1, 181.5, 2.79253, -616.95),
("CSC", 2, 1, 1, 19): (-1, 1, 1, 181.5, -3.14159, -616.95),
("CSC", 2, 1, 1, 21): (-1, 1, 1, 181.5, -2.79253, -616.95),
("CSC", 2, 1, 1, 23): (-1, 1, 1, 181.5, -2.44346, -616.95),
("CSC", 2, 1, 1, 25): (-1, 1, 1, 181.5, -2.0944, -616.95),
("CSC", 2, 1, 1, 27): (-1, 1, 1, 181.5, -1.74533, -616.95),
("CSC", 2, 1, 1, 29): (-1, 1, 1, 181.5, -1.39626, -616.95),
("CSC", 2, 1, 1, 31): (-1, 1, 1, 181.5, -1.0472, -616.95),
("CSC", 2, 1, 1, 33): (-1, 1, 1, 181.5, -0.698132, -616.95),
("CSC", 2, 1, 1, 35): (-1, 1, 1, 181.5, -0.349066, -616.95),
("CSC", 2, 1, 1, 2): (-1, 1, 1, 181.5, 0.174533, -587.65),
("CSC", 2, 1, 1, 4): (-1, 1, 1, 181.5, 0.523599, -587.65),
("CSC", 2, 1, 1, 6): (-1, 1, 1, 181.5, 0.872665, -587.65),
("CSC", 2, 1, 1, 8): (-1, 1, 1, 181.5, 1.22173, -587.65),
("CSC", 2, 1, 1, 10): (-1, 1, 1, 181.5, 1.5708, -587.65),
("CSC", 2, 1, 1, 12): (-1, 1, 1, 181.5, 1.91986, -587.65),
("CSC", 2, 1, 1, 14): (-1, 1, 1, 181.5, 2.26893, -587.65),
("CSC", 2, 1, 1, 16): (-1, 1, 1, 181.5, 2.61799, -587.65),
("CSC", 2, 1, 1, 18): (-1, 1, 1, 181.5, 2.96706, -587.65),
("CSC", 2, 1, 1, 20): (-1, 1, 1, 181.5, -2.96706, -587.65),
("CSC", 2, 1, 1, 22): (-1, 1, 1, 181.5, -2.61799, -587.65),
("CSC", 2, 1, 1, 24): (-1, 1, 1, 181.5, -2.26893, -587.65),
("CSC", 2, 1, 1, 26): (-1, 1, 1, 181.5, -1.91986, -587.65),
("CSC", 2, 1, 1, 28): (-1, 1, 1, 181.5, -1.5708, -587.65),
("CSC", 2, 1, 1, 30): (-1, 1, 1, 181.5, -1.22173, -587.65),
("CSC", 2, 1, 1, 32): (-1, 1, 1, 181.5, -0.872665, -587.65),
("CSC", 2, 1, 1, 34): (-1, 1, 1, 181.5, -0.523599, -587.65),
("CSC", 2, 1, 1, 36): (-1, 1, 1, 181.5, -0.174533, -587.65),
("CSC", 2, 1, 2, 1): (-1, 1, 1, 369.7, -2.44217e-17, -712.761),
("CSC", 2, 1, 2, 3): (-1, 1, 1, 369.7, 0.349066, -712.761),
("CSC", 2, 1, 2, 5): (-1, 1, 1, 369.7, 0.698132, -712.761),
("CSC", 2, 1, 2, 7): (-1, 1, 1, 369.7, 1.0472, -712.761),
("CSC", 2, 1, 2, 9): (-1, 1, 1, 369.7, 1.39626, -712.761),
("CSC", 2, 1, 2, 11): (-1, 1, 1, 369.7, 1.74533, -712.761),
("CSC", 2, 1, 2, 13): (-1, 1, 1, 369.7, 2.0944, -712.761),
("CSC", 2, 1, 2, 15): (-1, 1, 1, 369.7, 2.44346, -712.761),
("CSC", 2, 1, 2, 17): (-1, 1, 1, 369.7, 2.79253, -712.761),
("CSC", 2, 1, 2, 19): (-1, 1, 1, 369.7, -3.14159, -712.761),
("CSC", 2, 1, 2, 21): (-1, 1, 1, 369.7, -2.79253, -712.761),
("CSC", 2, 1, 2, 23): (-1, 1, 1, 369.7, -2.44346, -712.761),
("CSC", 2, 1, 2, 25): (-1, 1, 1, 369.7, -2.0944, -712.761),
("CSC", 2, 1, 2, 27): (-1, 1, 1, 369.7, -1.74533, -712.761),
("CSC", 2, 1, 2, 29): (-1, 1, 1, 369.7, -1.39626, -712.761),
("CSC", 2, 1, 2, 31): (-1, 1, 1, 369.7, -1.0472, -712.761),
("CSC", 2, 1, 2, 33): (-1, 1, 1, 369.7, -0.698132, -712.761),
("CSC", 2, 1, 2, 35): (-1, 1, 1, 369.7, -0.349066, -712.761),
("CSC", 2, 1, 2, 2): (-1, 1, 1, 369.7, 0.174533, -685.361),
("CSC", 2, 1, 2, 4): (-1, 1, 1, 369.7, 0.523599, -685.361),
("CSC", 2, 1, 2, 6): (-1, 1, 1, 369.7, 0.872665, -685.361),
("CSC", 2, 1, 2, 8): (-1, 1, 1, 369.7, 1.22173, -685.361),
("CSC", 2, 1, 2, 10): (-1, 1, 1, 369.7, 1.5708, -685.361),
("CSC", 2, 1, 2, 12): (-1, 1, 1, 369.7, 1.91986, -685.361),
("CSC", 2, 1, 2, 14): (-1, 1, 1, 369.7, 2.26893, -685.361),
("CSC", 2, 1, 2, 16): (-1, 1, 1, 369.7, 2.61799, -685.361),
("CSC", 2, 1, 2, 18): (-1, 1, 1, 369.7, 2.96706, -685.361),
("CSC", 2, 1, 2, 20): (-1, 1, 1, 369.7, -2.96706, -685.361),
("CSC", 2, 1, 2, 22): (-1, 1, 1, 369.7, -2.61799, -685.361),
("CSC", 2, 1, 2, 24): (-1, 1, 1, 369.7, -2.26893, -685.361),
("CSC", 2, 1, 2, 26): (-1, 1, 1, 369.7, -1.91986, -685.361),
("CSC", 2, 1, 2, 28): (-1, 1, 1, 369.7, -1.5708, -685.361),
("CSC", 2, 1, 2, 30): (-1, 1, 1, 369.7, -1.22173, -685.361),
("CSC", 2, 1, 2, 32): (-1, 1, 1, 369.7, -0.872665, -685.361),
("CSC", 2, 1, 2, 34): (-1, 1, 1, 369.7, -0.523599, -685.361),
("CSC", 2, 1, 2, 36): (-1, 1, 1, 369.7, -0.174533, -685.361),
("CSC", 2, 1, 3, 1): (-1, 1, 1, 595.15, -3.47421e-16, -695.159),
("CSC", 2, 1, 3, 2): (-1, 1, 1, 595.15, 0.174533, -695.159),
("CSC", 2, 1, 3, 3): (-1, 1, 1, 595.15, 0.349066, -695.159),
("CSC", 2, 1, 3, 4): (-1, 1, 1, 595.15, 0.523599, -695.159),
("CSC", 2, 1, 3, 5): (-1, 1, 1, 595.15, 0.698132, -695.159),
("CSC", 2, 1, 3, 6): (-1, 1, 1, 595.15, 0.872665, -695.159),
("CSC", 2, 1, 3, 7): (-1, 1, 1, 595.15, 1.0472, -695.159),
("CSC", 2, 1, 3, 8): (-1, 1, 1, 595.15, 1.22173, -695.159),
("CSC", 2, 1, 3, 9): (-1, 1, 1, 595.15, 1.39626, -695.159),
("CSC", 2, 1, 3, 10): (-1, 1, 1, 595.15, 1.5708, -695.159),
("CSC", 2, 1, 3, 11): (-1, 1, 1, 595.15, 1.74533, -695.159),
("CSC", 2, 1, 3, 12): (-1, 1, 1, 595.15, 1.91986, -695.159),
("CSC", 2, 1, 3, 13): (-1, 1, 1, 595.15, 2.0944, -695.159),
("CSC", 2, 1, 3, 14): (-1, 1, 1, 595.15, 2.26893, -695.159),
("CSC", 2, 1, 3, 15): (-1, 1, 1, 595.15, 2.44346, -695.159),
("CSC", 2, 1, 3, 16): (-1, 1, 1, 595.15, 2.61799, -695.159),
("CSC", 2, 1, 3, 17): (-1, 1, 1, 595.15, 2.79253, -695.159),
("CSC", 2, 1, 3, 18): (-1, 1, 1, 595.15, 2.96706, -695.159),
("CSC", 2, 1, 3, 19): (-1, 1, 1, 595.15, -3.14159, -695.159),
("CSC", 2, 1, 3, 20): (-1, 1, 1, 595.15, -2.96706, -695.159),
("CSC", 2, 1, 3, 21): (-1, 1, 1, 595.15, -2.79253, -695.159),
("CSC", 2, 1, 3, 22): (-1, 1, 1, 595.15, -2.61799, -695.159),
("CSC", 2, 1, 3, 23): (-1, 1, 1, 595.15, -2.44346, -695.159),
("CSC", 2, 1, 3, 24): (-1, 1, 1, 595.15, -2.26893, -695.159),
("CSC", 2, 1, 3, 25): (-1, 1, 1, 595.15, -2.0944, -695.159),
("CSC", 2, 1, 3, 26): (-1, 1, 1, 595.15, -1.91986, -695.159),
("CSC", 2, 1, 3, 27): (-1, 1, 1, 595.15, -1.74533, -695.159),
("CSC", 2, 1, 3, 28): (-1, 1, 1, 595.15, -1.5708, -695.159),
("CSC", 2, 1, 3, 29): (-1, 1, 1, 595.15, -1.39626, -695.159),
("CSC", 2, 1, 3, 30): (-1, 1, 1, 595.15, -1.22173, -695.159),
("CSC", 2, 1, 3, 31): (-1, 1, 1, 595.15, -1.0472, -695.159),
("CSC", 2, 1, 3, 32): (-1, 1, 1, 595.15, -0.872665, -695.159),
("CSC", 2, 1, 3, 33): (-1, 1, 1, 595.15, -0.698132, -695.159),
("CSC", 2, 1, 3, 34): (-1, 1, 1, 595.15, -0.523599, -695.159),
("CSC", 2, 1, 3, 35): (-1, 1, 1, 595.15, -0.349066, -695.159),
("CSC", 2, 1, 3, 36): (-1, 1, 1, 595.15, -0.174533, -695.159),
("CSC", 2, 1, 4, 1): (-1, 1, 1, 181.5, -7.56017e-17, -616.95),
("CSC", 2, 1, 4, 3): (-1, 1, 1, 181.5, 0.349066, -616.95),
("CSC", 2, 1, 4, 5): (-1, 1, 1, 181.5, 0.698132, -616.95),
("CSC", 2, 1, 4, 7): (-1, 1, 1, 181.5, 1.0472, -616.95),
("CSC", 2, 1, 4, 9): (-1, 1, 1, 181.5, 1.39626, -616.95),
("CSC", 2, 1, 4, 11): (-1, 1, 1, 181.5, 1.74533, -616.95),
("CSC", 2, 1, 4, 13): (-1, 1, 1, 181.5, 2.0944, -616.95),
("CSC", 2, 1, 4, 15): (-1, 1, 1, 181.5, 2.44346, -616.95),
("CSC", 2, 1, 4, 17): (-1, 1, 1, 181.5, 2.79253, -616.95),
("CSC", 2, 1, 4, 19): (-1, 1, 1, 181.5, -3.14159, -616.95),
("CSC", 2, 1, 4, 21): (-1, 1, 1, 181.5, -2.79253, -616.95),
("CSC", 2, 1, 4, 23): (-1, 1, 1, 181.5, -2.44346, -616.95),
("CSC", 2, 1, 4, 25): (-1, 1, 1, 181.5, -2.0944, -616.95),
("CSC", 2, 1, 4, 27): (-1, 1, 1, 181.5, -1.74533, -616.95),
("CSC", 2, 1, 4, 29): (-1, 1, 1, 181.5, -1.39626, -616.95),
("CSC", 2, 1, 4, 31): (-1, 1, 1, 181.5, -1.0472, -616.95),
("CSC", 2, 1, 4, 33): (-1, 1, 1, 181.5, -0.698132, -616.95),
("CSC", 2, 1, 4, 35): (-1, 1, 1, 181.5, -0.349066, -616.95),
("CSC", 2, 1, 4, 2): (-1, 1, 1, 181.5, 0.174533, -587.65),
("CSC", 2, 1, 4, 4): (-1, 1, 1, 181.5, 0.523599, -587.65),
("CSC", 2, 1, 4, 6): (-1, 1, 1, 181.5, 0.872665, -587.65),
("CSC", 2, 1, 4, 8): (-1, 1, 1, 181.5, 1.22173, -587.65),
("CSC", 2, 1, 4, 10): (-1, 1, 1, 181.5, 1.5708, -587.65),
("CSC", 2, 1, 4, 12): (-1, 1, 1, 181.5, 1.91986, -587.65),
("CSC", 2, 1, 4, 14): (-1, 1, 1, 181.5, 2.26893, -587.65),
("CSC", 2, 1, 4, 16): (-1, 1, 1, 181.5, 2.61799, -587.65),
("CSC", 2, 1, 4, 18): (-1, 1, 1, 181.5, 2.96706, -587.65),
("CSC", 2, 1, 4, 20): (-1, 1, 1, 181.5, -2.96706, -587.65),
("CSC", 2, 1, 4, 22): (-1, 1, 1, 181.5, -2.61799, -587.65),
("CSC", 2, 1, 4, 24): (-1, 1, 1, 181.5, -2.26893, -587.65),
("CSC", 2, 1, 4, 26): (-1, 1, 1, 181.5, -1.91986, -587.65),
("CSC", 2, 1, 4, 28): (-1, 1, 1, 181.5, -1.5708, -587.65),
("CSC", 2, 1, 4, 30): (-1, 1, 1, 181.5, -1.22173, -587.65),
("CSC", 2, 1, 4, 32): (-1, 1, 1, 181.5, -0.872665, -587.65),
("CSC", 2, 1, 4, 34): (-1, 1, 1, 181.5, -0.523599, -587.65),
("CSC", 2, 1, 4, 36): (-1, 1, 1, 181.5, -0.174533, -587.65),
("CSC", 2, 2, 1, 1): (-1, 1, 1, 242.7, 0.0872665, -840.961),
("CSC", 2, 2, 1, 3): (-1, 1, 1, 242.7, 0.785398, -840.961),
("CSC", 2, 2, 1, 5): (-1, 1, 1, 242.7, 1.48353, -840.961),
("CSC", 2, 2, 1, 7): (-1, 1, 1, 242.7, 2.18166, -840.961),
("CSC", 2, 2, 1, 9): (-1, 1, 1, 242.7, 2.87979, -840.961),
("CSC", 2, 2, 1, 11): (-1, 1, 1, 242.7, -2.70526, -840.961),
("CSC", 2, 2, 1, 13): (-1, 1, 1, 242.7, -2.00713, -840.961),
("CSC", 2, 2, 1, 15): (-1, 1, 1, 242.7, -1.309, -840.961),
("CSC", 2, 2, 1, 17): (-1, 1, 1, 242.7, -0.610865, -840.961),
("CSC", 2, 2, 1, 2): (-1, 1, 1, 242.7, 0.436332, -816.161),
("CSC", 2, 2, 1, 4): (-1, 1, 1, 242.7, 1.13446, -816.161),
("CSC", 2, 2, 1, 6): (-1, 1, 1, 242.7, 1.8326, -816.161),
("CSC", 2, 2, 1, 8): (-1, 1, 1, 242.7, 2.53073, -816.161),
("CSC", 2, 2, 1, 10): (-1, 1, 1, 242.7, -3.05433, -816.161),
("CSC", 2, 2, 1, 12): (-1, 1, 1, 242.7, -2.35619, -816.161),
("CSC", 2, 2, 1, 14): (-1, 1, 1, 242.7, -1.65806, -816.161),
("CSC", 2, 2, 1, 16): (-1, 1, 1, 242.7, -0.959931, -816.161),
("CSC", 2, 2, 1, 18): (-1, 1, 1, 242.7, -0.261799, -816.161),
("CSC", 2, 2, 2, 1): (-1, 1, 1, 526.5, -2.94938e-16, -840.961),
("CSC", 2, 2, 2, 3): (-1, 1, 1, 526.5, 0.349066, -840.961),
("CSC", 2, 2, 2, 5): (-1, 1, 1, 526.5, 0.698132, -840.961),
("CSC", 2, 2, 2, 7): (-1, 1, 1, 526.5, 1.0472, -840.961),
("CSC", 2, 2, 2, 9): (-1, 1, 1, 526.5, 1.39626, -840.961),
("CSC", 2, 2, 2, 11): (-1, 1, 1, 526.5, 1.74533, -840.961),
("CSC", 2, 2, 2, 13): (-1, 1, 1, 526.5, 2.0944, -840.961),
("CSC", 2, 2, 2, 15): (-1, 1, 1, 526.5, 2.44346, -840.961),
("CSC", 2, 2, 2, 17): (-1, 1, 1, 526.5, 2.79253, -840.961),
("CSC", 2, 2, 2, 19): (-1, 1, 1, 526.5, -3.14159, -840.961),
("CSC", 2, 2, 2, 21): (-1, 1, 1, 526.5, -2.79253, -840.961),
("CSC", 2, 2, 2, 23): (-1, 1, 1, 526.5, -2.44346, -840.961),
("CSC", 2, 2, 2, 25): (-1, 1, 1, 526.5, -2.0944, -840.961),
("CSC", 2, 2, 2, 27): (-1, 1, 1, 526.5, -1.74533, -840.961),
("CSC", 2, 2, 2, 29): (-1, 1, 1, 526.5, -1.39626, -840.961),
("CSC", 2, 2, 2, 31): (-1, 1, 1, 526.5, -1.0472, -840.961),
("CSC", 2, 2, 2, 33): (-1, 1, 1, 526.5, -0.698132, -840.961),
("CSC", 2, 2, 2, 35): (-1, 1, 1, 526.5, -0.349066, -840.961),
("CSC", 2, 2, 2, 2): (-1, 1, 1, 526.5, 0.174533, -816.161),
("CSC", 2, 2, 2, 4): (-1, 1, 1, 526.5, 0.523599, -816.161),
("CSC", 2, 2, 2, 6): (-1, 1, 1, 526.5, 0.872665, -816.161),
("CSC", 2, 2, 2, 8): (-1, 1, 1, 526.5, 1.22173, -816.161),
("CSC", 2, 2, 2, 10): (-1, 1, 1, 526.5, 1.5708, -816.161),
("CSC", 2, 2, 2, 12): (-1, 1, 1, 526.5, 1.91986, -816.161),
("CSC", 2, 2, 2, 14): (-1, 1, 1, 526.5, 2.26893, -816.161),
("CSC", 2, 2, 2, 16): (-1, 1, 1, 526.5, 2.61799, -816.161),
("CSC", 2, 2, 2, 18): (-1, 1, 1, 526.5, 2.96706, -816.161),
("CSC", 2, 2, 2, 20): (-1, 1, 1, 526.5, -2.96706, -816.161),
("CSC", 2, 2, 2, 22): (-1, 1, 1, 526.5, -2.61799, -816.161),
("CSC", 2, 2, 2, 24): (-1, 1, 1, 526.5, -2.26893, -816.161),
("CSC", 2, 2, 2, 26): (-1, 1, 1, 526.5, -1.91986, -816.161),
("CSC", 2, 2, 2, 28): (-1, 1, 1, 526.5, -1.5708, -816.161),
("CSC", 2, 2, 2, 30): (-1, 1, 1, 526.5, -1.22173, -816.161),
("CSC", 2, 2, 2, 32): (-1, 1, 1, 526.5, -0.872665, -816.161),
("CSC", 2, 2, 2, 34): (-1, 1, 1, 526.5, -0.523599, -816.161),
("CSC", 2, 2, 2, 36): (-1, 1, 1, 526.5, -0.174533, -816.161),
("CSC", 2, 3, 1, 1): (1, 1, -1, 252.7, 0.0872665, -923.039),
("CSC", 2, 3, 1, 3): (1, 1, -1, 252.7, 0.785398, -923.039),
("CSC", 2, 3, 1, 5): (1, 1, -1, 252.7, 1.48353, -923.039),
("CSC", 2, 3, 1, 7): (1, 1, -1, 252.7, 2.18166, -923.039),
("CSC", 2, 3, 1, 9): (1, 1, -1, 252.7, 2.87979, -923.039),
("CSC", 2, 3, 1, 11): (1, 1, -1, 252.7, -2.70526, -923.039),
("CSC", 2, 3, 1, 13): (1, 1, -1, 252.7, -2.00713, -923.039),
("CSC", 2, 3, 1, 15): (1, 1, -1, 252.7, -1.309, -923.039),
("CSC", 2, 3, 1, 17): (1, 1, -1, 252.7, -0.610865, -923.039),
("CSC", 2, 3, 1, 2): (1, 1, -1, 252.7, 0.436332, -947.839),
("CSC", 2, 3, 1, 4): (1, 1, -1, 252.7, 1.13446, -947.839),
("CSC", 2, 3, 1, 6): (1, 1, -1, 252.7, 1.8326, -947.839),
("CSC", 2, 3, 1, 8): (1, 1, -1, 252.7, 2.53073, -947.839),
("CSC", 2, 3, 1, 10): (1, 1, -1, 252.7, -3.05433, -947.839),
("CSC", 2, 3, 1, 12): (1, 1, -1, 252.7, -2.35619, -947.839),
("CSC", 2, 3, 1, 14): (1, 1, -1, 252.7, -1.65806, -947.839),
("CSC", 2, 3, 1, 16): (1, 1, -1, 252.7, -0.959931, -947.839),
("CSC", 2, 3, 1, 18): (1, 1, -1, 252.7, -0.261799, -947.839),
("CSC", 2, 3, 2, 1): (1, 1, -1, 526.5, -5.54065e-17, -923.039),
("CSC", 2, 3, 2, 3): (1, 1, -1, 526.5, 0.349066, -923.039),
("CSC", 2, 3, 2, 5): (1, 1, -1, 526.5, 0.698132, -923.039),
("CSC", 2, 3, 2, 7): (1, 1, -1, 526.5, 1.0472, -923.039),
("CSC", 2, 3, 2, 9): (1, 1, -1, 526.5, 1.39626, -923.039),
("CSC", 2, 3, 2, 11): (1, 1, -1, 526.5, 1.74533, -923.039),
("CSC", 2, 3, 2, 13): (1, 1, -1, 526.5, 2.0944, -923.039),
("CSC", 2, 3, 2, 15): (1, 1, -1, 526.5, 2.44346, -923.039),
("CSC", 2, 3, 2, 17): (1, 1, -1, 526.5, 2.79253, -923.039),
("CSC", 2, 3, 2, 19): (1, 1, -1, 526.5, -3.14159, -923.039),
("CSC", 2, 3, 2, 21): (1, 1, -1, 526.5, -2.79253, -923.039),
("CSC", 2, 3, 2, 23): (1, 1, -1, 526.5, -2.44346, -923.039),
("CSC", 2, 3, 2, 25): (1, 1, -1, 526.5, -2.0944, -923.039),
("CSC", 2, 3, 2, 27): (1, 1, -1, 526.5, -1.74533, -923.039),
("CSC", 2, 3, 2, 29): (1, 1, -1, 526.5, -1.39626, -923.039),
("CSC", 2, 3, 2, 31): (1, 1, -1, 526.5, -1.0472, -923.039),
("CSC", 2, 3, 2, 33): (1, 1, -1, 526.5, -0.698132, -923.039),
("CSC", 2, 3, 2, 35): (1, 1, -1, 526.5, -0.349066, -923.039),
("CSC", 2, 3, 2, 2): (1, 1, -1, 526.5, 0.174533, -947.839),
("CSC", 2, 3, 2, 4): (1, 1, -1, 526.5, 0.523599, -947.839),
("CSC", 2, 3, 2, 6): (1, 1, -1, 526.5, 0.872665, -947.839),
("CSC", 2, 3, 2, 8): (1, 1, -1, 526.5, 1.22173, -947.839),
("CSC", 2, 3, 2, 10): (1, 1, -1, 526.5, 1.5708, -947.839),
("CSC", 2, 3, 2, 12): (1, 1, -1, 526.5, 1.91986, -947.839),
("CSC", 2, 3, 2, 14): (1, 1, -1, 526.5, 2.26893, -947.839),
("CSC", 2, 3, 2, 16): (1, 1, -1, 526.5, 2.61799, -947.839),
("CSC", 2, 3, 2, 18): (1, 1, -1, 526.5, 2.96706, -947.839),
("CSC", 2, 3, 2, 20): (1, 1, -1, 526.5, -2.96706, -947.839),
("CSC", 2, 3, 2, 22): (1, 1, -1, 526.5, -2.61799, -947.839),
("CSC", 2, 3, 2, 24): (1, 1, -1, 526.5, -2.26893, -947.839),
("CSC", 2, 3, 2, 26): (1, 1, -1, 526.5, -1.91986, -947.839),
("CSC", 2, 3, 2, 28): (1, 1, -1, 526.5, -1.5708, -947.839),
("CSC", 2, 3, 2, 30): (1, 1, -1, 526.5, -1.22173, -947.839),
("CSC", 2, 3, 2, 32): (1, 1, -1, 526.5, -0.872665, -947.839),
("CSC", 2, 3, 2, 34): (1, 1, -1, 526.5, -0.523599, -947.839),
("CSC", 2, 3, 2, 36): (1, 1, -1, 526.5, -0.174533, -947.839),
("CSC", 2, 4, 1, 1): (1, 1, -1, 262.65, 0.0872665, -1012.54),
("CSC", 2, 4, 1, 3): (1, 1, -1, 262.65, 0.785398, -1012.54),
("CSC", 2, 4, 1, 5): (1, 1, -1, 262.65, 1.48353, -1012.54),
("CSC", 2, 4, 1, 7): (1, 1, -1, 262.65, 2.18166, -1012.54),
("CSC", 2, 4, 1, 9): (1, 1, -1, 262.65, 2.87979, -1012.54),
("CSC", 2, 4, 1, 11): (1, 1, -1, 262.65, -2.70526, -1012.54),
("CSC", 2, 4, 1, 13): (1, 1, -1, 262.65, -2.00713, -1012.54),
("CSC", 2, 4, 1, 15): (1, 1, -1, 262.65, -1.309, -1012.54),
("CSC", 2, 4, 1, 17): (1, 1, -1, 262.65, -0.610865, -1012.54),
("CSC", 2, 4, 1, 2): (1, 1, -1, 262.65, 0.436332, -1037.34),
("CSC", 2, 4, 1, 4): (1, 1, -1, 262.65, 1.13446, -1037.34),
("CSC", 2, 4, 1, 6): (1, 1, -1, 262.65, 1.8326, -1037.34),
("CSC", 2, 4, 1, 8): (1, 1, -1, 262.65, 2.53073, -1037.34),
("CSC", 2, 4, 1, 10): (1, 1, -1, 262.65, -3.05433, -1037.34),
("CSC", 2, 4, 1, 12): (1, 1, -1, 262.65, -2.35619, -1037.34),
("CSC", 2, 4, 1, 14): (1, 1, -1, 262.65, -1.65806, -1037.34),
("CSC", 2, 4, 1, 16): (1, 1, -1, 262.65, -0.959931, -1037.34),
("CSC", 2, 4, 1, 18): (1, 1, -1, 262.65, -0.261799, -1037.34),
}

def DBMC(database, reports, window=10., selection=None, phi=False, color=ROOT.kBlue-8, style=1, bins=50, normalized=False, getvalues=False, name=""):
    return DBdiff(database, None, reports, None, window, selection, phi, color, style, bins, normalized, getvalues, name)

def DBdiff(database1, database2, reports1, reports2, window=10., selection=None, phi=False, color=ROOT.kBlue-8, style=1, bins=50, normalized=False, getvalues=False, name="tmp"):
    tdrStyle.SetOptStat("emrou")
    tdrStyle.SetStatW(0.40)
    tdrStyle.SetStatFontSize(0.05)

    if phi:
        hx = ROOT.TH1F("%s_phi" % name, "", bins, -window, window)
    else:
        hx = ROOT.TH1F("%s_x" % name, "", bins, -window, window)
    hy = ROOT.TH1F("%s_y" % name, "", bins, -window, window)
    hz = ROOT.TH1F("%s_z" % name, "", bins, -window, window)
    hphix = ROOT.TH1F("%s_phix" % name, "", bins, -window, window)
    hphiy = ROOT.TH1F("%s_phiy" % name, "", bins, -window, window)
    hphiz = ROOT.TH1F("%s_phiz" % name, "", bins, -window, window)
        
    for r1 in reports1:
        if selection is None or (selection.func_code.co_argcount == len(r1.postal_address) and selection(*r1.postal_address)):
            if reports2 is None:
                r2 = Report(r1.chamberId, r1.postal_address, r1.name)
                r2.add_parameters(ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), 0., 0., 0.)
            else:
                found = False
                for r2 in reports2:
                    if r1.postal_address == r2.postal_address:
                        found = True
                        break
                if not found: continue

            found = False
            if r1.postal_address[0] == "DT":
                if r1.postal_address[1:] in database1.dt:
                    found = True
                    db1 = database1.dt[r1.postal_address[1:]]
                    if database2 is None:
                        db2 = DTAlignable()
                        db2.x = db2.y = db2.z = db2.phix = db2.phiy = db2.phiz = 0.
                        db2.xx = db2.xy = db2.xz = db2.yx = db2.yy = db2.yz = db2.zx = db2.zy = db2.zz = 0.
                    else:
                        db2 = database2.dt[r1.postal_address[1:]]
            else:
                if r1.postal_address[1:] in database1.csc:
                    found = True
                    db1 = database1.csc[r1.postal_address[1:]]
                    if database2 is None:
                        db2 = CSCAlignable()
                        db2.x = db2.y = db2.z = db2.phix = db2.phiy = db2.phiz = 0.
                        db2.xx = db2.xy = db2.xz = db2.yx = db2.yy = db2.yz = db2.zx = db2.zy = db2.zz = 0.
                    else:
                        db2 = database2.csc[r1.postal_address[1:]]

            if found and r1.status == "PASS" and r2.status == "PASS":
                if r1.deltax is not None and r2.deltax is not None and r1.deltax.error is not None and r2.deltax.error is not None and (r1.deltax.error**2 + r2.deltax.error**2) > 0.:
                    if normalized:
                        fill = (db1.x - db2.x)/sqrt(r1.deltax.error**2 + r2.deltax.error**2) * signConventions[r1.postal_address][0]
                    else:
                        if phi:
                            fill = (db1.x - db2.x)/signConventions[r1.postal_address][3] * 1000. * signConventions[r1.postal_address][0]
                        else:
                            fill = (db1.x - db2.x) * 10. * signConventions[r1.postal_address][0]
                    hx.Fill(fill)
                    if getvalues not in (False, None):
                        getvalues["x"].append((fill, 10. * sqrt(r1.deltax.error**2 + r2.deltax.error**2)))

                if r1.deltay is not None and r2.deltay is not None and r1.deltay.error is not None and r2.deltay.error is not None and (r1.deltay.error**2 + r2.deltay.error**2) > 0.:
                    if normalized:
                        fill = (db1.y - db2.y)/sqrt(r1.deltay.error**2 + r2.deltay.error**2) * signConventions[r1.postal_address][1]
                    else:
                        fill = (db1.y - db2.y) * 10. * signConventions[r1.postal_address][1]
                    hy.Fill(fill)
                    if getvalues not in (False, None):
                        getvalues["y"].append((fill, 10. * sqrt(r1.deltay.error**2 + r2.deltay.error**2)))

                if r1.deltaz is not None and r2.deltaz is not None and r1.deltaz.error is not None and r2.deltaz.error is not None and (r1.deltaz.error**2 + r2.deltaz.error**2) > 0.:
                    if normalized:
                        fill = (db1.z - db2.z)/sqrt(r1.deltaz.error**2 + r2.deltaz.error**2) * signConventions[r1.postal_address][2]
                    else:
                        fill = (db1.z - db2.z) * 10. * signConventions[r1.postal_address][2]
                    hz.Fill(fill)
                    if getvalues not in (False, None):
                        getvalues["z"].append((fill, 10. * sqrt(r1.deltaz.error**2 + r2.deltaz.error**2)))

                if r1.deltaphix is not None and r2.deltaphix is not None and r1.deltaphix.error is not None and r2.deltaphix.error is not None and (r1.deltaphix.error**2 + r2.deltaphix.error**2) > 0.:
                    if normalized:
                        fill = (db1.phix - db2.phix)/sqrt(r1.deltaphix.error**2 + r2.deltaphix.error**2)
                    else:
                        fill = (db1.phix - db2.phix) * 1000.
                    hphix.Fill(fill)
                    if getvalues not in (False, None):
                        getvalues["phix"].append((fill, 10. * sqrt(r1.deltaphix.error**2 + r2.deltaphix.error**2)))

                if r1.deltaphiy is not None and r2.deltaphiy is not None and r1.deltaphiy.error is not None and r2.deltaphiy.error is not None and (r1.deltaphiy.error**2 + r2.deltaphiy.error**2) > 0.:
                    if normalized:
                        fill = (db1.phiy - db2.phiy)/sqrt(r1.deltaphiy.error**2 + r2.deltaphiy.error**2)
                    else:
                        fill = (db1.phiy - db2.phiy) * 1000.
                    hphiy.Fill(fill)
                    if getvalues not in (False, None):
                        getvalues["phiy"].append((fill, 10. * sqrt(r1.deltaphiy.error**2 + r2.deltaphiy.error**2)))

                if r1.deltaphiz is not None and r2.deltaphiz is not None and r1.deltaphiz.error is not None and r2.deltaphiz.error is not None and (r1.deltaphiz.error**2 + r2.deltaphiz.error**2) > 0.:
                    if normalized:
                        fill = (db1.phiz - db2.phiz)/sqrt(r1.deltaphiz.error**2 + r2.deltaphiz.error**2)
                    else:
                        fill = (db1.phiz - db2.phiz) * 1000.
                    hphiz.Fill(fill)
                    if getvalues not in (False, None):
                        getvalues["phiz"].append((fill, 10. * sqrt(r1.deltaphiz.error**2 + r2.deltaphiz.error**2)))

    if not normalized:
        if phi:
            hx.SetXTitle("#delta_{#phi} position (mrad)")
        else:
            hx.SetXTitle("#delta_{x'} (mm)")
        hy.SetXTitle("#delta_{y'} (mm)")
        hz.SetXTitle("#delta_{z'} (mm)")
        hphix.SetXTitle("#delta_{#phi_{x}} (mrad)")
        hphiy.SetXTitle("#delta_{#phi_{y}} (mrad)")
        hphiz.SetXTitle("#delta_{#phi_{z}} (mrad)")
    else:
        if phi:
            hx.SetXTitle("#delta_{#phi}/#sigma_{#phi} position")
        else:
            hx.SetXTitle("#delta_{x'}/#sigma_{x'}")
        hy.SetXTitle("#delta_{y'}/#sigma_{y'}")
        hz.SetXTitle("#delta_{z'}/#sigma_{z'}")
        hphix.SetXTitle("#delta_{#phi_{x}}/#sigma_{#phi_{x}}")
        hphiy.SetXTitle("#delta_{#phi_{y}}/#sigma_{#phi_{y}}")
        hphiz.SetXTitle("#delta_{#phi_{z}}/#sigma_{#phi_{z}}")

    for h in hx, hy, hz, hphix, hphiy, hphiz:
        h.GetXaxis().CenterTitle()
        h.GetYaxis().CenterTitle()
        h.SetFillColor(color)
        h.SetLineStyle(style)

    if normalized:
        fx = ROOT.TF1("fx", "%g * exp(-x**2/2.)/sqrt(2.*3.1415926)" % (hx.GetEntries()*2.*window/bins), -window, window)
        fy = ROOT.TF1("fy", "%g * exp(-x**2/2.)/sqrt(2.*3.1415926)" % (hy.GetEntries()*2.*window/bins), -window, window)
        fz = ROOT.TF1("fz", "%g * exp(-x**2/2.)/sqrt(2.*3.1415926)" % (hz.GetEntries()*2.*window/bins), -window, window)
        fphix = ROOT.TF1("fphix", "%g * exp(-x**2/2.)/sqrt(2.*3.1415926)" % (hphix.GetEntries()*2.*window/bins), -window, window)
        fphiy = ROOT.TF1("fphiy", "%g * exp(-x**2/2.)/sqrt(2.*3.1415926)" % (hphiy.GetEntries()*2.*window/bins), -window, window)
        fphiz = ROOT.TF1("fphiz", "%g * exp(-x**2/2.)/sqrt(2.*3.1415926)" % (hphiz.GetEntries()*2.*window/bins), -window, window)
        for f in fx, fy, fz, fphix, fphiy, fphiz:
            f.SetLineWidth(2)
            f.SetLineColor(ROOT.kBlue)
        for h, f in (hx, fx), (hy, fy), (hz, fz), (hphix, fphix), (hphiy, fphiy), (hphiz, fphiz):
            h.SetAxisRange(0, 1.1*max(h.GetMaximum(), f.GetMaximum()), "Y")
        c1.Clear()
        c1.Divide(3, 2)
        c1.GetPad(1).cd(); hx.Draw(); fx.Draw("same")
        c1.GetPad(2).cd(); hy.Draw(); fy.Draw("same")
        c1.GetPad(3).cd(); hz.Draw(); fz.Draw("same")
        c1.GetPad(4).cd(); hphix.Draw(); fphix.Draw("same")
        c1.GetPad(5).cd(); hphiy.Draw(); fphiy.Draw("same")
        c1.GetPad(6).cd(); hphiz.Draw(); fphiz.Draw("same")
        return hx, hy, hz, hphix, hphiy, hphiz, fx, fy, fz, fphix, fphiy, fphiz
    else:
        c1.Clear()
        c1.Divide(3, 2)
        c1.GetPad(1).cd(); hx.Draw()
        c1.GetPad(2).cd(); hy.Draw()
        c1.GetPad(3).cd(); hz.Draw()
        c1.GetPad(4).cd(); hphix.Draw()
        c1.GetPad(5).cd(); hphiy.Draw()
        c1.GetPad(6).cd(); hphiz.Draw()
        return hx, hy, hz, hphix, hphiy, hphiz

def DBMCVersus(quantity, versus, database, reports, window=10., selection=None, color=ROOT.kBlack):
    return DBdiffVersus(quantity, versus, database, None, reports, None, window, selection, color)

def DBdiffVersus(quantity, versus, database1, database2, reports1, reports2, window=10., selection=None, color=ROOT.kBlack):
    tdrStyle.SetOptStat("")

    domain = []
    values = []
    errors = []
        
    for r1 in reports1:
        if selection is None or (selection.func_code.co_argcount == len(r1.postal_address) and selection(*r1.postal_address)):
            if reports2 is None:
                r2 = Report(r1.chamberId, r1.postal_address, r1.name)
                r2.add_parameters(ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), 0., 0., 0.)
            else:
                found = False
                for r2 in reports2:
                    if r1.postal_address == r2.postal_address:
                        found = True
                        break
                if not found: continue

            found = False
            if r1.postal_address[0] == "DT":
                if r1.postal_address[1:] in database1.dt:
                    found = True
                    db1 = database1.dt[r1.postal_address[1:]]
                    if database2 is None:
                        db2 = DTAlignable()
                        db2.x = db2.y = db2.z = db2.phix = db2.phiy = db2.phiz = 0.
                        db2.xx = db2.xy = db2.xz = db2.yx = db2.yy = db2.yz = db2.zx = db2.zy = db2.zz = 0.
                    else:
                        db2 = database2.dt[r1.postal_address[1:]]
            else:
                if r1.postal_address[1:] in database1.csc:
                    found = True
                    db1 = database1.csc[r1.postal_address[1:]]
                    if database2 is None:
                        db2 = CSCAlignable()
                        db2.x = db2.y = db2.z = db2.phix = db2.phiy = db2.phiz = 0.
                        db2.xx = db2.xy = db2.xz = db2.yx = db2.yy = db2.yz = db2.zx = db2.zy = db2.zz = 0.
                    else:
                        db2 = database2.csc[r1.postal_address[1:]]

            if found and r1.status == "PASS" and r2.status == "PASS":
                okay = False

                if quantity == "phi":
                    if r1.deltax is not None and r2.deltax is not None and r1.deltax.error is not None and r2.deltax.error is not None and (r1.deltax.error**2 + r2.deltax.error**2) > 0.:
                        okay = True
                        values.append((db1.x - db2.x)/signConventions[r1.postal_address][3] * 1000. * signConventions[r1.postal_address][0])
                        errors.append((r1.deltax.error**2 + r2.deltax.error**2)/signConventions[r1.postal_address][3] * 1000. * signConventions[r1.postal_address][0])

                elif quantity == "x":
                    if r1.deltax is not None and r2.deltax is not None and r1.deltax.error is not None and r2.deltax.error is not None and (r1.deltax.error**2 + r2.deltax.error**2) > 0.:
                        okay = True
                        values.append((db1.x - db2.x) * 10. * signConventions[r1.postal_address][0])
                        errors.append((r1.deltax.error**2 + r2.deltax.error**2) * 10. * signConventions[r1.postal_address][0])

                elif quantity == "y":
                    if r1.deltay is not None and r2.deltay is not None and r1.deltay.error is not None and r2.deltay.error is not None and (r1.deltay.error**2 + r2.deltay.error**2) > 0.:
                        okay = True
                        values.append((db1.y - db2.y) * 10. * signConventions[r1.postal_address][1])
                        errors.append((r1.deltay.error**2 + r2.deltay.error**2) * 10. * signConventions[r1.postal_address][1])

                elif quantity == "z":
                    if r1.deltaz is not None and r2.deltaz is not None and r1.deltaz.error is not None and r2.deltaz.error is not None and (r1.deltaz.error**2 + r2.deltaz.error**2) > 0.:
                        okay = True
                        values.append((db1.z - db2.z) * 10. * signConventions[r1.postal_address][2])
                        errors.append((r1.deltaz.error**2 + r2.deltaz.error**2) * 10. * signConventions[r1.postal_address][2])

                elif quantity == "phix":
                    if r1.deltaphix is not None and r2.deltaphix is not None and r1.deltaphix.error is not None and r2.deltaphix.error is not None and (r1.deltaphix.error**2 + r2.deltaphix.error**2) > 0.:
                        okay = True
                        values.append((db1.phix - db2.phix) * 1000.)
                        errors.append((r1.deltaphix.error**2 + r2.deltaphix.error**2) * 1000.)

                elif quantity == "phiy":
                    if r1.deltaphiy is not None and r2.deltaphiy is not None and r1.deltaphiy.error is not None and r2.deltaphiy.error is not None and (r1.deltaphiy.error**2 + r2.deltaphiy.error**2) > 0.:
                        okay = True
                        values.append((db1.phiy - db2.phiy) * 1000.)
                        errors.append((r1.deltaphiy.error**2 + r2.deltaphiy.error**2) * 1000.)

                elif quantity == "phiz":
                    if r1.deltaphiz is not None and r2.deltaphiz is not None and r1.deltaphiz.error is not None and r2.deltaphiz.error is not None and (r1.deltaphiz.error**2 + r2.deltaphiz.error**2) > 0.:
                        okay = True
                        values.append((db1.phiz - db2.phiz) * 1000.)
                        errors.append((r1.deltaphiz.error**2 + r2.deltaphiz.error**2) * 1000.)

                else: raise Exception

                if okay:
                    if versus == "r": domain.append(signConventions[r1.postal_address][3])
                    elif versus == "phi": domain.append(signConventions[r1.postal_address][4])
                    elif versus == "z": domain.append(signConventions[r1.postal_address][5])
                    else: raise Exception

    if versus == "r":
        bkgndhist = ROOT.TH1F("bkgndhist", "", 100, 0., 800.)
        bkgndhist.SetXTitle("R (cm)")
    elif versus == "phi":
        bkgndhist = ROOT.TH1F("bkgndhist", "", 100, -pi, pi)
        bkgndhist.SetXTitle("#phi (rad)")
    elif versus == "z":
        bkgndhist = ROOT.TH1F("bkgndhist", "", 100, -1100., 1100.)
        bkgndhist.SetXTitle("z (cm)")
    bkgndhist.GetXaxis().CenterTitle()

    bkgndhist.SetAxisRange(-window, window, "Y")
    if quantity == "phi": bkgndhist.SetYTitle("#delta_{#phi} position (mrad)")
    elif quantity == "x": bkgndhist.SetYTitle("#delta_{x'} (mm)")
    elif quantity == "y": bkgndhist.SetYTitle("#delta_{y'} (mm)")
    elif quantity == "z": bkgndhist.SetYTitle("#delta_{z'} (mm)")
    elif quantity == "phix": bkgndhist.SetYTitle("#delta_{#phi_{x}} (mrad)")
    elif quantity == "phiy": bkgndhist.SetYTitle("#delta_{#phi_{y}} (mrad)")
    elif quantity == "phiz": bkgndhist.SetYTitle("#delta_{#phi_{z}} (mrad)")
    else: raise Exception
    bkgndhist.GetYaxis().CenterTitle()

    if len(domain) == 0:
        tgraph = ROOT.TGraphErrors(0)
    else:
        tgraph = ROOT.TGraphErrors(len(domain), array.array("d", domain), array.array("d", values), array.array("d", [0.]*len(domain)), array.array("d", errors))
    tgraph.SetMarkerColor(color)
    tgraph.SetLineColor(color)

    bkgndhist.Draw()
    if tgraph.GetN() > 0: tgraph.Draw("p")
    return bkgndhist, tgraph

######################################################################################################

phiedges_me11 = [0.087266462599716474, 0.26179938550504211, 0.43633230751381297, 0.61086524309298951, 0.78539818789089832, 0.95993106410343132, 1.13446400890134, 1.3089969444805165, 1.4835298664892873, 1.6580627893946129, 1.8325957122999386, 2.0071286343087094, 2.1816615698878858, 2.3561945146857948, 2.5307273908983277, 2.7052603356962366, 2.8797932712754131, 3.0543261932841839, -3.0543261909900767, -2.8797932680847511, -2.7052603460759803, -2.5307274104968038, -2.3561944656988949, -2.181661589486362, -2.0071286446884531, -1.8325957091092766, -1.6580627871005058, -1.4835298641951802, -1.3089969412898546, -1.1344640192810838, -0.95993108370190716, -0.78539813890399834, -0.61086526269146535, -0.43633231789355653, -0.26179938231437999, -0.087266460305609153]
phiedges_me12 = [0.087266462599716474, 0.26179938297741073, 0.43633231700542385, 0.61086526005981812, 0.78539815872971441, 0.95993109326461523, 1.1344639919345114, 1.3089969349889057, 1.4835298690169187, 1.6580627893946129, 1.8325957097723073, 2.0071286438003204, 2.1816615868547147, 2.3561944855246111, 2.5307274200595118, 2.7052603187294082, 2.879793261783802, 3.0543261958118153, -3.0543261909900767, -2.8797932706123825, -2.7052603365843693, -2.5307273935299754, -2.356194494860079, -2.1816615603251783, -2.0071286616552819, -1.8325957186008877, -1.6580627845728746, -1.4835298641951802, -1.308996943817486, -1.1344640097894729, -0.95993106673507855, -0.78539816806518226, -0.61086523353028144, -0.43633233486038514, -0.26179939180599088, -0.087266457777977771]
phiedges_me13 = [0.087266462599716474, 0.26179938235213535, 0.43633230952414037, 0.61086523916470359, 0.78539817763669606, 0.95993107435763347, 1.1344640128296259, 1.3089969424701891, 1.4835298696421941, 1.6580627893946129, 1.832595709147032, 2.0071286363190368, 2.1816615659596001, 2.3561945044315924, 2.53072740115253, 2.7052603396245227, 2.8797932692650856, 3.0543261964370907, -3.0543261909900767, -2.8797932712376579, -2.7052603440656529, -2.53072741442509, -2.3561944759530973, -2.1816615792321596, -2.0071286407601674, -1.8325957111196041, -1.6580627839475992, -1.4835298641951802, -1.3089969444427614, -1.1344640172707563, -0.95993108763019308, -0.7853981491582005, -0.61086525243726308, -0.43633231396527061, -0.2617993843247074, -0.087266457152702412]
phiedges_me14 = [0.087266462599716474, 0.26179938550504211, 0.43633230751381297, 0.61086524309298951, 0.78539818789089832, 0.95993106410343132, 1.13446400890134, 1.3089969444805165, 1.4835298664892873, 1.6580627893946129, 1.8325957122999386, 2.0071286343087094, 2.1816615698878858, 2.3561945146857948, 2.5307273908983277, 2.7052603356962366, 2.8797932712754131, 3.0543261932841839, -3.0543261909900767, -2.8797932680847511, -2.7052603460759803, -2.5307274104968038, -2.3561944656988949, -2.181661589486362, -2.0071286446884531, -1.8325957091092766, -1.6580627871005058, -1.4835298641951802, -1.3089969412898546, -1.1344640192810838, -0.95993108370190716, -0.78539813890399834, -0.61086526269146535, -0.43633231789355653, -0.26179938231437999, -0.087266460305609153]
phiedges_me21 = [0.26179938481428705, 0.6108652193791777, 0.95993108859688125, 1.3089969578145848, 1.6580627923794755, 2.0071286538798305, 2.356194498693418, 2.7052603320901376, 3.0543261769037247, -2.8797932687755066, -2.5307274342106156, -2.1816615649929121, -1.8325956957752083, -1.4835298612103178, -1.1344639997099626, -0.78539815489637521, -0.43633232149965551, -0.087266476686068212]
phiedges_me22 = [0.087266462599716474, 0.26179938871066555, 0.43633231557670243, 0.61086524129631259, 0.785398172964478, 0.95993107902985153, 1.1344640106980168, 1.308996936417627, 1.483529863283664, 1.6580627893946129, 1.8325957155055621, 2.0071286423715993, 2.1816615680912093, 2.3561944997593747, 2.5307274058247482, 2.7052603374929136, 2.8797932632125236, 3.0543261900785605, -3.0543261909900767, -2.8797932648791278, -2.7052603380130908, -2.5307274122934809, -2.3561944806253154, -2.1816615745599419, -2.0071286428917765, -1.8325957171721663, -1.6580627903061294, -1.4835298641951802, -1.3089969380842312, -1.1344640112181943, -0.95993108549858397, -0.78539815383041856, -0.61086524776504503, -0.43633231609687961, -0.26179939037726946, -0.087266463511232586]
phiedges_me31 = [0.26179938498198485, 0.61086523665761272, 0.95993108859688125, 1.3089969405361499, 1.6580627922117777, 2.0071286313120122, 2.3561944778405319, 2.7052603529430232, 3.0543261994715434, -2.8797932686078087, -2.530727416932181, -2.1816615649929121, -1.8325957130536434, -1.4835298613780155, -1.1344640222777811, -0.78539817574926085, -0.43633230064676976, -0.087266454118249653]
phiedges_me32 = [0.087266462599716474, 0.26179938871066555, 0.43633231557670243, 0.61086524129631259, 0.785398172964478, 0.95993107902985153, 1.1344640106980168, 1.308996936417627, 1.483529863283664, 1.6580627893946129, 1.8325957155055621, 2.0071286423715993, 2.1816615680912093, 2.3561944997593747, 2.5307274058247482, 2.7052603374929136, 2.8797932632125236, 3.0543261900785605, -3.0543261909900767, -2.8797932648791278, -2.7052603380130908, -2.5307274122934809, -2.3561944806253154, -2.1816615745599419, -2.0071286428917765, -1.8325957171721663, -1.6580627903061294, -1.4835298641951802, -1.3089969380842312, -1.1344640112181943, -0.95993108549858397, -0.78539815383041856, -0.61086524776504503, -0.43633231609687961, -0.26179939037726946, -0.087266463511232586]
phiedges_me41 = [0.26179938879942166, 0.61086525092924071, 0.95993108859688125, 1.3089969262645218, 1.6580627883943408, 2.0071286288299772, 2.3561945088997609, 2.7052603218837943, 3.0543262019535784, -2.8797932647903717, -2.5307274026605526, -2.1816615649929121, -1.8325957273252713, -1.4835298651954525, -1.1344640247598159, -0.785398144690032, -0.43633233170599861, -0.087266451636214853]
phiedges_me42 = [0.087266462599716474, 0.26179938871066555, 0.43633231557670243, 0.61086524129631259, 0.785398172964478, 0.95993107902985153, 1.1344640106980168, 1.308996936417627, 1.483529863283664, 1.6580627893946129, 1.8325957155055621, 2.0071286423715993, 2.1816615680912093, 2.3561944997593747, 2.5307274058247482, 2.7052603374929136, 2.8797932632125236, 3.0543261900785605, -3.0543261909900767, -2.8797932648791278, -2.7052603380130908, -2.5307274122934809, -2.3561944806253154, -2.1816615745599419, -2.0071286428917765, -1.8325957171721663, -1.6580627903061294, -1.4835298641951802, -1.3089969380842312, -1.1344640112181943, -0.95993108549858397, -0.78539815383041856, -0.61086524776504503, -0.43633231609687961, -0.26179939037726946, -0.087266463511232586]

phiedges1 = [0.35228048120123945, 0.87587781482541827, 1.3994776462193192, 1.923076807996136, 2.4466741416203148, 2.970273973014216, -2.7893121723885534, -2.2657148387643748, -1.7421150073704739, -1.2185158455936571, -0.69491851196947851, -0.17131868057557731]
phiedges2 = [0.22000706229660855, 0.74360690430428489, 1.267204926935573, 1.7908033890915052, 2.3144032310991816, 2.8380012537304697, -2.9215855912931841, -2.3979857492855081, -1.8743877266542202, -1.3507892644982882, -0.82718942249061178, -0.30359139985932365]
phiedges3 = [0.29751957124275596, 0.82111826253905784, 1.3447162969496083, 1.8683158980376524, 2.3919145893339548, 2.915512623744505, -2.844073082347037, -2.3204743910507353, -1.7968763566401849, -1.2732767555521407, -0.74967806425583894, -0.22608002984528835]
phiedges4 = [3.0136655290752188, -2.7530905195097337, -2.2922883025568734, -1.9222915077192773, -1.5707963267948966, -1.2193011458705159, -0.84930435103291968, -0.38850213408005951, 0.127927124514574, 0.65152597487624719, 1.1322596819239259, 1.5707963267948966, 2.0093329716658674, 2.4900666787135459]

def philines(station, window, abscissa):
    global philine_tlines
    philine_tlines = []
    if station == "me11": phiedges = phiedges_me11
    if station == "me12": phiedges = phiedges_me12
    if station == "me13": phiedges = phiedges_me13
    if station == "me14": phiedges = phiedges_me14
    if station == "me21": phiedges = phiedges_me21
    if station == "me22": phiedges = phiedges_me22
    if station == "me31": phiedges = phiedges_me31
    if station == "me32": phiedges = phiedges_me32
    if station == "me41": phiedges = phiedges_me41
    if station == "me42": phiedges = phiedges_me42
    if station == 1: phiedges = phiedges1
    if station == 2: phiedges = phiedges2
    if station == 3: phiedges = phiedges3
    if station == 4: phiedges = phiedges4
    for phi in phiedges:
        if abscissa is None or abscissa[0] < phi < abscissa[1]:
            philine_tlines.append(ROOT.TLine(phi, -window, phi, window))
            philine_tlines[-1].SetLineStyle(2)
            philine_tlines[-1].Draw()

def zlines(window, abscissa):
    global zline_tlines
    zline_tlines = []
    for z in -401.625, -133.875, 133.875, 401.625:
        if abscissa is None or abscissa[0] < z < abscissa[1]:
            zline_tlines.append(ROOT.TLine(z, -window, z, window))
            zline_tlines[-1].SetLineStyle(2)
            zline_tlines[-1].Draw()

def rlines(disk, window, abscissa):
    global rline_tlines
    rline_tlines = []
    if disk == 1: rl = [150., 270., 480.]
    else: rl = [350.]
    for r in rl:
        if abscissa is None or abscissa[0] < r < abscissa[1]:
            rline_tlines.append(ROOT.TLine(r, -window, r, window))
            rline_tlines[-1].SetLineStyle(2)
            rline_tlines[-1].Draw()

def mapplot(tfiles, name, param, mode="from2d", window=40., abscissa=None, title="", widebins=False, fitsine=False):
    tdrStyle.SetOptTitle(1)
    tdrStyle.SetTitleBorderSize(0)
    tdrStyle.SetOptFit(0)
    set_palette("blues")
    global hist, hist2d, hist2dweight, tline1, tline2, tline3
    prof = tfiles[0].Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_prof" % (name, param)).Clone()
    profPos = tfiles[0].Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_profPos" % (name, param)).Clone()
    profNeg = tfiles[0].Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_profNeg" % (name, param)).Clone()
    weights = tfiles[0].Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_weights" % (name, param)).Clone()
    valweights = tfiles[0].Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_valweights" % (name, param)).Clone()
    hist2d = tfiles[0].Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_2d" % (name, param)).Clone()
    hist2dweight = tfiles[0].Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_2dweight" % (name, param)).Clone()
    for tfile in tfiles[1:]:
        prof.Add(tfile.Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_prof" % (name, param)))
        profPos.Add(tfile.Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_profPos" % (name, param)))
        profNeg.Add(tfile.Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_profNeg" % (name, param)))
        weights.Add(tfile.Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_weights" % (name, param)))
        valweights.Add(tfile.Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_valweights" % (name, param)))
        hist2d.Add(tfile.Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_2d" % (name, param)))
        hist2dweight.Add(tfile.Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_2dweight" % (name, param)))

    if mode == "plain":
        hist = prof

    elif mode in ("from2d", "from2dweight"):
        if mode == "from2d": the2d = hist2d
        else: the2d = hist2dweight

        hist = weights.Clone()
        skip = 1
        if widebins:
            hist.Rebin(10)
            skip = 10

        for i in xrange(0, int(weights.GetNbinsX()), skip):
            tmp = the2d.ProjectionY("tmp", i+1, i + skip)
            if tmp.GetEntries() > 2:
                hist.SetBinContent(i/skip+1, tmp.GetMean())
                hist.SetBinError(i/skip+1, tmp.GetRMS() / sqrt(tmp.GetEntries()))
            else:
                hist.SetBinContent(i/skip+1, 2000.)
                hist.SetBinError(i/skip+1, 1000.)
        
    elif mode == "weighted":
        if weights.GetEntries() == 0:
            averageweight = 0.
        else:
            sumofweights = 0.
            for i in xrange(0, int(weights.GetNbinsX())+2):
                sumofweights += weights.GetBinContent(i)
            averageweight = sumofweights / weights.GetEntries()
        hist = weights.Clone()
        for i in xrange(1, int(weights.GetNbinsX())+1):
            if weights.GetBinContent(i) > 0:
                thisweight = weights.GetBinContent(i) / averageweight
                hist.SetBinContent(i, valweights.GetBinContent(i) / thisweight)
                hist.SetBinError(i, sqrt(1. / thisweight))
            else:
                hist.SetBinContent(i, 2000.)
                hist.SetBinError(i, 1000.)

    else:
        raise Exception

    if fitsine:
        f = ROOT.TF1("f", "[0] + [1]*sin(x) + [2]*cos(x)", -pi, pi)
        hist.Fit(f, "0")
        hist.GetFunction("f").SetLineColor(ROOT.kRed)
        global fitsine_const, fitsine_sin, fitsine_cos, fitsine_chi2, fitsine_ndf
        fitsine_const = hist.GetFunction("f").GetParameter(0), hist.GetFunction("f").GetParError(0)
        fitsine_sin = hist.GetFunction("f").GetParameter(1), hist.GetFunction("f").GetParError(1)
        fitsine_cos = hist.GetFunction("f").GetParameter(2), hist.GetFunction("f").GetParError(2)
        fitsine_chi2 = hist.GetFunction("f").GetChisquare()
        fitsine_ndf = hist.GetFunction("f").GetNDF()

    hist.SetAxisRange(-window, window, "Y")
    if abscissa is not None: hist.SetAxisRange(abscissa[0], abscissa[1], "X")
    hist.SetMarkerStyle(20)
    hist.SetMarkerSize(0.75)
    hist.GetXaxis().CenterTitle()
    hist.GetYaxis().CenterTitle()
    hist.GetYaxis().SetTitleOffset(0.75)
    hist.GetXaxis().SetTitleSize(0.05)
    hist.GetYaxis().SetTitleSize(0.05)
    hist.SetTitle(title)
    if "vsphi" in name: hist.SetXTitle("Global #phi position (rad)")
    elif "vsz" in name: hist.SetXTitle("Global z position (cm)")
    elif "vsr" in name: hist.SetXTitle("Global R position (cm)")
    if "DT" in name:
        if param == "x": hist.SetYTitle("Global x residual (mm)")
        if param == "dxdz": hist.SetYTitle("Global dx/dz residual (mrad)")
        if param == "y": hist.SetYTitle("Global y residual (mm)")
        if param == "dydz": hist.SetYTitle("Global dy/dz residual (mm)")
    if "CSC" in name:
        if param == "x": hist.SetYTitle("Global r#phi residual (mm)")
        if param == "dxdz": hist.SetYTitle("Global d(r#phi)/dz residual (mrad)")
    hist.SetMarkerColor(ROOT.kBlack)
    hist.SetLineColor(ROOT.kBlack)
    hist.Draw()
    hist2d.Draw("colzsame")
    if widebins: hist.Draw("samee1")
    else: hist.Draw("same")
    if fitsine: hist.GetFunction("f").Draw("same")
    if "vsphi" in name: 
        if ("mem11" in name or "mep11" in name) and not widebins: philines("me11", window, abscissa)
        if ("mem12" in name or "mep12" in name) and not widebins: philines("me12", window, abscissa)
        if ("mem13" in name or "mep13" in name) and not widebins: philines("me13", window, abscissa)
        if ("mem14" in name or "mep14" in name) and not widebins: philines("me14", window, abscissa)
        if ("mem21" in name or "mep21" in name) and not widebins: philines("me21", window, abscissa)
        if ("mem22" in name or "mep22" in name) and not widebins: philines("me22", window, abscissa)
        if ("mem31" in name or "mep31" in name) and not widebins: philines("me31", window, abscissa)
        if ("mem32" in name or "mep32" in name) and not widebins: philines("me32", window, abscissa)
        if ("mem41" in name or "mep41" in name) and not widebins: philines("me41", window, abscissa)
        if ("mem42" in name or "mep42" in name) and not widebins: philines("me42", window, abscissa)
        if abscissa is None:
            tline1 = ROOT.TLine(-pi, 0, pi, 0); tline1.Draw()
            tline2 = ROOT.TLine(-pi, -window, pi, -window); tline2.SetLineWidth(2); tline2.Draw()
            tline3 = ROOT.TLine(-pi, window, pi, window); tline3.Draw()
        else:
            tline1 = ROOT.TLine(abscissa[0], 0, abscissa[1], 0); tline1.Draw()
            tline2 = ROOT.TLine(abscissa[0], -window, abscissa[1], -window); tline2.SetLineWidth(2); tline2.Draw()
            tline3 = ROOT.TLine(abscissa[0], window, abscissa[1], window); tline3.Draw()
    elif "vsz" in name:
        if not widebins: zlines(window, abscissa)
        if abscissa is None:
            tline1 = ROOT.TLine(-660, 0, 660, 0); tline1.Draw()
            tline2 = ROOT.TLine(-660, -window, 660, -window); tline2.SetLineWidth(2); tline2.Draw()
            tline3 = ROOT.TLine(-660, window, 660, window); tline3.Draw()
        else:
            tline1 = ROOT.TLine(abscissa[0], 0, abscissa[1], 0); tline1.Draw()
            tline2 = ROOT.TLine(abscissa[0], -window, abscissa[1], -window); tline2.SetLineWidth(2); tline2.Draw()
            tline3 = ROOT.TLine(abscissa[0], window, abscissa[1], window); tline3.Draw()
    elif "vsr" in name:
        if "mem1" in name or "mep1" in name and not widebins: rlines(1, window, abscissa)
        if "mem2" in name or "mep2" in name and not widebins: rlines(2, window, abscissa)
        if "mem3" in name or "mep3" in name and not widebins: rlines(3, window, abscissa)
        if "mem4" in name or "mep4" in name and not widebins: rlines(4, window, abscissa)
        if abscissa is None:
            tline1 = ROOT.TLine(100, 0, 700, 0); tline1.Draw()
            tline2 = ROOT.TLine(100, -window, 700, -window); tline2.SetLineWidth(2); tline2.Draw()
            tline3 = ROOT.TLine(100, window, 700, window); tline3.Draw()
        else:
            tline1 = ROOT.TLine(abscissa[0], 0, abscissa[1], 0); tline1.Draw()
            tline2 = ROOT.TLine(abscissa[0], -window, abscissa[1], -window); tline2.SetLineWidth(2); tline2.Draw()
            tline3 = ROOT.TLine(abscissa[0], window, abscissa[1], window); tline3.Draw()


