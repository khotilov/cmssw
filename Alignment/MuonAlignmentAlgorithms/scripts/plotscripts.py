import ROOT, array, os, re, random
from math import *

#############################################################
# Convenience functions (we'll add more)

def wheelm2only(dt, wheel, station, sector): return dt == "DT" and wheel == -2
def wheelm1only(dt, wheel, station, sector): return dt == "DT" and wheel == -1
def wheel0only(dt, wheel, station, sector): return dt == "DT" and wheel == 0
def wheelp1only(dt, wheel, station, sector): return dt == "DT" and wheel == 1
def wheelp2only(dt, wheel, station, sector): return dt == "DT" and wheel == 2

def mean(xlist):
  s, n = 0., 0.
  for x in xlist:
    s += x
    n += 1.
  return s/n

def rms(xlist):
  s2, n = 0., 0.
  for x in xlist:
    s2 += x**2
    n += 1.
  return sqrt(s2/n)

def stdev(xlist):
  s, s2, n = 0., 0., 0.
  for x in xlist:
    s += x
    s2 += x**2
    n += 1.
  return sqrt(s2/n - (s/n)**2)

def wmean(xlist):
  s, w = 0., 0.
  for x, e in xlist:
    if e > 0.:
      wi = 1./e**2
      s += x*wi
      w += wi
  return s/w, sqrt(1./w)

#############################################################

tdrStyle = None
def setTDRStyle():
  global tdrStyle
  tdrStyle = ROOT.TStyle("tdrStyle","Style for P-TDR")
# For the canvas:
  tdrStyle.SetCanvasBorderMode(0)
  tdrStyle.SetCanvasColor(ROOT.kWhite)
  tdrStyle.SetCanvasDefH(600) #Height of canvas
  tdrStyle.SetCanvasDefW(600) #Width of canvas
  tdrStyle.SetCanvasDefX(0)   #POsition on screen
  tdrStyle.SetCanvasDefY(0)

# For the Pad:
  tdrStyle.SetPadBorderMode(0)
  # tdrStyle.SetPadBorderSize(Width_t size = 1)
  tdrStyle.SetPadColor(ROOT.kWhite)
  tdrStyle.SetPadGridX(False)
  tdrStyle.SetPadGridY(False)
  tdrStyle.SetGridColor(0)
  tdrStyle.SetGridStyle(3)
  tdrStyle.SetGridWidth(1)

# For the frame:
  tdrStyle.SetFrameBorderMode(0)
  tdrStyle.SetFrameBorderSize(1)
  tdrStyle.SetFrameFillColor(0)
  tdrStyle.SetFrameFillStyle(0)
  tdrStyle.SetFrameLineColor(1)
  tdrStyle.SetFrameLineStyle(1)
  tdrStyle.SetFrameLineWidth(1)

# For the histo:
  # tdrStyle.SetHistFillColor(1)
  # tdrStyle.SetHistFillStyle(0)
  tdrStyle.SetHistLineColor(1)
  tdrStyle.SetHistLineStyle(0)
  tdrStyle.SetHistLineWidth(1)
  # tdrStyle.SetLegoInnerR(Float_t rad = 0.5)
  # tdrStyle.SetNumberContours(Int_t number = 20)

  tdrStyle.SetEndErrorSize(2)
#  tdrStyle.SetErrorMarker(20)
  tdrStyle.SetErrorX(0.)

  tdrStyle.SetMarkerStyle(20)

#For the fit/function:
  tdrStyle.SetOptFit(1)
  tdrStyle.SetFitFormat("5.4g")
  tdrStyle.SetFuncColor(2)
  tdrStyle.SetFuncStyle(1)
  tdrStyle.SetFuncWidth(1)

#For the date:
  tdrStyle.SetOptDate(0)
  # tdrStyle.SetDateX(Float_t x = 0.01)
  # tdrStyle.SetDateY(Float_t y = 0.01)

# For the statistics box:
  tdrStyle.SetOptFile(0)
  tdrStyle.SetOptStat(0) # To display the mean and RMS:   SetOptStat("mr")
  tdrStyle.SetStatColor(ROOT.kWhite)
  tdrStyle.SetStatFont(42)
  tdrStyle.SetStatFontSize(0.025)
  tdrStyle.SetStatTextColor(1)
  tdrStyle.SetStatFormat("6.4g")
  tdrStyle.SetStatBorderSize(1)
  tdrStyle.SetStatH(0.1)
  tdrStyle.SetStatW(0.15)
  # tdrStyle.SetStatStyle(Style_t style = 1001)
  # tdrStyle.SetStatX(Float_t x = 0)
  # tdrStyle.SetStatY(Float_t y = 0)

# Margins:
  tdrStyle.SetPadTopMargin(0.05)
  tdrStyle.SetPadBottomMargin(0.13)
  tdrStyle.SetPadLeftMargin(0.13)
  tdrStyle.SetPadRightMargin(0.05)

# For the Global title:
  tdrStyle.SetOptTitle(0)
  tdrStyle.SetTitleFont(42)
  tdrStyle.SetTitleColor(1)
  tdrStyle.SetTitleTextColor(1)
  tdrStyle.SetTitleFillColor(10)
  tdrStyle.SetTitleFontSize(0.05)
  # tdrStyle.SetTitleH(0) # Set the height of the title box
  # tdrStyle.SetTitleW(0) # Set the width of the title box
  # tdrStyle.SetTitleX(0) # Set the position of the title box
  # tdrStyle.SetTitleY(0.985) # Set the position of the title box
  # tdrStyle.SetTitleStyle(Style_t style = 1001)
  # tdrStyle.SetTitleBorderSize(2)

# For the axis titles:
  tdrStyle.SetTitleColor(1, "XYZ")
  tdrStyle.SetTitleFont(42, "XYZ")
  tdrStyle.SetTitleSize(0.06, "XYZ")
  # tdrStyle.SetTitleXSize(Float_t size = 0.02) # Another way to set the size?
  # tdrStyle.SetTitleYSize(Float_t size = 0.02)
  tdrStyle.SetTitleXOffset(0.9)
  tdrStyle.SetTitleYOffset(1.05)
  # tdrStyle.SetTitleOffset(1.1, "Y") # Another way to set the Offset

# For the axis labels:
  tdrStyle.SetLabelColor(1, "XYZ")
  tdrStyle.SetLabelFont(42, "XYZ")
  tdrStyle.SetLabelOffset(0.007, "XYZ")
  tdrStyle.SetLabelSize(0.05, "XYZ")

# For the axis:
  tdrStyle.SetAxisColor(1, "XYZ")
  tdrStyle.SetStripDecimals(True)
  tdrStyle.SetTickLength(0.03, "XYZ")
  tdrStyle.SetNdivisions(510, "XYZ")
  tdrStyle.SetPadTickX(1)  # To get tick marks on the opposite side of the frame
  tdrStyle.SetPadTickY(1)

# Change for log plots:
  tdrStyle.SetOptLogx(0)
  tdrStyle.SetOptLogy(0)
  tdrStyle.SetOptLogz(0)

# Postscript options:
  tdrStyle.SetPaperSize(20.,20.)
  # tdrStyle.SetLineScalePS(Float_t scale = 3)
  # tdrStyle.SetLineStyleString(Int_t i, const char* text)
  # tdrStyle.SetHeaderPS(const char* header)
  # tdrStyle.SetTitlePS(const char* pstitle)

  # tdrStyle.SetBarOffset(Float_t baroff = 0.5)
  # tdrStyle.SetBarWidth(Float_t barwidth = 0.5)
  # tdrStyle.SetPaintTextFormat(const char* format = "g")
  # tdrStyle.SetPalette(Int_t ncolors = 0, Int_t* colors = 0)
  # tdrStyle.SetTimeOffset(Double_t toffset)
  # tdrStyle.SetHistMinimumZero(True)

  tdrStyle.cd()

setTDRStyle()

def set_palette(name=None, ncontours=999):
    """Set a color palette from a given RGB list
    stops, red, green and blue should all be lists of the same length
    see set_decent_colors for an example"""

    if name == "halfgray":
        stops = [0.00, 0.34, 0.61, 0.84, 1.00]
        red   = map(lambda x: 1. - (1.-x)/2., [1.00, 0.84, 0.61, 0.34, 0.00])
        green = map(lambda x: 1. - (1.-x)/2., [1.00, 0.84, 0.61, 0.34, 0.00])
        blue  = map(lambda x: 1. - (1.-x)/2., [1.00, 0.84, 0.61, 0.34, 0.00])
    elif name == "gray":
        stops = [0.00, 0.34, 0.61, 0.84, 1.00]
        red   = [1.00, 0.84, 0.61, 0.34, 0.00]
        green = [1.00, 0.84, 0.61, 0.34, 0.00]
        blue  = [1.00, 0.84, 0.61, 0.34, 0.00]
    elif name == "blues":
        stops = [0.00, 0.34, 0.61, 0.84, 1.00]
        red   = [1.00, 0.84, 0.61, 0.34, 0.00]
        green = [1.00, 0.84, 0.61, 0.34, 0.00]
        blue  = [1.00, 1.00, 1.00, 1.00, 1.00]
    elif name == "reds":
        stops = [0.00, 0.34, 0.61, 0.84, 1.00]
        red   = [1.00, 1.00, 1.00, 1.00, 1.00]
        green = [1.00, 0.84, 0.61, 0.34, 0.00]
        blue  = [1.00, 0.84, 0.61, 0.34, 0.00]
    elif name == "antigray":
        stops = [0.00, 0.34, 0.61, 0.84, 1.00]
        red   = [1.00, 0.84, 0.61, 0.34, 0.00]
        green = [1.00, 0.84, 0.61, 0.34, 0.00]
        blue  = [1.00, 0.84, 0.61, 0.34, 0.00]
        red.reverse()
        green.reverse()
        blue.reverse()
    elif name == "fire":
        stops = [0.00, 0.20, 0.80, 1.00]
        red   = [1.00, 1.00, 1.00, 0.50]
        green = [1.00, 1.00, 0.00, 0.00]
        blue  = [0.20, 0.00, 0.00, 0.00]
    elif name == "antifire":
        stops = [0.00, 0.20, 0.80, 1.00]
        red   = [0.50, 1.00, 1.00, 1.00]
        green = [0.00, 0.00, 1.00, 1.00]
        blue  = [0.00, 0.00, 0.00, 0.20]
    else:
        # default palette, looks cool
        stops = [0.00, 0.34, 0.61, 0.84, 1.00]
        red   = [0.00, 0.00, 0.87, 1.00, 0.51]
        green = [0.00, 0.81, 1.00, 0.20, 0.00]
        blue  = [0.51, 1.00, 0.12, 0.00, 0.00]

    s = array.array('d', stops)
    r = array.array('d', red)
    g = array.array('d', green)
    b = array.array('d', blue)

    npoints = len(s)
    ROOT.TColor.CreateGradientColorTable(npoints, s, r, g, b, ncontours)
    ROOT.gStyle.SetNumberContours(ncontours)

set_palette()

signConventions = {
("DT", -2, 1, 1): (1, -1, -1, 432.946, 0.0904811, -533.35),
("DT", -2, 1, 2): (1, -1, -1, 432.946, 0.61408, -533.35),
("DT", -2, 1, 3): (1, -1, -1, 432.946, 1.13768, -533.35),
("DT", -2, 1, 4): (1, -1, -1, 432.946, 1.66128, -533.35),
("DT", -2, 1, 5): (1, -1, -1, 432.946, 2.18488, -533.35),
("DT", -2, 1, 6): (1, -1, -1, 432.946, 2.70847, -533.35),
("DT", -2, 1, 7): (1, -1, -1, 432.946, -3.05111, -533.35),
("DT", -2, 1, 8): (1, -1, -1, 432.946, -2.52751, -533.35),
("DT", -2, 1, 9): (1, -1, -1, 432.946, -2.00391, -533.35),
("DT", -2, 1, 10): (1, -1, -1, 432.946, -1.48032, -533.35),
("DT", -2, 1, 11): (1, -1, -1, 432.946, -0.956716, -533.35),
("DT", -2, 1, 12): (1, -1, -1, 432.946, -0.433118, -533.35),
("DT", -2, 2, 1): (1, -1, -1, 512.923, -0.0417923, -533.35),
("DT", -2, 2, 2): (1, -1, -1, 512.923, 0.481806, -533.35),
("DT", -2, 2, 3): (1, -1, -1, 512.923, 1.00541, -533.35),
("DT", -2, 2, 4): (1, -1, -1, 512.923, 1.529, -533.35),
("DT", -2, 2, 5): (1, -1, -1, 512.923, 2.0526, -533.35),
("DT", -2, 2, 6): (1, -1, -1, 512.923, 2.5762, -533.35),
("DT", -2, 2, 7): (1, -1, -1, 512.923, 3.0998, -533.35),
("DT", -2, 2, 8): (1, -1, -1, 512.923, -2.65979, -533.35),
("DT", -2, 2, 9): (1, -1, -1, 512.923, -2.13619, -533.35),
("DT", -2, 2, 10): (1, -1, -1, 512.923, -1.61259, -533.35),
("DT", -2, 2, 11): (1, -1, -1, 512.923, -1.08899, -533.35),
("DT", -2, 2, 12): (1, -1, -1, 512.923, -0.565391, -533.35),
("DT", -2, 3, 1): (1, -1, -1, 618.269, 0.0357202, -533.35),
("DT", -2, 3, 2): (1, -1, -1, 618.269, 0.559319, -533.35),
("DT", -2, 3, 3): (1, -1, -1, 618.269, 1.08292, -533.35),
("DT", -2, 3, 4): (1, -1, -1, 618.269, 1.60652, -533.35),
("DT", -2, 3, 5): (1, -1, -1, 618.269, 2.13012, -533.35),
("DT", -2, 3, 6): (1, -1, -1, 618.269, 2.65371, -533.35),
("DT", -2, 3, 7): (1, -1, -1, 618.269, -3.10587, -533.35),
("DT", -2, 3, 8): (1, -1, -1, 618.269, -2.58227, -533.35),
("DT", -2, 3, 9): (1, -1, -1, 618.269, -2.05868, -533.35),
("DT", -2, 3, 10): (1, -1, -1, 618.269, -1.53508, -533.35),
("DT", -2, 3, 11): (1, -1, -1, 618.269, -1.01148, -533.35),
("DT", -2, 3, 12): (1, -1, -1, 618.269, -0.487879, -533.35),
("DT", -2, 4, 1): (1, -1, -1, 726.425, -0.131007, -533.35),
("DT", -2, 4, 2): (1, -1, -1, 726.425, 0.392591, -533.35),
("DT", -2, 4, 3): (1, -1, -1, 726.425, 0.91619, -533.35),
("DT", -2, 4, 4): (1, -1, -1, 737.922, 1.35119, -533.35),
("DT", -2, 4, 13): (1, -1, -1, 737.922, 1.7904, -533.35),
("DT", -2, 4, 5): (1, -1, -1, 726.425, 2.2254, -533.35),
("DT", -2, 4, 6): (1, -1, -1, 726.425, 2.749, -533.35),
("DT", -2, 4, 7): (1, -1, -1, 726.425, -3.01059, -533.35),
("DT", -2, 4, 8): (1, -1, -1, 725.376, -2.49846, -533.35),
("DT", -2, 4, 9): (1, -1, -1, 722.674, -2.08612, -533.35),
("DT", -2, 4, 10): (1, -1, -1, 733.072, -1.75847, -533.35),
("DT", -2, 4, 14): (1, -1, -1, 733.072, -1.38313, -533.35),
("DT", -2, 4, 11): (1, -1, -1, 722.674, -1.05548, -533.35),
("DT", -2, 4, 12): (1, -1, -1, 725.376, -0.643132, -533.35),
("DT", -1, 1, 1): (1, -1, -1, 432.946, 0.0904811, -267.75),
("DT", -1, 1, 2): (1, -1, -1, 432.946, 0.61408, -267.75),
("DT", -1, 1, 3): (1, -1, -1, 432.946, 1.13768, -287.25),
("DT", -1, 1, 4): (1, -1, -1, 432.946, 1.66128, -267.75),
("DT", -1, 1, 5): (1, -1, -1, 432.946, 2.18488, -267.75),
("DT", -1, 1, 6): (1, -1, -1, 432.946, 2.70847, -267.75),
("DT", -1, 1, 7): (1, -1, -1, 432.946, -3.05111, -267.75),
("DT", -1, 1, 8): (1, -1, -1, 432.946, -2.52751, -267.75),
("DT", -1, 1, 9): (1, -1, -1, 432.946, -2.00391, -267.75),
("DT", -1, 1, 10): (1, -1, -1, 432.946, -1.48032, -267.75),
("DT", -1, 1, 11): (1, -1, -1, 432.946, -0.956716, -267.75),
("DT", -1, 1, 12): (1, -1, -1, 432.946, -0.433118, -267.75),
("DT", -1, 2, 1): (1, -1, -1, 512.923, -0.0417923, -267.75),
("DT", -1, 2, 2): (1, -1, -1, 512.923, 0.481806, -267.75),
("DT", -1, 2, 3): (1, -1, -1, 512.923, 1.00541, -287.25),
("DT", -1, 2, 4): (1, -1, -1, 512.923, 1.529, -267.75),
("DT", -1, 2, 5): (1, -1, -1, 512.923, 2.0526, -267.75),
("DT", -1, 2, 6): (1, -1, -1, 512.923, 2.5762, -267.75),
("DT", -1, 2, 7): (1, -1, -1, 512.923, 3.0998, -267.75),
("DT", -1, 2, 8): (1, -1, -1, 512.923, -2.65979, -267.75),
("DT", -1, 2, 9): (1, -1, -1, 512.923, -2.13619, -267.75),
("DT", -1, 2, 10): (1, -1, -1, 512.923, -1.61259, -267.75),
("DT", -1, 2, 11): (1, -1, -1, 512.923, -1.08899, -267.75),
("DT", -1, 2, 12): (1, -1, -1, 512.923, -0.565391, -267.75),
("DT", -1, 3, 1): (1, -1, -1, 618.269, 0.0357202, -267.75),
("DT", -1, 3, 2): (1, -1, -1, 618.269, 0.559319, -267.75),
("DT", -1, 3, 3): (1, -1, -1, 618.269, 1.08292, -287.25),
("DT", -1, 3, 4): (1, -1, -1, 618.269, 1.60652, -267.75),
("DT", -1, 3, 5): (1, -1, -1, 618.269, 2.13012, -267.75),
("DT", -1, 3, 6): (1, -1, -1, 618.269, 2.65371, -267.75),
("DT", -1, 3, 7): (1, -1, -1, 618.269, -3.10587, -267.75),
("DT", -1, 3, 8): (1, -1, -1, 618.269, -2.58227, -267.75),
("DT", -1, 3, 9): (1, -1, -1, 618.269, -2.05868, -267.75),
("DT", -1, 3, 10): (1, -1, -1, 618.269, -1.53508, -267.75),
("DT", -1, 3, 11): (1, -1, -1, 618.269, -1.01148, -267.75),
("DT", -1, 3, 12): (1, -1, -1, 618.269, -0.487879, -267.75),
("DT", -1, 4, 1): (1, -1, -1, 726.425, -0.131007, -267.75),
("DT", -1, 4, 2): (1, -1, -1, 726.425, 0.392591, -267.75),
("DT", -1, 4, 3): (1, -1, -1, 726.425, 0.91619, -287.25),
("DT", -1, 4, 4): (1, -1, -1, 737.922, 1.35119, -267.75),
("DT", -1, 4, 13): (1, -1, -1, 737.922, 1.7904, -267.75),
("DT", -1, 4, 5): (1, -1, -1, 726.425, 2.2254, -267.75),
("DT", -1, 4, 6): (1, -1, -1, 726.425, 2.749, -267.75),
("DT", -1, 4, 7): (1, -1, -1, 726.425, -3.01059, -267.75),
("DT", -1, 4, 8): (1, -1, -1, 725.376, -2.49846, -267.75),
("DT", -1, 4, 9): (1, -1, -1, 722.674, -2.08612, -267.75),
("DT", -1, 4, 10): (1, -1, -1, 733.072, -1.75847, -267.75),
("DT", -1, 4, 14): (1, -1, -1, 733.072, -1.38313, -267.75),
("DT", -1, 4, 11): (1, -1, -1, 722.674, -1.05548, -267.75),
("DT", -1, 4, 12): (1, -1, -1, 725.376, -0.643132, -267.75),
("DT", 0, 1, 1): (1, -1, -1, 432.946, 0.0904811, 0.85),
("DT", 0, 1, 5): (1, -1, -1, 432.946, 2.18488, 0.85),
("DT", 0, 1, 9): (1, -1, -1, 432.946, -2.00391, 0.85),
("DT", 0, 1, 2): (-1, 1, -1, 432.946, 0.61408, -0.85),
("DT", 0, 1, 6): (-1, 1, -1, 432.946, 2.70847, -0.85),
("DT", 0, 1, 10): (-1, 1, -1, 432.946, -1.48032, -0.85),
("DT", 0, 1, 3): (-1, 1, -1, 432.946, 1.13768, -0.85),
("DT", 0, 1, 7): (-1, 1, -1, 432.946, -3.05111, -0.85),
("DT", 0, 1, 11): (-1, 1, -1, 432.946, -0.956716, -0.85),
("DT", 0, 1, 4): (1, -1, -1, 432.946, 1.66128, 0.85),
("DT", 0, 1, 8): (1, -1, -1, 432.946, -2.52751, 0.85),
("DT", 0, 1, 12): (1, -1, -1, 432.946, -0.433118, 0.85),
("DT", 0, 2, 1): (1, -1, -1, 512.923, -0.0417923, 0.85),
("DT", 0, 2, 5): (1, -1, -1, 512.923, 2.0526, 0.85),
("DT", 0, 2, 9): (1, -1, -1, 512.923, -2.13619, 0.85),
("DT", 0, 2, 2): (-1, 1, -1, 512.923, 0.481806, -0.85),
("DT", 0, 2, 6): (-1, 1, -1, 512.923, 2.5762, -0.85),
("DT", 0, 2, 10): (-1, 1, -1, 512.923, -1.61259, -0.85),
("DT", 0, 2, 3): (-1, 1, -1, 512.923, 1.00541, -0.85),
("DT", 0, 2, 7): (-1, 1, -1, 512.923, 3.0998, -0.85),
("DT", 0, 2, 11): (-1, 1, -1, 512.923, -1.08899, -0.85),
("DT", 0, 2, 4): (1, -1, -1, 512.923, 1.529, 0.85),
("DT", 0, 2, 8): (1, -1, -1, 512.923, -2.65979, 0.85),
("DT", 0, 2, 12): (1, -1, -1, 512.923, -0.565391, 0.85),
("DT", 0, 3, 1): (1, -1, -1, 618.269, 0.0357202, 0.85),
("DT", 0, 3, 5): (1, -1, -1, 618.269, 2.13012, 0.85),
("DT", 0, 3, 9): (1, -1, -1, 618.269, -2.05868, 0.85),
("DT", 0, 3, 2): (-1, 1, -1, 618.269, 0.559319, -0.85),
("DT", 0, 3, 6): (-1, 1, -1, 618.269, 2.65371, -0.85),
("DT", 0, 3, 10): (-1, 1, -1, 618.269, -1.53508, -0.85),
("DT", 0, 3, 3): (-1, 1, -1, 618.269, 1.08292, -0.85),
("DT", 0, 3, 7): (-1, 1, -1, 618.269, -3.10587, -0.85),
("DT", 0, 3, 11): (-1, 1, -1, 618.269, -1.01148, -0.85),
("DT", 0, 3, 4): (1, -1, -1, 618.269, 1.60652, 0.85),
("DT", 0, 3, 8): (1, -1, -1, 618.269, -2.58227, 0.85),
("DT", 0, 3, 12): (1, -1, -1, 618.269, -0.487879, 0.85),
("DT", 0, 4, 1): (1, -1, -1, 726.425, -0.131007, 0.85),
("DT", 0, 4, 2): (-1, 1, -1, 726.425, 0.392591, -0.85),
("DT", 0, 4, 3): (-1, 1, -1, 726.425, 0.91619, -0.85),
("DT", 0, 4, 4): (1, -1, -1, 737.922, 1.35119, 0.85),
("DT", 0, 4, 13): (1, -1, -1, 737.922, 1.7904, 0.85),
("DT", 0, 4, 5): (1, -1, -1, 726.425, 2.2254, 0.85),
("DT", 0, 4, 6): (-1, 1, -1, 726.425, 2.749, -0.85),
("DT", 0, 4, 7): (-1, 1, -1, 726.425, -3.01059, -0.85),
("DT", 0, 4, 8): (1, -1, -1, 725.376, -2.49846, 0.85),
("DT", 0, 4, 9): (1, -1, -1, 722.674, -2.08612, 0.85),
("DT", 0, 4, 10): (-1, 1, -1, 733.072, -1.75847, -0.85),
("DT", 0, 4, 14): (-1, 1, -1, 733.072, -1.38313, -0.85),
("DT", 0, 4, 11): (-1, 1, -1, 722.674, -1.05548, -0.85),
("DT", 0, 4, 12): (1, -1, -1, 725.376, -0.643132, 0.85),
("DT", 1, 1, 1): (-1, 1, -1, 432.946, 0.0904811, 267.75),
("DT", 1, 1, 2): (-1, 1, -1, 432.946, 0.61408, 267.75),
("DT", 1, 1, 3): (-1, 1, -1, 432.946, 1.13768, 267.75),
("DT", 1, 1, 4): (-1, 1, -1, 432.946, 1.66128, 287.25),
("DT", 1, 1, 5): (-1, 1, -1, 432.946, 2.18488, 267.75),
("DT", 1, 1, 6): (-1, 1, -1, 432.946, 2.70847, 267.75),
("DT", 1, 1, 7): (-1, 1, -1, 432.946, -3.05111, 267.75),
("DT", 1, 1, 8): (-1, 1, -1, 432.946, -2.52751, 267.75),
("DT", 1, 1, 9): (-1, 1, -1, 432.946, -2.00391, 267.75),
("DT", 1, 1, 10): (-1, 1, -1, 432.946, -1.48032, 267.75),
("DT", 1, 1, 11): (-1, 1, -1, 432.946, -0.956716, 267.75),
("DT", 1, 1, 12): (-1, 1, -1, 432.946, -0.433118, 267.75),
("DT", 1, 2, 1): (-1, 1, -1, 512.923, -0.0417923, 267.75),
("DT", 1, 2, 2): (-1, 1, -1, 512.923, 0.481806, 267.75),
("DT", 1, 2, 3): (-1, 1, -1, 512.923, 1.00541, 267.75),
("DT", 1, 2, 4): (-1, 1, -1, 512.923, 1.529, 287.25),
("DT", 1, 2, 5): (-1, 1, -1, 512.923, 2.0526, 267.75),
("DT", 1, 2, 6): (-1, 1, -1, 512.923, 2.5762, 267.75),
("DT", 1, 2, 7): (-1, 1, -1, 512.923, 3.0998, 267.75),
("DT", 1, 2, 8): (-1, 1, -1, 512.923, -2.65979, 267.75),
("DT", 1, 2, 9): (-1, 1, -1, 512.923, -2.13619, 267.75),
("DT", 1, 2, 10): (-1, 1, -1, 512.923, -1.61259, 267.75),
("DT", 1, 2, 11): (-1, 1, -1, 512.923, -1.08899, 267.75),
("DT", 1, 2, 12): (-1, 1, -1, 512.923, -0.565391, 267.75),
("DT", 1, 3, 1): (-1, 1, -1, 618.269, 0.0357202, 267.75),
("DT", 1, 3, 2): (-1, 1, -1, 618.269, 0.559319, 267.75),
("DT", 1, 3, 3): (-1, 1, -1, 618.269, 1.08292, 267.75),
("DT", 1, 3, 4): (-1, 1, -1, 618.269, 1.60652, 287.25),
("DT", 1, 3, 5): (-1, 1, -1, 618.269, 2.13012, 267.75),
("DT", 1, 3, 6): (-1, 1, -1, 618.269, 2.65371, 267.75),
("DT", 1, 3, 7): (-1, 1, -1, 618.269, -3.10587, 267.75),
("DT", 1, 3, 8): (-1, 1, -1, 618.269, -2.58227, 267.75),
("DT", 1, 3, 9): (-1, 1, -1, 618.269, -2.05868, 267.75),
("DT", 1, 3, 10): (-1, 1, -1, 618.269, -1.53508, 267.75),
("DT", 1, 3, 11): (-1, 1, -1, 618.269, -1.01148, 267.75),
("DT", 1, 3, 12): (-1, 1, -1, 618.269, -0.487879, 267.75),
("DT", 1, 4, 1): (-1, 1, -1, 726.425, -0.131007, 267.75),
("DT", 1, 4, 2): (-1, 1, -1, 726.425, 0.392591, 267.75),
("DT", 1, 4, 3): (-1, 1, -1, 726.425, 0.91619, 267.75),
("DT", 1, 4, 4): (-1, 1, -1, 737.922, 1.35119, 287.25),
("DT", 1, 4, 13): (-1, 1, -1, 737.922, 1.7904, 287.25),
("DT", 1, 4, 5): (-1, 1, -1, 726.425, 2.2254, 267.75),
("DT", 1, 4, 6): (-1, 1, -1, 726.425, 2.749, 267.75),
("DT", 1, 4, 7): (-1, 1, -1, 726.425, -3.01059, 267.75),
("DT", 1, 4, 8): (-1, 1, -1, 725.376, -2.49846, 267.75),
("DT", 1, 4, 9): (-1, 1, -1, 722.674, -2.08612, 267.75),
("DT", 1, 4, 10): (-1, 1, -1, 733.072, -1.75847, 267.75),
("DT", 1, 4, 14): (-1, 1, -1, 733.072, -1.38313, 267.75),
("DT", 1, 4, 11): (-1, 1, -1, 722.674, -1.05548, 267.75),
("DT", 1, 4, 12): (-1, 1, -1, 725.376, -0.643132, 267.75),
("DT", 2, 1, 1): (-1, 1, -1, 432.946, 0.0904811, 533.35),
("DT", 2, 1, 2): (-1, 1, -1, 432.946, 0.61408, 533.35),
("DT", 2, 1, 3): (-1, 1, -1, 432.946, 1.13768, 533.35),
("DT", 2, 1, 4): (-1, 1, -1, 432.946, 1.66128, 533.35),
("DT", 2, 1, 5): (-1, 1, -1, 432.946, 2.18488, 533.35),
("DT", 2, 1, 6): (-1, 1, -1, 432.946, 2.70847, 533.35),
("DT", 2, 1, 7): (-1, 1, -1, 432.946, -3.05111, 533.35),
("DT", 2, 1, 8): (-1, 1, -1, 432.946, -2.52751, 533.35),
("DT", 2, 1, 9): (-1, 1, -1, 432.946, -2.00391, 533.35),
("DT", 2, 1, 10): (-1, 1, -1, 432.946, -1.48032, 533.35),
("DT", 2, 1, 11): (-1, 1, -1, 432.946, -0.956716, 533.35),
("DT", 2, 1, 12): (-1, 1, -1, 432.946, -0.433118, 533.35),
("DT", 2, 2, 1): (-1, 1, -1, 512.923, -0.0417923, 533.35),
("DT", 2, 2, 2): (-1, 1, -1, 512.923, 0.481806, 533.35),
("DT", 2, 2, 3): (-1, 1, -1, 512.923, 1.00541, 533.35),
("DT", 2, 2, 4): (-1, 1, -1, 512.923, 1.529, 533.35),
("DT", 2, 2, 5): (-1, 1, -1, 512.923, 2.0526, 533.35),
("DT", 2, 2, 6): (-1, 1, -1, 512.923, 2.5762, 533.35),
("DT", 2, 2, 7): (-1, 1, -1, 512.923, 3.0998, 533.35),
("DT", 2, 2, 8): (-1, 1, -1, 512.923, -2.65979, 533.35),
("DT", 2, 2, 9): (-1, 1, -1, 512.923, -2.13619, 533.35),
("DT", 2, 2, 10): (-1, 1, -1, 512.923, -1.61259, 533.35),
("DT", 2, 2, 11): (-1, 1, -1, 512.923, -1.08899, 533.35),
("DT", 2, 2, 12): (-1, 1, -1, 512.923, -0.565391, 533.35),
("DT", 2, 3, 1): (-1, 1, -1, 618.269, 0.0357202, 533.35),
("DT", 2, 3, 2): (-1, 1, -1, 618.269, 0.559319, 533.35),
("DT", 2, 3, 3): (-1, 1, -1, 618.269, 1.08292, 533.35),
("DT", 2, 3, 4): (-1, 1, -1, 618.269, 1.60652, 533.35),
("DT", 2, 3, 5): (-1, 1, -1, 618.269, 2.13012, 533.35),
("DT", 2, 3, 6): (-1, 1, -1, 618.269, 2.65371, 533.35),
("DT", 2, 3, 7): (-1, 1, -1, 618.269, -3.10587, 533.35),
("DT", 2, 3, 8): (-1, 1, -1, 618.269, -2.58227, 533.35),
("DT", 2, 3, 9): (-1, 1, -1, 618.269, -2.05868, 533.35),
("DT", 2, 3, 10): (-1, 1, -1, 618.269, -1.53508, 533.35),
("DT", 2, 3, 11): (-1, 1, -1, 618.269, -1.01148, 533.35),
("DT", 2, 3, 12): (-1, 1, -1, 618.269, -0.487879, 533.35),
("DT", 2, 4, 1): (-1, 1, -1, 726.425, -0.131007, 533.35),
("DT", 2, 4, 2): (-1, 1, -1, 726.425, 0.392591, 533.35),
("DT", 2, 4, 3): (-1, 1, -1, 726.425, 0.91619, 533.35),
("DT", 2, 4, 4): (-1, 1, -1, 737.922, 1.35119, 533.35),
("DT", 2, 4, 13): (-1, 1, -1, 737.922, 1.7904, 533.35),
("DT", 2, 4, 5): (-1, 1, -1, 726.425, 2.2254, 533.35),
("DT", 2, 4, 6): (-1, 1, -1, 726.425, 2.749, 533.35),
("DT", 2, 4, 7): (-1, 1, -1, 726.425, -3.01059, 533.35),
("DT", 2, 4, 8): (-1, 1, -1, 725.376, -2.49846, 533.35),
("DT", 2, 4, 9): (-1, 1, -1, 722.674, -2.08612, 533.35),
("DT", 2, 4, 10): (-1, 1, -1, 733.072, -1.75847, 533.35),
("DT", 2, 4, 14): (-1, 1, -1, 733.072, -1.38313, 533.35),
("DT", 2, 4, 11): (-1, 1, -1, 722.674, -1.05548, 533.35),
("DT", 2, 4, 12): (-1, 1, -1, 725.376, -0.643132, 533.35),
("CSC", 1, 1, 1, 1): (1, 1, -1, 181.5, -1.74066e-15, 616.95),
("CSC", 1, 1, 1, 3): (1, 1, -1, 181.5, 0.349066, 616.95),
("CSC", 1, 1, 1, 5): (1, 1, -1, 181.5, 0.698132, 616.95),
("CSC", 1, 1, 1, 7): (1, 1, -1, 181.5, 1.0472, 616.95),
("CSC", 1, 1, 1, 9): (1, 1, -1, 181.5, 1.39626, 616.95),
("CSC", 1, 1, 1, 11): (1, 1, -1, 181.5, 1.74533, 616.95),
("CSC", 1, 1, 1, 13): (1, 1, -1, 181.5, 2.0944, 616.95),
("CSC", 1, 1, 1, 15): (1, 1, -1, 181.5, 2.44346, 616.95),
("CSC", 1, 1, 1, 17): (1, 1, -1, 181.5, 2.79253, 616.95),
("CSC", 1, 1, 1, 19): (1, 1, -1, 181.5, 3.14159, 616.95),
("CSC", 1, 1, 1, 21): (1, 1, -1, 181.5, -2.79253, 616.95),
("CSC", 1, 1, 1, 23): (1, 1, -1, 181.5, -2.44346, 616.95),
("CSC", 1, 1, 1, 25): (1, 1, -1, 181.5, -2.0944, 616.95),
("CSC", 1, 1, 1, 27): (1, 1, -1, 181.5, -1.74533, 616.95),
("CSC", 1, 1, 1, 29): (1, 1, -1, 181.5, -1.39626, 616.95),
("CSC", 1, 1, 1, 31): (1, 1, -1, 181.5, -1.0472, 616.95),
("CSC", 1, 1, 1, 33): (1, 1, -1, 181.5, -0.698132, 616.95),
("CSC", 1, 1, 1, 35): (1, 1, -1, 181.5, -0.349066, 616.95),
("CSC", 1, 1, 1, 2): (1, 1, -1, 181.5, 0.174533, 587.65),
("CSC", 1, 1, 1, 4): (1, 1, -1, 181.5, 0.523599, 587.65),
("CSC", 1, 1, 1, 6): (1, 1, -1, 181.5, 0.872665, 587.65),
("CSC", 1, 1, 1, 8): (1, 1, -1, 181.5, 1.22173, 587.65),
("CSC", 1, 1, 1, 10): (1, 1, -1, 181.5, 1.5708, 587.65),
("CSC", 1, 1, 1, 12): (1, 1, -1, 181.5, 1.91986, 587.65),
("CSC", 1, 1, 1, 14): (1, 1, -1, 181.5, 2.26893, 587.65),
("CSC", 1, 1, 1, 16): (1, 1, -1, 181.5, 2.61799, 587.65),
("CSC", 1, 1, 1, 18): (1, 1, -1, 181.5, 2.96706, 587.65),
("CSC", 1, 1, 1, 20): (1, 1, -1, 181.5, -2.96706, 587.65),
("CSC", 1, 1, 1, 22): (1, 1, -1, 181.5, -2.61799, 587.65),
("CSC", 1, 1, 1, 24): (1, 1, -1, 181.5, -2.26893, 587.65),
("CSC", 1, 1, 1, 26): (1, 1, -1, 181.5, -1.91986, 587.65),
("CSC", 1, 1, 1, 28): (1, 1, -1, 181.5, -1.5708, 587.65),
("CSC", 1, 1, 1, 30): (1, 1, -1, 181.5, -1.22173, 587.65),
("CSC", 1, 1, 1, 32): (1, 1, -1, 181.5, -0.872665, 587.65),
("CSC", 1, 1, 1, 34): (1, 1, -1, 181.5, -0.523599, 587.65),
("CSC", 1, 1, 1, 36): (1, 1, -1, 181.5, -0.174533, 587.65),
("CSC", 1, 1, 2, 1): (1, 1, -1, 369.7, -1.19913e-15, 712.761),
("CSC", 1, 1, 2, 3): (1, 1, -1, 369.7, 0.349066, 712.761),
("CSC", 1, 1, 2, 5): (1, 1, -1, 369.7, 0.698132, 712.761),
("CSC", 1, 1, 2, 7): (1, 1, -1, 369.7, 1.0472, 712.761),
("CSC", 1, 1, 2, 9): (1, 1, -1, 369.7, 1.39626, 712.761),
("CSC", 1, 1, 2, 11): (1, 1, -1, 369.7, 1.74533, 712.761),
("CSC", 1, 1, 2, 13): (1, 1, -1, 369.7, 2.0944, 712.761),
("CSC", 1, 1, 2, 15): (1, 1, -1, 369.7, 2.44346, 712.761),
("CSC", 1, 1, 2, 17): (1, 1, -1, 369.7, 2.79253, 712.761),
("CSC", 1, 1, 2, 19): (1, 1, -1, 369.7, 3.14159, 712.761),
("CSC", 1, 1, 2, 21): (1, 1, -1, 369.7, -2.79253, 712.761),
("CSC", 1, 1, 2, 23): (1, 1, -1, 369.7, -2.44346, 712.761),
("CSC", 1, 1, 2, 25): (1, 1, -1, 369.7, -2.0944, 712.761),
("CSC", 1, 1, 2, 27): (1, 1, -1, 369.7, -1.74533, 712.761),
("CSC", 1, 1, 2, 29): (1, 1, -1, 369.7, -1.39626, 712.761),
("CSC", 1, 1, 2, 31): (1, 1, -1, 369.7, -1.0472, 712.761),
("CSC", 1, 1, 2, 33): (1, 1, -1, 369.7, -0.698132, 712.761),
("CSC", 1, 1, 2, 35): (1, 1, -1, 369.7, -0.349066, 712.761),
("CSC", 1, 1, 2, 2): (1, 1, -1, 369.7, 0.174533, 685.361),
("CSC", 1, 1, 2, 4): (1, 1, -1, 369.7, 0.523599, 685.361),
("CSC", 1, 1, 2, 6): (1, 1, -1, 369.7, 0.872665, 685.361),
("CSC", 1, 1, 2, 8): (1, 1, -1, 369.7, 1.22173, 685.361),
("CSC", 1, 1, 2, 10): (1, 1, -1, 369.7, 1.5708, 685.361),
("CSC", 1, 1, 2, 12): (1, 1, -1, 369.7, 1.91986, 685.361),
("CSC", 1, 1, 2, 14): (1, 1, -1, 369.7, 2.26893, 685.361),
("CSC", 1, 1, 2, 16): (1, 1, -1, 369.7, 2.61799, 685.361),
("CSC", 1, 1, 2, 18): (1, 1, -1, 369.7, 2.96706, 685.361),
("CSC", 1, 1, 2, 20): (1, 1, -1, 369.7, -2.96706, 685.361),
("CSC", 1, 1, 2, 22): (1, 1, -1, 369.7, -2.61799, 685.361),
("CSC", 1, 1, 2, 24): (1, 1, -1, 369.7, -2.26893, 685.361),
("CSC", 1, 1, 2, 26): (1, 1, -1, 369.7, -1.91986, 685.361),
("CSC", 1, 1, 2, 28): (1, 1, -1, 369.7, -1.5708, 685.361),
("CSC", 1, 1, 2, 30): (1, 1, -1, 369.7, -1.22173, 685.361),
("CSC", 1, 1, 2, 32): (1, 1, -1, 369.7, -0.872665, 685.361),
("CSC", 1, 1, 2, 34): (1, 1, -1, 369.7, -0.523599, 685.361),
("CSC", 1, 1, 2, 36): (1, 1, -1, 369.7, -0.174533, 685.361),
("CSC", 1, 1, 3, 1): (1, 1, -1, 595.15, -9.19576e-16, 695.159),
("CSC", 1, 1, 3, 2): (1, 1, -1, 595.15, 0.174533, 695.159),
("CSC", 1, 1, 3, 3): (1, 1, -1, 595.15, 0.349066, 695.159),
("CSC", 1, 1, 3, 4): (1, 1, -1, 595.15, 0.523599, 695.159),
("CSC", 1, 1, 3, 5): (1, 1, -1, 595.15, 0.698132, 695.159),
("CSC", 1, 1, 3, 6): (1, 1, -1, 595.15, 0.872665, 695.159),
("CSC", 1, 1, 3, 7): (1, 1, -1, 595.15, 1.0472, 695.159),
("CSC", 1, 1, 3, 8): (1, 1, -1, 595.15, 1.22173, 695.159),
("CSC", 1, 1, 3, 9): (1, 1, -1, 595.15, 1.39626, 695.159),
("CSC", 1, 1, 3, 10): (1, 1, -1, 595.15, 1.5708, 695.159),
("CSC", 1, 1, 3, 11): (1, 1, -1, 595.15, 1.74533, 695.159),
("CSC", 1, 1, 3, 12): (1, 1, -1, 595.15, 1.91986, 695.159),
("CSC", 1, 1, 3, 13): (1, 1, -1, 595.15, 2.0944, 695.159),
("CSC", 1, 1, 3, 14): (1, 1, -1, 595.15, 2.26893, 695.159),
("CSC", 1, 1, 3, 15): (1, 1, -1, 595.15, 2.44346, 695.159),
("CSC", 1, 1, 3, 16): (1, 1, -1, 595.15, 2.61799, 695.159),
("CSC", 1, 1, 3, 17): (1, 1, -1, 595.15, 2.79253, 695.159),
("CSC", 1, 1, 3, 18): (1, 1, -1, 595.15, 2.96706, 695.159),
("CSC", 1, 1, 3, 19): (1, 1, -1, 595.15, -3.14159, 695.159),
("CSC", 1, 1, 3, 20): (1, 1, -1, 595.15, -2.96706, 695.159),
("CSC", 1, 1, 3, 21): (1, 1, -1, 595.15, -2.79253, 695.159),
("CSC", 1, 1, 3, 22): (1, 1, -1, 595.15, -2.61799, 695.159),
("CSC", 1, 1, 3, 23): (1, 1, -1, 595.15, -2.44346, 695.159),
("CSC", 1, 1, 3, 24): (1, 1, -1, 595.15, -2.26893, 695.159),
("CSC", 1, 1, 3, 25): (1, 1, -1, 595.15, -2.0944, 695.159),
("CSC", 1, 1, 3, 26): (1, 1, -1, 595.15, -1.91986, 695.159),
("CSC", 1, 1, 3, 27): (1, 1, -1, 595.15, -1.74533, 695.159),
("CSC", 1, 1, 3, 28): (1, 1, -1, 595.15, -1.5708, 695.159),
("CSC", 1, 1, 3, 29): (1, 1, -1, 595.15, -1.39626, 695.159),
("CSC", 1, 1, 3, 30): (1, 1, -1, 595.15, -1.22173, 695.159),
("CSC", 1, 1, 3, 31): (1, 1, -1, 595.15, -1.0472, 695.159),
("CSC", 1, 1, 3, 32): (1, 1, -1, 595.15, -0.872665, 695.159),
("CSC", 1, 1, 3, 33): (1, 1, -1, 595.15, -0.698132, 695.159),
("CSC", 1, 1, 3, 34): (1, 1, -1, 595.15, -0.523599, 695.159),
("CSC", 1, 1, 3, 35): (1, 1, -1, 595.15, -0.349066, 695.159),
("CSC", 1, 1, 3, 36): (1, 1, -1, 595.15, -0.174533, 695.159),
("CSC", 1, 1, 4, 1): (1, 1, -1, 181.5, -1.74066e-15, 616.95),
("CSC", 1, 1, 4, 3): (1, 1, -1, 181.5, 0.349066, 616.95),
("CSC", 1, 1, 4, 5): (1, 1, -1, 181.5, 0.698132, 616.95),
("CSC", 1, 1, 4, 7): (1, 1, -1, 181.5, 1.0472, 616.95),
("CSC", 1, 1, 4, 9): (1, 1, -1, 181.5, 1.39626, 616.95),
("CSC", 1, 1, 4, 11): (1, 1, -1, 181.5, 1.74533, 616.95),
("CSC", 1, 1, 4, 13): (1, 1, -1, 181.5, 2.0944, 616.95),
("CSC", 1, 1, 4, 15): (1, 1, -1, 181.5, 2.44346, 616.95),
("CSC", 1, 1, 4, 17): (1, 1, -1, 181.5, 2.79253, 616.95),
("CSC", 1, 1, 4, 19): (1, 1, -1, 181.5, 3.14159, 616.95),
("CSC", 1, 1, 4, 21): (1, 1, -1, 181.5, -2.79253, 616.95),
("CSC", 1, 1, 4, 23): (1, 1, -1, 181.5, -2.44346, 616.95),
("CSC", 1, 1, 4, 25): (1, 1, -1, 181.5, -2.0944, 616.95),
("CSC", 1, 1, 4, 27): (1, 1, -1, 181.5, -1.74533, 616.95),
("CSC", 1, 1, 4, 29): (1, 1, -1, 181.5, -1.39626, 616.95),
("CSC", 1, 1, 4, 31): (1, 1, -1, 181.5, -1.0472, 616.95),
("CSC", 1, 1, 4, 33): (1, 1, -1, 181.5, -0.698132, 616.95),
("CSC", 1, 1, 4, 35): (1, 1, -1, 181.5, -0.349066, 616.95),
("CSC", 1, 1, 4, 2): (1, 1, -1, 181.5, 0.174533, 587.65),
("CSC", 1, 1, 4, 4): (1, 1, -1, 181.5, 0.523599, 587.65),
("CSC", 1, 1, 4, 6): (1, 1, -1, 181.5, 0.872665, 587.65),
("CSC", 1, 1, 4, 8): (1, 1, -1, 181.5, 1.22173, 587.65),
("CSC", 1, 1, 4, 10): (1, 1, -1, 181.5, 1.5708, 587.65),
("CSC", 1, 1, 4, 12): (1, 1, -1, 181.5, 1.91986, 587.65),
("CSC", 1, 1, 4, 14): (1, 1, -1, 181.5, 2.26893, 587.65),
("CSC", 1, 1, 4, 16): (1, 1, -1, 181.5, 2.61799, 587.65),
("CSC", 1, 1, 4, 18): (1, 1, -1, 181.5, 2.96706, 587.65),
("CSC", 1, 1, 4, 20): (1, 1, -1, 181.5, -2.96706, 587.65),
("CSC", 1, 1, 4, 22): (1, 1, -1, 181.5, -2.61799, 587.65),
("CSC", 1, 1, 4, 24): (1, 1, -1, 181.5, -2.26893, 587.65),
("CSC", 1, 1, 4, 26): (1, 1, -1, 181.5, -1.91986, 587.65),
("CSC", 1, 1, 4, 28): (1, 1, -1, 181.5, -1.5708, 587.65),
("CSC", 1, 1, 4, 30): (1, 1, -1, 181.5, -1.22173, 587.65),
("CSC", 1, 1, 4, 32): (1, 1, -1, 181.5, -0.872665, 587.65),
("CSC", 1, 1, 4, 34): (1, 1, -1, 181.5, -0.523599, 587.65),
("CSC", 1, 1, 4, 36): (1, 1, -1, 181.5, -0.174533, 587.65),
("CSC", 1, 2, 1, 1): (1, 1, -1, 242.7, 0.0872665, 840.961),
("CSC", 1, 2, 1, 3): (1, 1, -1, 242.7, 0.785398, 840.961),
("CSC", 1, 2, 1, 5): (1, 1, -1, 242.7, 1.48353, 840.961),
("CSC", 1, 2, 1, 7): (1, 1, -1, 242.7, 2.18166, 840.961),
("CSC", 1, 2, 1, 9): (1, 1, -1, 242.7, 2.87979, 840.961),
("CSC", 1, 2, 1, 11): (1, 1, -1, 242.7, -2.70526, 840.961),
("CSC", 1, 2, 1, 13): (1, 1, -1, 242.7, -2.00713, 840.961),
("CSC", 1, 2, 1, 15): (1, 1, -1, 242.7, -1.309, 840.961),
("CSC", 1, 2, 1, 17): (1, 1, -1, 242.7, -0.610865, 840.961),
("CSC", 1, 2, 1, 2): (1, 1, -1, 242.7, 0.436332, 816.161),
("CSC", 1, 2, 1, 4): (1, 1, -1, 242.7, 1.13446, 816.161),
("CSC", 1, 2, 1, 6): (1, 1, -1, 242.7, 1.8326, 816.161),
("CSC", 1, 2, 1, 8): (1, 1, -1, 242.7, 2.53073, 816.161),
("CSC", 1, 2, 1, 10): (1, 1, -1, 242.7, -3.05433, 816.161),
("CSC", 1, 2, 1, 12): (1, 1, -1, 242.7, -2.35619, 816.161),
("CSC", 1, 2, 1, 14): (1, 1, -1, 242.7, -1.65806, 816.161),
("CSC", 1, 2, 1, 16): (1, 1, -1, 242.7, -0.959931, 816.161),
("CSC", 1, 2, 1, 18): (1, 1, -1, 242.7, -0.261799, 816.161),
("CSC", 1, 2, 2, 1): (1, 1, -1, 526.5, -1.07735e-15, 840.961),
("CSC", 1, 2, 2, 3): (1, 1, -1, 526.5, 0.349066, 840.961),
("CSC", 1, 2, 2, 5): (1, 1, -1, 526.5, 0.698132, 840.961),
("CSC", 1, 2, 2, 7): (1, 1, -1, 526.5, 1.0472, 840.961),
("CSC", 1, 2, 2, 9): (1, 1, -1, 526.5, 1.39626, 840.961),
("CSC", 1, 2, 2, 11): (1, 1, -1, 526.5, 1.74533, 840.961),
("CSC", 1, 2, 2, 13): (1, 1, -1, 526.5, 2.0944, 840.961),
("CSC", 1, 2, 2, 15): (1, 1, -1, 526.5, 2.44346, 840.961),
("CSC", 1, 2, 2, 17): (1, 1, -1, 526.5, 2.79253, 840.961),
("CSC", 1, 2, 2, 19): (1, 1, -1, 526.5, -3.14159, 840.961),
("CSC", 1, 2, 2, 21): (1, 1, -1, 526.5, -2.79253, 840.961),
("CSC", 1, 2, 2, 23): (1, 1, -1, 526.5, -2.44346, 840.961),
("CSC", 1, 2, 2, 25): (1, 1, -1, 526.5, -2.0944, 840.961),
("CSC", 1, 2, 2, 27): (1, 1, -1, 526.5, -1.74533, 840.961),
("CSC", 1, 2, 2, 29): (1, 1, -1, 526.5, -1.39626, 840.961),
("CSC", 1, 2, 2, 31): (1, 1, -1, 526.5, -1.0472, 840.961),
("CSC", 1, 2, 2, 33): (1, 1, -1, 526.5, -0.698132, 840.961),
("CSC", 1, 2, 2, 35): (1, 1, -1, 526.5, -0.349066, 840.961),
("CSC", 1, 2, 2, 2): (1, 1, -1, 526.5, 0.174533, 816.161),
("CSC", 1, 2, 2, 4): (1, 1, -1, 526.5, 0.523599, 816.161),
("CSC", 1, 2, 2, 6): (1, 1, -1, 526.5, 0.872665, 816.161),
("CSC", 1, 2, 2, 8): (1, 1, -1, 526.5, 1.22173, 816.161),
("CSC", 1, 2, 2, 10): (1, 1, -1, 526.5, 1.5708, 816.161),
("CSC", 1, 2, 2, 12): (1, 1, -1, 526.5, 1.91986, 816.161),
("CSC", 1, 2, 2, 14): (1, 1, -1, 526.5, 2.26893, 816.161),
("CSC", 1, 2, 2, 16): (1, 1, -1, 526.5, 2.61799, 816.161),
("CSC", 1, 2, 2, 18): (1, 1, -1, 526.5, 2.96706, 816.161),
("CSC", 1, 2, 2, 20): (1, 1, -1, 526.5, -2.96706, 816.161),
("CSC", 1, 2, 2, 22): (1, 1, -1, 526.5, -2.61799, 816.161),
("CSC", 1, 2, 2, 24): (1, 1, -1, 526.5, -2.26893, 816.161),
("CSC", 1, 2, 2, 26): (1, 1, -1, 526.5, -1.91986, 816.161),
("CSC", 1, 2, 2, 28): (1, 1, -1, 526.5, -1.5708, 816.161),
("CSC", 1, 2, 2, 30): (1, 1, -1, 526.5, -1.22173, 816.161),
("CSC", 1, 2, 2, 32): (1, 1, -1, 526.5, -0.872665, 816.161),
("CSC", 1, 2, 2, 34): (1, 1, -1, 526.5, -0.523599, 816.161),
("CSC", 1, 2, 2, 36): (1, 1, -1, 526.5, -0.174533, 816.161),
("CSC", 1, 3, 1, 1): (-1, 1, 1, 252.7, 0.0872665, 923.039),
("CSC", 1, 3, 1, 3): (-1, 1, 1, 252.7, 0.785398, 923.039),
("CSC", 1, 3, 1, 5): (-1, 1, 1, 252.7, 1.48353, 923.039),
("CSC", 1, 3, 1, 7): (-1, 1, 1, 252.7, 2.18166, 923.039),
("CSC", 1, 3, 1, 9): (-1, 1, 1, 252.7, 2.87979, 923.039),
("CSC", 1, 3, 1, 11): (-1, 1, 1, 252.7, -2.70526, 923.039),
("CSC", 1, 3, 1, 13): (-1, 1, 1, 252.7, -2.00713, 923.039),
("CSC", 1, 3, 1, 15): (-1, 1, 1, 252.7, -1.309, 923.039),
("CSC", 1, 3, 1, 17): (-1, 1, 1, 252.7, -0.610865, 923.039),
("CSC", 1, 3, 1, 2): (-1, 1, 1, 252.7, 0.436332, 947.839),
("CSC", 1, 3, 1, 4): (-1, 1, 1, 252.7, 1.13446, 947.839),
("CSC", 1, 3, 1, 6): (-1, 1, 1, 252.7, 1.8326, 947.839),
("CSC", 1, 3, 1, 8): (-1, 1, 1, 252.7, 2.53073, 947.839),
("CSC", 1, 3, 1, 10): (-1, 1, 1, 252.7, -3.05433, 947.839),
("CSC", 1, 3, 1, 12): (-1, 1, 1, 252.7, -2.35619, 947.839),
("CSC", 1, 3, 1, 14): (-1, 1, 1, 252.7, -1.65806, 947.839),
("CSC", 1, 3, 1, 16): (-1, 1, 1, 252.7, -0.959931, 947.839),
("CSC", 1, 3, 1, 18): (-1, 1, 1, 252.7, -0.261799, 947.839),
("CSC", 1, 3, 2, 1): (-1, 1, 1, 526.5, -1.13392e-15, 923.039),
("CSC", 1, 3, 2, 3): (-1, 1, 1, 526.5, 0.349066, 923.039),
("CSC", 1, 3, 2, 5): (-1, 1, 1, 526.5, 0.698132, 923.039),
("CSC", 1, 3, 2, 7): (-1, 1, 1, 526.5, 1.0472, 923.039),
("CSC", 1, 3, 2, 9): (-1, 1, 1, 526.5, 1.39626, 923.039),
("CSC", 1, 3, 2, 11): (-1, 1, 1, 526.5, 1.74533, 923.039),
("CSC", 1, 3, 2, 13): (-1, 1, 1, 526.5, 2.0944, 923.039),
("CSC", 1, 3, 2, 15): (-1, 1, 1, 526.5, 2.44346, 923.039),
("CSC", 1, 3, 2, 17): (-1, 1, 1, 526.5, 2.79253, 923.039),
("CSC", 1, 3, 2, 19): (-1, 1, 1, 526.5, 3.14159, 923.039),
("CSC", 1, 3, 2, 21): (-1, 1, 1, 526.5, -2.79253, 923.039),
("CSC", 1, 3, 2, 23): (-1, 1, 1, 526.5, -2.44346, 923.039),
("CSC", 1, 3, 2, 25): (-1, 1, 1, 526.5, -2.0944, 923.039),
("CSC", 1, 3, 2, 27): (-1, 1, 1, 526.5, -1.74533, 923.039),
("CSC", 1, 3, 2, 29): (-1, 1, 1, 526.5, -1.39626, 923.039),
("CSC", 1, 3, 2, 31): (-1, 1, 1, 526.5, -1.0472, 923.039),
("CSC", 1, 3, 2, 33): (-1, 1, 1, 526.5, -0.698132, 923.039),
("CSC", 1, 3, 2, 35): (-1, 1, 1, 526.5, -0.349066, 923.039),
("CSC", 1, 3, 2, 2): (-1, 1, 1, 526.5, 0.174533, 947.839),
("CSC", 1, 3, 2, 4): (-1, 1, 1, 526.5, 0.523599, 947.839),
("CSC", 1, 3, 2, 6): (-1, 1, 1, 526.5, 0.872665, 947.839),
("CSC", 1, 3, 2, 8): (-1, 1, 1, 526.5, 1.22173, 947.839),
("CSC", 1, 3, 2, 10): (-1, 1, 1, 526.5, 1.5708, 947.839),
("CSC", 1, 3, 2, 12): (-1, 1, 1, 526.5, 1.91986, 947.839),
("CSC", 1, 3, 2, 14): (-1, 1, 1, 526.5, 2.26893, 947.839),
("CSC", 1, 3, 2, 16): (-1, 1, 1, 526.5, 2.61799, 947.839),
("CSC", 1, 3, 2, 18): (-1, 1, 1, 526.5, 2.96706, 947.839),
("CSC", 1, 3, 2, 20): (-1, 1, 1, 526.5, -2.96706, 947.839),
("CSC", 1, 3, 2, 22): (-1, 1, 1, 526.5, -2.61799, 947.839),
("CSC", 1, 3, 2, 24): (-1, 1, 1, 526.5, -2.26893, 947.839),
("CSC", 1, 3, 2, 26): (-1, 1, 1, 526.5, -1.91986, 947.839),
("CSC", 1, 3, 2, 28): (-1, 1, 1, 526.5, -1.5708, 947.839),
("CSC", 1, 3, 2, 30): (-1, 1, 1, 526.5, -1.22173, 947.839),
("CSC", 1, 3, 2, 32): (-1, 1, 1, 526.5, -0.872665, 947.839),
("CSC", 1, 3, 2, 34): (-1, 1, 1, 526.5, -0.523599, 947.839),
("CSC", 1, 3, 2, 36): (-1, 1, 1, 526.5, -0.174533, 947.839),
("CSC", 1, 4, 1, 1): (-1, 1, 1, 262.65, 0.0872665, 1012.54),
("CSC", 1, 4, 1, 3): (-1, 1, 1, 262.65, 0.785398, 1012.54),
("CSC", 1, 4, 1, 5): (-1, 1, 1, 262.65, 1.48353, 1012.54),
("CSC", 1, 4, 1, 7): (-1, 1, 1, 262.65, 2.18166, 1012.54),
("CSC", 1, 4, 1, 9): (-1, 1, 1, 262.65, 2.87979, 1012.54),
("CSC", 1, 4, 1, 11): (-1, 1, 1, 262.65, -2.70526, 1012.54),
("CSC", 1, 4, 1, 13): (-1, 1, 1, 262.65, -2.00713, 1012.54),
("CSC", 1, 4, 1, 15): (-1, 1, 1, 262.65, -1.309, 1012.54),
("CSC", 1, 4, 1, 17): (-1, 1, 1, 262.65, -0.610865, 1012.54),
("CSC", 1, 4, 1, 2): (-1, 1, 1, 262.65, 0.436332, 1037.34),
("CSC", 1, 4, 1, 4): (-1, 1, 1, 262.65, 1.13446, 1037.34),
("CSC", 1, 4, 1, 6): (-1, 1, 1, 262.65, 1.8326, 1037.34),
("CSC", 1, 4, 1, 8): (-1, 1, 1, 262.65, 2.53073, 1037.34),
("CSC", 1, 4, 1, 10): (-1, 1, 1, 262.65, -3.05433, 1037.34),
("CSC", 1, 4, 1, 12): (-1, 1, 1, 262.65, -2.35619, 1037.34),
("CSC", 1, 4, 1, 14): (-1, 1, 1, 262.65, -1.65806, 1037.34),
("CSC", 1, 4, 1, 16): (-1, 1, 1, 262.65, -0.959931, 1037.34),
("CSC", 1, 4, 1, 18): (-1, 1, 1, 262.65, -0.261799, 1037.34),
("CSC", 1, 4, 2, 1): (-1, 1, 1, 526.5, -1.19637e-15, 1012.54),
("CSC", 1, 4, 2, 3): (-1, 1, 1, 526.5, 0.349066, 1012.54),
("CSC", 1, 4, 2, 5): (-1, 1, 1, 526.5, 0.698132, 1012.54),
("CSC", 1, 4, 2, 7): (-1, 1, 1, 526.5, 1.0472, 1012.54),
("CSC", 1, 4, 2, 9): (-1, 1, 1, 526.5, 1.39626, 1012.54),
("CSC", 1, 4, 2, 11): (-1, 1, 1, 526.5, 1.74533, 1012.54),
("CSC", 1, 4, 2, 13): (-1, 1, 1, 526.5, 2.0944, 1012.54),
("CSC", 1, 4, 2, 15): (-1, 1, 1, 526.5, 2.44346, 1012.54),
("CSC", 1, 4, 2, 17): (-1, 1, 1, 526.5, 2.79253, 1012.54),
("CSC", 1, 4, 2, 19): (-1, 1, 1, 526.5, 3.14159, 1012.54),
("CSC", 1, 4, 2, 21): (-1, 1, 1, 526.5, -2.79253, 1012.54),
("CSC", 1, 4, 2, 23): (-1, 1, 1, 526.5, -2.44346, 1012.54),
("CSC", 1, 4, 2, 25): (-1, 1, 1, 526.5, -2.0944, 1012.54),
("CSC", 1, 4, 2, 27): (-1, 1, 1, 526.5, -1.74533, 1012.54),
("CSC", 1, 4, 2, 29): (-1, 1, 1, 526.5, -1.39626, 1012.54),
("CSC", 1, 4, 2, 31): (-1, 1, 1, 526.5, -1.0472, 1012.54),
("CSC", 1, 4, 2, 33): (-1, 1, 1, 526.5, -0.698132, 1012.54),
("CSC", 1, 4, 2, 35): (-1, 1, 1, 526.5, -0.349066, 1012.54),
("CSC", 1, 4, 2, 2): (-1, 1, 1, 526.5, 0.174533, 1037.34),
("CSC", 1, 4, 2, 4): (-1, 1, 1, 526.5, 0.523599, 1037.34),
("CSC", 1, 4, 2, 6): (-1, 1, 1, 526.5, 0.872665, 1037.34),
("CSC", 1, 4, 2, 8): (-1, 1, 1, 526.5, 1.22173, 1037.34),
("CSC", 1, 4, 2, 10): (-1, 1, 1, 526.5, 1.5708, 1037.34),
("CSC", 1, 4, 2, 12): (-1, 1, 1, 526.5, 1.91986, 1037.34),
("CSC", 1, 4, 2, 14): (-1, 1, 1, 526.5, 2.26893, 1037.34),
("CSC", 1, 4, 2, 16): (-1, 1, 1, 526.5, 2.61799, 1037.34),
("CSC", 1, 4, 2, 18): (-1, 1, 1, 526.5, 2.96706, 1037.34),
("CSC", 1, 4, 2, 20): (-1, 1, 1, 526.5, -2.96706, 1037.34),
("CSC", 1, 4, 2, 22): (-1, 1, 1, 526.5, -2.61799, 1037.34),
("CSC", 1, 4, 2, 24): (-1, 1, 1, 526.5, -2.26893, 1037.34),
("CSC", 1, 4, 2, 26): (-1, 1, 1, 526.5, -1.91986, 1037.34),
("CSC", 1, 4, 2, 28): (-1, 1, 1, 526.5, -1.5708, 1037.34),
("CSC", 1, 4, 2, 30): (-1, 1, 1, 526.5, -1.22173, 1037.34),
("CSC", 1, 4, 2, 32): (-1, 1, 1, 526.5, -0.872665, 1037.34),
("CSC", 1, 4, 2, 34): (-1, 1, 1, 526.5, -0.523599, 1037.34),
("CSC", 1, 4, 2, 36): (-1, 1, 1, 526.5, -0.174533, 1037.34),
("CSC", 2, 1, 1, 1): (-1, 1, 1, 181.5, 1.12532e-15, -616.95),
("CSC", 2, 1, 1, 3): (-1, 1, 1, 181.5, 0.349066, -616.95),
("CSC", 2, 1, 1, 5): (-1, 1, 1, 181.5, 0.698132, -616.95),
("CSC", 2, 1, 1, 7): (-1, 1, 1, 181.5, 1.0472, -616.95),
("CSC", 2, 1, 1, 9): (-1, 1, 1, 181.5, 1.39626, -616.95),
("CSC", 2, 1, 1, 11): (-1, 1, 1, 181.5, 1.74533, -616.95),
("CSC", 2, 1, 1, 13): (-1, 1, 1, 181.5, 2.0944, -616.95),
("CSC", 2, 1, 1, 15): (-1, 1, 1, 181.5, 2.44346, -616.95),
("CSC", 2, 1, 1, 17): (-1, 1, 1, 181.5, 2.79253, -616.95),
("CSC", 2, 1, 1, 19): (-1, 1, 1, 181.5, -3.14159, -616.95),
("CSC", 2, 1, 1, 21): (-1, 1, 1, 181.5, -2.79253, -616.95),
("CSC", 2, 1, 1, 23): (-1, 1, 1, 181.5, -2.44346, -616.95),
("CSC", 2, 1, 1, 25): (-1, 1, 1, 181.5, -2.0944, -616.95),
("CSC", 2, 1, 1, 27): (-1, 1, 1, 181.5, -1.74533, -616.95),
("CSC", 2, 1, 1, 29): (-1, 1, 1, 181.5, -1.39626, -616.95),
("CSC", 2, 1, 1, 31): (-1, 1, 1, 181.5, -1.0472, -616.95),
("CSC", 2, 1, 1, 33): (-1, 1, 1, 181.5, -0.698132, -616.95),
("CSC", 2, 1, 1, 35): (-1, 1, 1, 181.5, -0.349066, -616.95),
("CSC", 2, 1, 1, 2): (-1, 1, 1, 181.5, 0.174533, -587.65),
("CSC", 2, 1, 1, 4): (-1, 1, 1, 181.5, 0.523599, -587.65),
("CSC", 2, 1, 1, 6): (-1, 1, 1, 181.5, 0.872665, -587.65),
("CSC", 2, 1, 1, 8): (-1, 1, 1, 181.5, 1.22173, -587.65),
("CSC", 2, 1, 1, 10): (-1, 1, 1, 181.5, 1.5708, -587.65),
("CSC", 2, 1, 1, 12): (-1, 1, 1, 181.5, 1.91986, -587.65),
("CSC", 2, 1, 1, 14): (-1, 1, 1, 181.5, 2.26893, -587.65),
("CSC", 2, 1, 1, 16): (-1, 1, 1, 181.5, 2.61799, -587.65),
("CSC", 2, 1, 1, 18): (-1, 1, 1, 181.5, 2.96706, -587.65),
("CSC", 2, 1, 1, 20): (-1, 1, 1, 181.5, -2.96706, -587.65),
("CSC", 2, 1, 1, 22): (-1, 1, 1, 181.5, -2.61799, -587.65),
("CSC", 2, 1, 1, 24): (-1, 1, 1, 181.5, -2.26893, -587.65),
("CSC", 2, 1, 1, 26): (-1, 1, 1, 181.5, -1.91986, -587.65),
("CSC", 2, 1, 1, 28): (-1, 1, 1, 181.5, -1.5708, -587.65),
("CSC", 2, 1, 1, 30): (-1, 1, 1, 181.5, -1.22173, -587.65),
("CSC", 2, 1, 1, 32): (-1, 1, 1, 181.5, -0.872665, -587.65),
("CSC", 2, 1, 1, 34): (-1, 1, 1, 181.5, -0.523599, -587.65),
("CSC", 2, 1, 1, 36): (-1, 1, 1, 181.5, -0.174533, -587.65),
("CSC", 2, 1, 2, 1): (-1, 1, 1, 369.7, 5.85335e-16, -712.761),
("CSC", 2, 1, 2, 3): (-1, 1, 1, 369.7, 0.349066, -712.761),
("CSC", 2, 1, 2, 5): (-1, 1, 1, 369.7, 0.698132, -712.761),
("CSC", 2, 1, 2, 7): (-1, 1, 1, 369.7, 1.0472, -712.761),
("CSC", 2, 1, 2, 9): (-1, 1, 1, 369.7, 1.39626, -712.761),
("CSC", 2, 1, 2, 11): (-1, 1, 1, 369.7, 1.74533, -712.761),
("CSC", 2, 1, 2, 13): (-1, 1, 1, 369.7, 2.0944, -712.761),
("CSC", 2, 1, 2, 15): (-1, 1, 1, 369.7, 2.44346, -712.761),
("CSC", 2, 1, 2, 17): (-1, 1, 1, 369.7, 2.79253, -712.761),
("CSC", 2, 1, 2, 19): (-1, 1, 1, 369.7, -3.14159, -712.761),
("CSC", 2, 1, 2, 21): (-1, 1, 1, 369.7, -2.79253, -712.761),
("CSC", 2, 1, 2, 23): (-1, 1, 1, 369.7, -2.44346, -712.761),
("CSC", 2, 1, 2, 25): (-1, 1, 1, 369.7, -2.0944, -712.761),
("CSC", 2, 1, 2, 27): (-1, 1, 1, 369.7, -1.74533, -712.761),
("CSC", 2, 1, 2, 29): (-1, 1, 1, 369.7, -1.39626, -712.761),
("CSC", 2, 1, 2, 31): (-1, 1, 1, 369.7, -1.0472, -712.761),
("CSC", 2, 1, 2, 33): (-1, 1, 1, 369.7, -0.698132, -712.761),
("CSC", 2, 1, 2, 35): (-1, 1, 1, 369.7, -0.349066, -712.761),
("CSC", 2, 1, 2, 2): (-1, 1, 1, 369.7, 0.174533, -685.361),
("CSC", 2, 1, 2, 4): (-1, 1, 1, 369.7, 0.523599, -685.361),
("CSC", 2, 1, 2, 6): (-1, 1, 1, 369.7, 0.872665, -685.361),
("CSC", 2, 1, 2, 8): (-1, 1, 1, 369.7, 1.22173, -685.361),
("CSC", 2, 1, 2, 10): (-1, 1, 1, 369.7, 1.5708, -685.361),
("CSC", 2, 1, 2, 12): (-1, 1, 1, 369.7, 1.91986, -685.361),
("CSC", 2, 1, 2, 14): (-1, 1, 1, 369.7, 2.26893, -685.361),
("CSC", 2, 1, 2, 16): (-1, 1, 1, 369.7, 2.61799, -685.361),
("CSC", 2, 1, 2, 18): (-1, 1, 1, 369.7, 2.96706, -685.361),
("CSC", 2, 1, 2, 20): (-1, 1, 1, 369.7, -2.96706, -685.361),
("CSC", 2, 1, 2, 22): (-1, 1, 1, 369.7, -2.61799, -685.361),
("CSC", 2, 1, 2, 24): (-1, 1, 1, 369.7, -2.26893, -685.361),
("CSC", 2, 1, 2, 26): (-1, 1, 1, 369.7, -1.91986, -685.361),
("CSC", 2, 1, 2, 28): (-1, 1, 1, 369.7, -1.5708, -685.361),
("CSC", 2, 1, 2, 30): (-1, 1, 1, 369.7, -1.22173, -685.361),
("CSC", 2, 1, 2, 32): (-1, 1, 1, 369.7, -0.872665, -685.361),
("CSC", 2, 1, 2, 34): (-1, 1, 1, 369.7, -0.523599, -685.361),
("CSC", 2, 1, 2, 36): (-1, 1, 1, 369.7, -0.174533, -685.361),
("CSC", 2, 1, 3, 1): (-1, 1, 1, 595.15, 3.06347e-16, -695.159),
("CSC", 2, 1, 3, 2): (-1, 1, 1, 595.15, 0.174533, -695.159),
("CSC", 2, 1, 3, 3): (-1, 1, 1, 595.15, 0.349066, -695.159),
("CSC", 2, 1, 3, 4): (-1, 1, 1, 595.15, 0.523599, -695.159),
("CSC", 2, 1, 3, 5): (-1, 1, 1, 595.15, 0.698132, -695.159),
("CSC", 2, 1, 3, 6): (-1, 1, 1, 595.15, 0.872665, -695.159),
("CSC", 2, 1, 3, 7): (-1, 1, 1, 595.15, 1.0472, -695.159),
("CSC", 2, 1, 3, 8): (-1, 1, 1, 595.15, 1.22173, -695.159),
("CSC", 2, 1, 3, 9): (-1, 1, 1, 595.15, 1.39626, -695.159),
("CSC", 2, 1, 3, 10): (-1, 1, 1, 595.15, 1.5708, -695.159),
("CSC", 2, 1, 3, 11): (-1, 1, 1, 595.15, 1.74533, -695.159),
("CSC", 2, 1, 3, 12): (-1, 1, 1, 595.15, 1.91986, -695.159),
("CSC", 2, 1, 3, 13): (-1, 1, 1, 595.15, 2.0944, -695.159),
("CSC", 2, 1, 3, 14): (-1, 1, 1, 595.15, 2.26893, -695.159),
("CSC", 2, 1, 3, 15): (-1, 1, 1, 595.15, 2.44346, -695.159),
("CSC", 2, 1, 3, 16): (-1, 1, 1, 595.15, 2.61799, -695.159),
("CSC", 2, 1, 3, 17): (-1, 1, 1, 595.15, 2.79253, -695.159),
("CSC", 2, 1, 3, 18): (-1, 1, 1, 595.15, 2.96706, -695.159),
("CSC", 2, 1, 3, 19): (-1, 1, 1, 595.15, -3.14159, -695.159),
("CSC", 2, 1, 3, 20): (-1, 1, 1, 595.15, -2.96706, -695.159),
("CSC", 2, 1, 3, 21): (-1, 1, 1, 595.15, -2.79253, -695.159),
("CSC", 2, 1, 3, 22): (-1, 1, 1, 595.15, -2.61799, -695.159),
("CSC", 2, 1, 3, 23): (-1, 1, 1, 595.15, -2.44346, -695.159),
("CSC", 2, 1, 3, 24): (-1, 1, 1, 595.15, -2.26893, -695.159),
("CSC", 2, 1, 3, 25): (-1, 1, 1, 595.15, -2.0944, -695.159),
("CSC", 2, 1, 3, 26): (-1, 1, 1, 595.15, -1.91986, -695.159),
("CSC", 2, 1, 3, 27): (-1, 1, 1, 595.15, -1.74533, -695.159),
("CSC", 2, 1, 3, 28): (-1, 1, 1, 595.15, -1.5708, -695.159),
("CSC", 2, 1, 3, 29): (-1, 1, 1, 595.15, -1.39626, -695.159),
("CSC", 2, 1, 3, 30): (-1, 1, 1, 595.15, -1.22173, -695.159),
("CSC", 2, 1, 3, 31): (-1, 1, 1, 595.15, -1.0472, -695.159),
("CSC", 2, 1, 3, 32): (-1, 1, 1, 595.15, -0.872665, -695.159),
("CSC", 2, 1, 3, 33): (-1, 1, 1, 595.15, -0.698132, -695.159),
("CSC", 2, 1, 3, 34): (-1, 1, 1, 595.15, -0.523599, -695.159),
("CSC", 2, 1, 3, 35): (-1, 1, 1, 595.15, -0.349066, -695.159),
("CSC", 2, 1, 3, 36): (-1, 1, 1, 595.15, -0.174533, -695.159),
("CSC", 2, 1, 4, 1): (-1, 1, 1, 181.5, 1.12532e-15, -616.95),
("CSC", 2, 1, 4, 3): (-1, 1, 1, 181.5, 0.349066, -616.95),
("CSC", 2, 1, 4, 5): (-1, 1, 1, 181.5, 0.698132, -616.95),
("CSC", 2, 1, 4, 7): (-1, 1, 1, 181.5, 1.0472, -616.95),
("CSC", 2, 1, 4, 9): (-1, 1, 1, 181.5, 1.39626, -616.95),
("CSC", 2, 1, 4, 11): (-1, 1, 1, 181.5, 1.74533, -616.95),
("CSC", 2, 1, 4, 13): (-1, 1, 1, 181.5, 2.0944, -616.95),
("CSC", 2, 1, 4, 15): (-1, 1, 1, 181.5, 2.44346, -616.95),
("CSC", 2, 1, 4, 17): (-1, 1, 1, 181.5, 2.79253, -616.95),
("CSC", 2, 1, 4, 19): (-1, 1, 1, 181.5, -3.14159, -616.95),
("CSC", 2, 1, 4, 21): (-1, 1, 1, 181.5, -2.79253, -616.95),
("CSC", 2, 1, 4, 23): (-1, 1, 1, 181.5, -2.44346, -616.95),
("CSC", 2, 1, 4, 25): (-1, 1, 1, 181.5, -2.0944, -616.95),
("CSC", 2, 1, 4, 27): (-1, 1, 1, 181.5, -1.74533, -616.95),
("CSC", 2, 1, 4, 29): (-1, 1, 1, 181.5, -1.39626, -616.95),
("CSC", 2, 1, 4, 31): (-1, 1, 1, 181.5, -1.0472, -616.95),
("CSC", 2, 1, 4, 33): (-1, 1, 1, 181.5, -0.698132, -616.95),
("CSC", 2, 1, 4, 35): (-1, 1, 1, 181.5, -0.349066, -616.95),
("CSC", 2, 1, 4, 2): (-1, 1, 1, 181.5, 0.174533, -587.65),
("CSC", 2, 1, 4, 4): (-1, 1, 1, 181.5, 0.523599, -587.65),
("CSC", 2, 1, 4, 6): (-1, 1, 1, 181.5, 0.872665, -587.65),
("CSC", 2, 1, 4, 8): (-1, 1, 1, 181.5, 1.22173, -587.65),
("CSC", 2, 1, 4, 10): (-1, 1, 1, 181.5, 1.5708, -587.65),
("CSC", 2, 1, 4, 12): (-1, 1, 1, 181.5, 1.91986, -587.65),
("CSC", 2, 1, 4, 14): (-1, 1, 1, 181.5, 2.26893, -587.65),
("CSC", 2, 1, 4, 16): (-1, 1, 1, 181.5, 2.61799, -587.65),
("CSC", 2, 1, 4, 18): (-1, 1, 1, 181.5, 2.96706, -587.65),
("CSC", 2, 1, 4, 20): (-1, 1, 1, 181.5, -2.96706, -587.65),
("CSC", 2, 1, 4, 22): (-1, 1, 1, 181.5, -2.61799, -587.65),
("CSC", 2, 1, 4, 24): (-1, 1, 1, 181.5, -2.26893, -587.65),
("CSC", 2, 1, 4, 26): (-1, 1, 1, 181.5, -1.91986, -587.65),
("CSC", 2, 1, 4, 28): (-1, 1, 1, 181.5, -1.5708, -587.65),
("CSC", 2, 1, 4, 30): (-1, 1, 1, 181.5, -1.22173, -587.65),
("CSC", 2, 1, 4, 32): (-1, 1, 1, 181.5, -0.872665, -587.65),
("CSC", 2, 1, 4, 34): (-1, 1, 1, 181.5, -0.523599, -587.65),
("CSC", 2, 1, 4, 36): (-1, 1, 1, 181.5, -0.174533, -587.65),
("CSC", 2, 2, 1, 1): (-1, 1, 1, 242.7, 0.0872665, -840.961),
("CSC", 2, 2, 1, 3): (-1, 1, 1, 242.7, 0.785398, -840.961),
("CSC", 2, 2, 1, 5): (-1, 1, 1, 242.7, 1.48353, -840.961),
("CSC", 2, 2, 1, 7): (-1, 1, 1, 242.7, 2.18166, -840.961),
("CSC", 2, 2, 1, 9): (-1, 1, 1, 242.7, 2.87979, -840.961),
("CSC", 2, 2, 1, 11): (-1, 1, 1, 242.7, -2.70526, -840.961),
("CSC", 2, 2, 1, 13): (-1, 1, 1, 242.7, -2.00713, -840.961),
("CSC", 2, 2, 1, 15): (-1, 1, 1, 242.7, -1.309, -840.961),
("CSC", 2, 2, 1, 17): (-1, 1, 1, 242.7, -0.610865, -840.961),
("CSC", 2, 2, 1, 2): (-1, 1, 1, 242.7, 0.436332, -816.161),
("CSC", 2, 2, 1, 4): (-1, 1, 1, 242.7, 1.13446, -816.161),
("CSC", 2, 2, 1, 6): (-1, 1, 1, 242.7, 1.8326, -816.161),
("CSC", 2, 2, 1, 8): (-1, 1, 1, 242.7, 2.53073, -816.161),
("CSC", 2, 2, 1, 10): (-1, 1, 1, 242.7, -3.05433, -816.161),
("CSC", 2, 2, 1, 12): (-1, 1, 1, 242.7, -2.35619, -816.161),
("CSC", 2, 2, 1, 14): (-1, 1, 1, 242.7, -1.65806, -816.161),
("CSC", 2, 2, 1, 16): (-1, 1, 1, 242.7, -0.959931, -816.161),
("CSC", 2, 2, 1, 18): (-1, 1, 1, 242.7, -0.261799, -816.161),
("CSC", 2, 2, 2, 1): (-1, 1, 1, 526.5, 4.63998e-16, -840.961),
("CSC", 2, 2, 2, 3): (-1, 1, 1, 526.5, 0.349066, -840.961),
("CSC", 2, 2, 2, 5): (-1, 1, 1, 526.5, 0.698132, -840.961),
("CSC", 2, 2, 2, 7): (-1, 1, 1, 526.5, 1.0472, -840.961),
("CSC", 2, 2, 2, 9): (-1, 1, 1, 526.5, 1.39626, -840.961),
("CSC", 2, 2, 2, 11): (-1, 1, 1, 526.5, 1.74533, -840.961),
("CSC", 2, 2, 2, 13): (-1, 1, 1, 526.5, 2.0944, -840.961),
("CSC", 2, 2, 2, 15): (-1, 1, 1, 526.5, 2.44346, -840.961),
("CSC", 2, 2, 2, 17): (-1, 1, 1, 526.5, 2.79253, -840.961),
("CSC", 2, 2, 2, 19): (-1, 1, 1, 526.5, -3.14159, -840.961),
("CSC", 2, 2, 2, 21): (-1, 1, 1, 526.5, -2.79253, -840.961),
("CSC", 2, 2, 2, 23): (-1, 1, 1, 526.5, -2.44346, -840.961),
("CSC", 2, 2, 2, 25): (-1, 1, 1, 526.5, -2.0944, -840.961),
("CSC", 2, 2, 2, 27): (-1, 1, 1, 526.5, -1.74533, -840.961),
("CSC", 2, 2, 2, 29): (-1, 1, 1, 526.5, -1.39626, -840.961),
("CSC", 2, 2, 2, 31): (-1, 1, 1, 526.5, -1.0472, -840.961),
("CSC", 2, 2, 2, 33): (-1, 1, 1, 526.5, -0.698132, -840.961),
("CSC", 2, 2, 2, 35): (-1, 1, 1, 526.5, -0.349066, -840.961),
("CSC", 2, 2, 2, 2): (-1, 1, 1, 526.5, 0.174533, -816.161),
("CSC", 2, 2, 2, 4): (-1, 1, 1, 526.5, 0.523599, -816.161),
("CSC", 2, 2, 2, 6): (-1, 1, 1, 526.5, 0.872665, -816.161),
("CSC", 2, 2, 2, 8): (-1, 1, 1, 526.5, 1.22173, -816.161),
("CSC", 2, 2, 2, 10): (-1, 1, 1, 526.5, 1.5708, -816.161),
("CSC", 2, 2, 2, 12): (-1, 1, 1, 526.5, 1.91986, -816.161),
("CSC", 2, 2, 2, 14): (-1, 1, 1, 526.5, 2.26893, -816.161),
("CSC", 2, 2, 2, 16): (-1, 1, 1, 526.5, 2.61799, -816.161),
("CSC", 2, 2, 2, 18): (-1, 1, 1, 526.5, 2.96706, -816.161),
("CSC", 2, 2, 2, 20): (-1, 1, 1, 526.5, -2.96706, -816.161),
("CSC", 2, 2, 2, 22): (-1, 1, 1, 526.5, -2.61799, -816.161),
("CSC", 2, 2, 2, 24): (-1, 1, 1, 526.5, -2.26893, -816.161),
("CSC", 2, 2, 2, 26): (-1, 1, 1, 526.5, -1.91986, -816.161),
("CSC", 2, 2, 2, 28): (-1, 1, 1, 526.5, -1.5708, -816.161),
("CSC", 2, 2, 2, 30): (-1, 1, 1, 526.5, -1.22173, -816.161),
("CSC", 2, 2, 2, 32): (-1, 1, 1, 526.5, -0.872665, -816.161),
("CSC", 2, 2, 2, 34): (-1, 1, 1, 526.5, -0.523599, -816.161),
("CSC", 2, 2, 2, 36): (-1, 1, 1, 526.5, -0.174533, -816.161),
("CSC", 2, 3, 1, 1): (1, 1, -1, 252.7, 0.0872665, -923.039),
("CSC", 2, 3, 1, 3): (1, 1, -1, 252.7, 0.785398, -923.039),
("CSC", 2, 3, 1, 5): (1, 1, -1, 252.7, 1.48353, -923.039),
("CSC", 2, 3, 1, 7): (1, 1, -1, 252.7, 2.18166, -923.039),
("CSC", 2, 3, 1, 9): (1, 1, -1, 252.7, 2.87979, -923.039),
("CSC", 2, 3, 1, 11): (1, 1, -1, 252.7, -2.70526, -923.039),
("CSC", 2, 3, 1, 13): (1, 1, -1, 252.7, -2.00713, -923.039),
("CSC", 2, 3, 1, 15): (1, 1, -1, 252.7, -1.309, -923.039),
("CSC", 2, 3, 1, 17): (1, 1, -1, 252.7, -0.610865, -923.039),
("CSC", 2, 3, 1, 2): (1, 1, -1, 252.7, 0.436332, -947.839),
("CSC", 2, 3, 1, 4): (1, 1, -1, 252.7, 1.13446, -947.839),
("CSC", 2, 3, 1, 6): (1, 1, -1, 252.7, 1.8326, -947.839),
("CSC", 2, 3, 1, 8): (1, 1, -1, 252.7, 2.53073, -947.839),
("CSC", 2, 3, 1, 10): (1, 1, -1, 252.7, -3.05433, -947.839),
("CSC", 2, 3, 1, 12): (1, 1, -1, 252.7, -2.35619, -947.839),
("CSC", 2, 3, 1, 14): (1, 1, -1, 252.7, -1.65806, -947.839),
("CSC", 2, 3, 1, 16): (1, 1, -1, 252.7, -0.959931, -947.839),
("CSC", 2, 3, 1, 18): (1, 1, -1, 252.7, -0.261799, -947.839),
("CSC", 2, 3, 2, 1): (1, 1, -1, 526.5, 5.2127e-16, -923.039),
("CSC", 2, 3, 2, 3): (1, 1, -1, 526.5, 0.349066, -923.039),
("CSC", 2, 3, 2, 5): (1, 1, -1, 526.5, 0.698132, -923.039),
("CSC", 2, 3, 2, 7): (1, 1, -1, 526.5, 1.0472, -923.039),
("CSC", 2, 3, 2, 9): (1, 1, -1, 526.5, 1.39626, -923.039),
("CSC", 2, 3, 2, 11): (1, 1, -1, 526.5, 1.74533, -923.039),
("CSC", 2, 3, 2, 13): (1, 1, -1, 526.5, 2.0944, -923.039),
("CSC", 2, 3, 2, 15): (1, 1, -1, 526.5, 2.44346, -923.039),
("CSC", 2, 3, 2, 17): (1, 1, -1, 526.5, 2.79253, -923.039),
("CSC", 2, 3, 2, 19): (1, 1, -1, 526.5, -3.14159, -923.039),
("CSC", 2, 3, 2, 21): (1, 1, -1, 526.5, -2.79253, -923.039),
("CSC", 2, 3, 2, 23): (1, 1, -1, 526.5, -2.44346, -923.039),
("CSC", 2, 3, 2, 25): (1, 1, -1, 526.5, -2.0944, -923.039),
("CSC", 2, 3, 2, 27): (1, 1, -1, 526.5, -1.74533, -923.039),
("CSC", 2, 3, 2, 29): (1, 1, -1, 526.5, -1.39626, -923.039),
("CSC", 2, 3, 2, 31): (1, 1, -1, 526.5, -1.0472, -923.039),
("CSC", 2, 3, 2, 33): (1, 1, -1, 526.5, -0.698132, -923.039),
("CSC", 2, 3, 2, 35): (1, 1, -1, 526.5, -0.349066, -923.039),
("CSC", 2, 3, 2, 2): (1, 1, -1, 526.5, 0.174533, -947.839),
("CSC", 2, 3, 2, 4): (1, 1, -1, 526.5, 0.523599, -947.839),
("CSC", 2, 3, 2, 6): (1, 1, -1, 526.5, 0.872665, -947.839),
("CSC", 2, 3, 2, 8): (1, 1, -1, 526.5, 1.22173, -947.839),
("CSC", 2, 3, 2, 10): (1, 1, -1, 526.5, 1.5708, -947.839),
("CSC", 2, 3, 2, 12): (1, 1, -1, 526.5, 1.91986, -947.839),
("CSC", 2, 3, 2, 14): (1, 1, -1, 526.5, 2.26893, -947.839),
("CSC", 2, 3, 2, 16): (1, 1, -1, 526.5, 2.61799, -947.839),
("CSC", 2, 3, 2, 18): (1, 1, -1, 526.5, 2.96706, -947.839),
("CSC", 2, 3, 2, 20): (1, 1, -1, 526.5, -2.96706, -947.839),
("CSC", 2, 3, 2, 22): (1, 1, -1, 526.5, -2.61799, -947.839),
("CSC", 2, 3, 2, 24): (1, 1, -1, 526.5, -2.26893, -947.839),
("CSC", 2, 3, 2, 26): (1, 1, -1, 526.5, -1.91986, -947.839),
("CSC", 2, 3, 2, 28): (1, 1, -1, 526.5, -1.5708, -947.839),
("CSC", 2, 3, 2, 30): (1, 1, -1, 526.5, -1.22173, -947.839),
("CSC", 2, 3, 2, 32): (1, 1, -1, 526.5, -0.872665, -947.839),
("CSC", 2, 3, 2, 34): (1, 1, -1, 526.5, -0.523599, -947.839),
("CSC", 2, 3, 2, 36): (1, 1, -1, 526.5, -0.174533, -947.839),
("CSC", 2, 4, 1, 1): (1, 1, -1, 262.65, 0.0872665, -1012.54),
("CSC", 2, 4, 1, 3): (1, 1, -1, 262.65, 0.785398, -1012.54),
("CSC", 2, 4, 1, 5): (1, 1, -1, 262.65, 1.48353, -1012.54),
("CSC", 2, 4, 1, 7): (1, 1, -1, 262.65, 2.18166, -1012.54),
("CSC", 2, 4, 1, 9): (1, 1, -1, 262.65, 2.87979, -1012.54),
("CSC", 2, 4, 1, 11): (1, 1, -1, 262.65, -2.70526, -1012.54),
("CSC", 2, 4, 1, 13): (1, 1, -1, 262.65, -2.00713, -1012.54),
("CSC", 2, 4, 1, 15): (1, 1, -1, 262.65, -1.309, -1012.54),
("CSC", 2, 4, 1, 17): (1, 1, -1, 262.65, -0.610865, -1012.54),
("CSC", 2, 4, 1, 2): (1, 1, -1, 262.65, 0.436332, -1037.34),
("CSC", 2, 4, 1, 4): (1, 1, -1, 262.65, 1.13446, -1037.34),
("CSC", 2, 4, 1, 6): (1, 1, -1, 262.65, 1.8326, -1037.34),
("CSC", 2, 4, 1, 8): (1, 1, -1, 262.65, 2.53073, -1037.34),
("CSC", 2, 4, 1, 10): (1, 1, -1, 262.65, -3.05433, -1037.34),
("CSC", 2, 4, 1, 12): (1, 1, -1, 262.65, -2.35619, -1037.34),
("CSC", 2, 4, 1, 14): (1, 1, -1, 262.65, -1.65806, -1037.34),
("CSC", 2, 4, 1, 16): (1, 1, -1, 262.65, -0.959931, -1037.34),
("CSC", 2, 4, 1, 18): (1, 1, -1, 262.65, -0.261799, -1037.34),
("CSC", 2, 4, 2, 1): (1, 1, -1, 526.5, 5.83721e-16, -1012.54),
("CSC", 2, 4, 2, 3): (1, 1, -1, 526.5, 0.349066, -1012.54),
("CSC", 2, 4, 2, 5): (1, 1, -1, 526.5, 0.698132, -1012.54),
("CSC", 2, 4, 2, 7): (1, 1, -1, 526.5, 1.0472, -1012.54),
("CSC", 2, 4, 2, 9): (1, 1, -1, 526.5, 1.39626, -1012.54),
("CSC", 2, 4, 2, 11): (1, 1, -1, 526.5, 1.74533, -1012.54),
("CSC", 2, 4, 2, 13): (1, 1, -1, 526.5, 2.0944, -1012.54),
("CSC", 2, 4, 2, 15): (1, 1, -1, 526.5, 2.44346, -1012.54),
("CSC", 2, 4, 2, 17): (1, 1, -1, 526.5, 2.79253, -1012.54),
("CSC", 2, 4, 2, 19): (1, 1, -1, 526.5, -3.14159, -1012.54),
("CSC", 2, 4, 2, 21): (1, 1, -1, 526.5, -2.79253, -1012.54),
("CSC", 2, 4, 2, 23): (1, 1, -1, 526.5, -2.44346, -1012.54),
("CSC", 2, 4, 2, 25): (1, 1, -1, 526.5, -2.0944, -1012.54),
("CSC", 2, 4, 2, 27): (1, 1, -1, 526.5, -1.74533, -1012.54),
("CSC", 2, 4, 2, 29): (1, 1, -1, 526.5, -1.39626, -1012.54),
("CSC", 2, 4, 2, 31): (1, 1, -1, 526.5, -1.0472, -1012.54),
("CSC", 2, 4, 2, 33): (1, 1, -1, 526.5, -0.698132, -1012.54),
("CSC", 2, 4, 2, 35): (1, 1, -1, 526.5, -0.349066, -1012.54),
("CSC", 2, 4, 2, 2): (1, 1, -1, 526.5, 0.174533, -1037.34),
("CSC", 2, 4, 2, 4): (1, 1, -1, 526.5, 0.523599, -1037.34),
("CSC", 2, 4, 2, 6): (1, 1, -1, 526.5, 0.872665, -1037.34),
("CSC", 2, 4, 2, 8): (1, 1, -1, 526.5, 1.22173, -1037.34),
("CSC", 2, 4, 2, 10): (1, 1, -1, 526.5, 1.5708, -1037.34),
("CSC", 2, 4, 2, 12): (1, 1, -1, 526.5, 1.91986, -1037.34),
("CSC", 2, 4, 2, 14): (1, 1, -1, 526.5, 2.26893, -1037.34),
("CSC", 2, 4, 2, 16): (1, 1, -1, 526.5, 2.61799, -1037.34),
("CSC", 2, 4, 2, 18): (1, 1, -1, 526.5, 2.96706, -1037.34),
("CSC", 2, 4, 2, 20): (1, 1, -1, 526.5, -2.96706, -1037.34),
("CSC", 2, 4, 2, 22): (1, 1, -1, 526.5, -2.61799, -1037.34),
("CSC", 2, 4, 2, 24): (1, 1, -1, 526.5, -2.26893, -1037.34),
("CSC", 2, 4, 2, 26): (1, 1, -1, 526.5, -1.91986, -1037.34),
("CSC", 2, 4, 2, 28): (1, 1, -1, 526.5, -1.5708, -1037.34),
("CSC", 2, 4, 2, 30): (1, 1, -1, 526.5, -1.22173, -1037.34),
("CSC", 2, 4, 2, 32): (1, 1, -1, 526.5, -0.872665, -1037.34),
("CSC", 2, 4, 2, 34): (1, 1, -1, 526.5, -0.523599, -1037.34),
("CSC", 2, 4, 2, 36): (1, 1, -1, 526.5, -0.174533, -1037.34),
}

def DBMC(database, reports, window=10., selection=None, phi=False, color=ROOT.kBlue-8, style=1, bins=50, normalized=False, getvalues=False, name=""):
    return DBdiff(database, None, reports, None, window, selection, phi, color, style, bins, normalized, getvalues, name)

def DBdiff(database1, database2, reports1, reports2, window=10., selection=None, phi=False, color=ROOT.kBlue-8, style=1, bins=50, normalized=False, getvalues=False, name="tmp"):
    tdrStyle.SetOptStat("emrou")
    tdrStyle.SetStatW(0.40)
    tdrStyle.SetStatFontSize(0.05)

    if phi:
        hx = ROOT.TH1F("%s_phi" % name, "", bins, -window, window)
    else:
        hx = ROOT.TH1F("%s_x" % name, "", bins, -window, window)
    hy = ROOT.TH1F("%s_y" % name, "", bins, -window, window)
    hz = ROOT.TH1F("%s_z" % name, "", bins, -window, window)
    hphix = ROOT.TH1F("%s_phix" % name, "", bins, -window, window)
    hphiy = ROOT.TH1F("%s_phiy" % name, "", bins, -window, window)
    hphiz = ROOT.TH1F("%s_phiz" % name, "", bins, -window, window)
        
    for r1 in reports1:
        if selection is None or (selection.func_code.co_argcount == len(r1.postal_address) and selection(*r1.postal_address)):
            if reports2 is None:
                r2 = Report(r1.chamberId, r1.postal_address, r1.name)
                r2.add_parameters(ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), 0., 0., 0., 0.)
            else:
                found = False
                for r2 in reports2:
                    if r1.postal_address == r2.postal_address:
                        found = True
                        break
                if not found: continue

            found = False
            if r1.postal_address[0] == "DT":
                if r1.postal_address[1:] in database1.dt:
                    found = True
                    db1 = database1.dt[r1.postal_address[1:]]
                    if database2 is None:
                        db2 = DTAlignable()
                        db2.x = db2.y = db2.z = db2.phix = db2.phiy = db2.phiz = 0.
                        db2.xx = db2.xy = db2.xz = db2.yx = db2.yy = db2.yz = db2.zx = db2.zy = db2.zz = 0.
                    else:
                        db2 = database2.dt[r1.postal_address[1:]]
            else:
                if r1.postal_address[1:] in database1.csc:
                    found = True
                    db1 = database1.csc[r1.postal_address[1:]]
                    if database2 is None:
                        db2 = CSCAlignable()
                        db2.x = db2.y = db2.z = db2.phix = db2.phiy = db2.phiz = 0.
                        db2.xx = db2.xy = db2.xz = db2.yx = db2.yy = db2.yz = db2.zx = db2.zy = db2.zz = 0.
                    else:
                        db2 = database2.csc[r1.postal_address[1:]]

            if found and r1.status == "PASS" and r2.status == "PASS":
                if r1.deltax is not None and r2.deltax is not None and r1.deltax.error is not None and r2.deltax.error is not None and (r1.deltax.error**2 + r2.deltax.error**2) > 0.:
                    if normalized:
                        fill = (db1.x - db2.x)/sqrt(r1.deltax.error**2 + r2.deltax.error**2) * signConventions[r1.postal_address][0]
                    else:
                        if phi:
                            fill = (db1.x - db2.x)/signConventions[r1.postal_address][3] * 1000. * signConventions[r1.postal_address][0]
                        else:
                            fill = (db1.x - db2.x) * 10. * signConventions[r1.postal_address][0]
                    hx.Fill(fill)
                    if getvalues not in (False, None):
                        getvalues["x"].append((fill, 10. * sqrt(r1.deltax.error**2 + r2.deltax.error**2)))

                if r1.deltay is not None and r2.deltay is not None and r1.deltay.error is not None and r2.deltay.error is not None and (r1.deltay.error**2 + r2.deltay.error**2) > 0.:
                    if normalized:
                        fill = (db1.y - db2.y)/sqrt(r1.deltay.error**2 + r2.deltay.error**2) * signConventions[r1.postal_address][1]
                    else:
                        fill = (db1.y - db2.y) * 10. * signConventions[r1.postal_address][1]
                    hy.Fill(fill)
                    if getvalues not in (False, None):
                        getvalues["y"].append((fill, 10. * sqrt(r1.deltay.error**2 + r2.deltay.error**2)))

                if r1.deltaz is not None and r2.deltaz is not None and r1.deltaz.error is not None and r2.deltaz.error is not None and (r1.deltaz.error**2 + r2.deltaz.error**2) > 0.:
                    if normalized:
                        fill = (db1.z - db2.z)/sqrt(r1.deltaz.error**2 + r2.deltaz.error**2) * signConventions[r1.postal_address][2]
                    else:
                        fill = (db1.z - db2.z) * 10. * signConventions[r1.postal_address][2]
                    hz.Fill(fill)
                    if getvalues not in (False, None):
                        getvalues["z"].append((fill, 10. * sqrt(r1.deltaz.error**2 + r2.deltaz.error**2)))

                if r1.deltaphix is not None and r2.deltaphix is not None and r1.deltaphix.error is not None and r2.deltaphix.error is not None and (r1.deltaphix.error**2 + r2.deltaphix.error**2) > 0.:
                    if normalized:
                        fill = (db1.phix - db2.phix)/sqrt(r1.deltaphix.error**2 + r2.deltaphix.error**2)
                    else:
                        fill = (db1.phix - db2.phix) * 1000.
                    hphix.Fill(fill)
                    if getvalues not in (False, None):
                        getvalues["phix"].append((fill, 10. * sqrt(r1.deltaphix.error**2 + r2.deltaphix.error**2)))

                if r1.deltaphiy is not None and r2.deltaphiy is not None and r1.deltaphiy.error is not None and r2.deltaphiy.error is not None and (r1.deltaphiy.error**2 + r2.deltaphiy.error**2) > 0.:
                    if normalized:
                        fill = (db1.phiy - db2.phiy)/sqrt(r1.deltaphiy.error**2 + r2.deltaphiy.error**2)
                    else:
                        fill = (db1.phiy - db2.phiy) * 1000.
                    hphiy.Fill(fill)
                    if getvalues not in (False, None):
                        getvalues["phiy"].append((fill, 10. * sqrt(r1.deltaphiy.error**2 + r2.deltaphiy.error**2)))

                if r1.deltaphiz is not None and r2.deltaphiz is not None and r1.deltaphiz.error is not None and r2.deltaphiz.error is not None and (r1.deltaphiz.error**2 + r2.deltaphiz.error**2) > 0.:
                    if normalized:
                        fill = (db1.phiz - db2.phiz)/sqrt(r1.deltaphiz.error**2 + r2.deltaphiz.error**2)
                    else:
                        fill = (db1.phiz - db2.phiz) * 1000.
                    hphiz.Fill(fill)
                    if getvalues not in (False, None):
                        getvalues["phiz"].append((fill, 10. * sqrt(r1.deltaphiz.error**2 + r2.deltaphiz.error**2)))

    if not normalized:
        if phi:
            hx.SetXTitle("#delta_{#phi} position (mrad)")
        else:
            hx.SetXTitle("#delta_{x'} (mm)")
        hy.SetXTitle("#delta_{y'} (mm)")
        hz.SetXTitle("#delta_{z'} (mm)")
        hphix.SetXTitle("#delta_{#phi_{x}} (mrad)")
        hphiy.SetXTitle("#delta_{#phi_{y}} (mrad)")
        hphiz.SetXTitle("#delta_{#phi_{z}} (mrad)")
    else:
        if phi:
            hx.SetXTitle("#delta_{#phi}/#sigma_{#phi} position")
        else:
            hx.SetXTitle("#delta_{x'}/#sigma_{x'}")
        hy.SetXTitle("#delta_{y'}/#sigma_{y'}")
        hz.SetXTitle("#delta_{z'}/#sigma_{z'}")
        hphix.SetXTitle("#delta_{#phi_{x}}/#sigma_{#phi_{x}}")
        hphiy.SetXTitle("#delta_{#phi_{y}}/#sigma_{#phi_{y}}")
        hphiz.SetXTitle("#delta_{#phi_{z}}/#sigma_{#phi_{z}}")

    for h in hx, hy, hz, hphix, hphiy, hphiz:
        h.GetXaxis().CenterTitle()
        h.GetYaxis().CenterTitle()
        h.SetFillColor(color)
        h.SetLineStyle(style)

    if normalized:
        fx = ROOT.TF1("fx", "%g * exp(-x**2/2.)/sqrt(2.*3.1415926)" % (hx.GetEntries()*2.*window/bins), -window, window)
        fy = ROOT.TF1("fy", "%g * exp(-x**2/2.)/sqrt(2.*3.1415926)" % (hy.GetEntries()*2.*window/bins), -window, window)
        fz = ROOT.TF1("fz", "%g * exp(-x**2/2.)/sqrt(2.*3.1415926)" % (hz.GetEntries()*2.*window/bins), -window, window)
        fphix = ROOT.TF1("fphix", "%g * exp(-x**2/2.)/sqrt(2.*3.1415926)" % (hphix.GetEntries()*2.*window/bins), -window, window)
        fphiy = ROOT.TF1("fphiy", "%g * exp(-x**2/2.)/sqrt(2.*3.1415926)" % (hphiy.GetEntries()*2.*window/bins), -window, window)
        fphiz = ROOT.TF1("fphiz", "%g * exp(-x**2/2.)/sqrt(2.*3.1415926)" % (hphiz.GetEntries()*2.*window/bins), -window, window)
        for f in fx, fy, fz, fphix, fphiy, fphiz:
            f.SetLineWidth(2)
            f.SetLineColor(ROOT.kBlue)
        for h, f in (hx, fx), (hy, fy), (hz, fz), (hphix, fphix), (hphiy, fphiy), (hphiz, fphiz):
            h.SetAxisRange(0, 1.1*max(h.GetMaximum(), f.GetMaximum()), "Y")
        c1.Clear()
        c1.Divide(3, 2)
        c1.GetPad(1).cd(); hx.Draw(); fx.Draw("same")
        c1.GetPad(2).cd(); hy.Draw(); fy.Draw("same")
        c1.GetPad(3).cd(); hz.Draw(); fz.Draw("same")
        c1.GetPad(4).cd(); hphix.Draw(); fphix.Draw("same")
        c1.GetPad(5).cd(); hphiy.Draw(); fphiy.Draw("same")
        c1.GetPad(6).cd(); hphiz.Draw(); fphiz.Draw("same")
        return hx, hy, hz, hphix, hphiy, hphiz, fx, fy, fz, fphix, fphiy, fphiz
    else:
        c1.Clear()
        c1.Divide(3, 2)
        c1.GetPad(1).cd(); hx.Draw()
        c1.GetPad(2).cd(); hy.Draw()
        c1.GetPad(3).cd(); hz.Draw()
        c1.GetPad(4).cd(); hphix.Draw()
        c1.GetPad(5).cd(); hphiy.Draw()
        c1.GetPad(6).cd(); hphiz.Draw()
        return hx, hy, hz, hphix, hphiy, hphiz

def DBMCVersus(quantity, versus, database, reports, window=10., selection=None, color=ROOT.kBlack):
    return DBdiffVersus(quantity, versus, database, None, reports, None, window, selection, color)

def DBdiffVersus(quantity, versus, database1, database2, reports1, reports2, window=10., selection=None, color=ROOT.kBlack):
    tdrStyle.SetOptStat("")

    domain = []
    values = []
    errors = []
        
    for r1 in reports1:
        if selection is None or (selection.func_code.co_argcount == len(r1.postal_address) and selection(*r1.postal_address)):
            if reports2 is None:
                r2 = Report(r1.chamberId, r1.postal_address, r1.name)
                r2.add_parameters(ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), ValErr(0., 0., 0.), 0., 0., 0.)
            else:
                found = False
                for r2 in reports2:
                    if r1.postal_address == r2.postal_address:
                        found = True
                        break
                if not found: continue

            found = False
            if r1.postal_address[0] == "DT":
                if r1.postal_address[1:] in database1.dt:
                    found = True
                    db1 = database1.dt[r1.postal_address[1:]]
                    if database2 is None:
                        db2 = DTAlignable()
                        db2.x = db2.y = db2.z = db2.phix = db2.phiy = db2.phiz = 0.
                        db2.xx = db2.xy = db2.xz = db2.yx = db2.yy = db2.yz = db2.zx = db2.zy = db2.zz = 0.
                    else:
                        db2 = database2.dt[r1.postal_address[1:]]
            else:
                if r1.postal_address[1:] in database1.csc:
                    found = True
                    db1 = database1.csc[r1.postal_address[1:]]
                    if database2 is None:
                        db2 = CSCAlignable()
                        db2.x = db2.y = db2.z = db2.phix = db2.phiy = db2.phiz = 0.
                        db2.xx = db2.xy = db2.xz = db2.yx = db2.yy = db2.yz = db2.zx = db2.zy = db2.zz = 0.
                    else:
                        db2 = database2.csc[r1.postal_address[1:]]

            if found and r1.status == "PASS" and r2.status == "PASS":
                okay = False

                if quantity == "phi":
                    if r1.deltax is not None and r2.deltax is not None and r1.deltax.error is not None and r2.deltax.error is not None and (r1.deltax.error**2 + r2.deltax.error**2) > 0.:
                        okay = True
                        values.append((db1.x - db2.x)/signConventions[r1.postal_address][3] * 1000. * signConventions[r1.postal_address][0])
                        errors.append((r1.deltax.error**2 + r2.deltax.error**2)/signConventions[r1.postal_address][3] * 1000. * signConventions[r1.postal_address][0])

                elif quantity == "x":
                    if r1.deltax is not None and r2.deltax is not None and r1.deltax.error is not None and r2.deltax.error is not None and (r1.deltax.error**2 + r2.deltax.error**2) > 0.:
                        okay = True
                        values.append((db1.x - db2.x) * 10. * signConventions[r1.postal_address][0])
                        errors.append((r1.deltax.error**2 + r2.deltax.error**2) * 10. * signConventions[r1.postal_address][0])

                elif quantity == "y":
                    if r1.deltay is not None and r2.deltay is not None and r1.deltay.error is not None and r2.deltay.error is not None and (r1.deltay.error**2 + r2.deltay.error**2) > 0.:
                        okay = True
                        values.append((db1.y - db2.y) * 10. * signConventions[r1.postal_address][1])
                        errors.append((r1.deltay.error**2 + r2.deltay.error**2) * 10. * signConventions[r1.postal_address][1])

                elif quantity == "z":
                    if r1.deltaz is not None and r2.deltaz is not None and r1.deltaz.error is not None and r2.deltaz.error is not None and (r1.deltaz.error**2 + r2.deltaz.error**2) > 0.:
                        okay = True
                        values.append((db1.z - db2.z) * 10. * signConventions[r1.postal_address][2])
                        errors.append((r1.deltaz.error**2 + r2.deltaz.error**2) * 10. * signConventions[r1.postal_address][2])

                elif quantity == "phix":
                    if r1.deltaphix is not None and r2.deltaphix is not None and r1.deltaphix.error is not None and r2.deltaphix.error is not None and (r1.deltaphix.error**2 + r2.deltaphix.error**2) > 0.:
                        okay = True
                        values.append((db1.phix - db2.phix) * 1000.)
                        errors.append((r1.deltaphix.error**2 + r2.deltaphix.error**2) * 1000.)

                elif quantity == "phiy":
                    if r1.deltaphiy is not None and r2.deltaphiy is not None and r1.deltaphiy.error is not None and r2.deltaphiy.error is not None and (r1.deltaphiy.error**2 + r2.deltaphiy.error**2) > 0.:
                        okay = True
                        values.append((db1.phiy - db2.phiy) * 1000.)
                        errors.append((r1.deltaphiy.error**2 + r2.deltaphiy.error**2) * 1000.)

                elif quantity == "phiz":
                    if r1.deltaphiz is not None and r2.deltaphiz is not None and r1.deltaphiz.error is not None and r2.deltaphiz.error is not None and (r1.deltaphiz.error**2 + r2.deltaphiz.error**2) > 0.:
                        okay = True
                        values.append((db1.phiz - db2.phiz) * 1000.)
                        errors.append((r1.deltaphiz.error**2 + r2.deltaphiz.error**2) * 1000.)

                else: raise Exception

                if okay:
                    if versus == "r": domain.append(signConventions[r1.postal_address][3])
                    elif versus == "phi": domain.append(signConventions[r1.postal_address][4])
                    elif versus == "z": domain.append(signConventions[r1.postal_address][5])
                    else: raise Exception

    if versus == "r":
        bkgndhist = ROOT.TH1F("bkgndhist", "", 100, 0., 800.)
        bkgndhist.SetXTitle("R (cm)")
    elif versus == "phi":
        bkgndhist = ROOT.TH1F("bkgndhist", "", 100, -pi, pi)
        bkgndhist.SetXTitle("#phi (rad)")
    elif versus == "z":
        bkgndhist = ROOT.TH1F("bkgndhist", "", 100, -1100., 1100.)
        bkgndhist.SetXTitle("z (cm)")
    bkgndhist.GetXaxis().CenterTitle()

    bkgndhist.SetAxisRange(-window, window, "Y")
    if quantity == "phi": bkgndhist.SetYTitle("#delta_{#phi} position (mrad)")
    elif quantity == "x": bkgndhist.SetYTitle("#delta_{x'} (mm)")
    elif quantity == "y": bkgndhist.SetYTitle("#delta_{y'} (mm)")
    elif quantity == "z": bkgndhist.SetYTitle("#delta_{z'} (mm)")
    elif quantity == "phix": bkgndhist.SetYTitle("#delta_{#phi_{x}} (mrad)")
    elif quantity == "phiy": bkgndhist.SetYTitle("#delta_{#phi_{y}} (mrad)")
    elif quantity == "phiz": bkgndhist.SetYTitle("#delta_{#phi_{z}} (mrad)")
    else: raise Exception
    bkgndhist.GetYaxis().CenterTitle()

    if len(domain) == 0:
        tgraph = ROOT.TGraphErrors(0)
    else:
        tgraph = ROOT.TGraphErrors(len(domain), array.array("d", domain), array.array("d", values), array.array("d", [0.]*len(domain)), array.array("d", errors))
    tgraph.SetMarkerColor(color)
    tgraph.SetLineColor(color)

    bkgndhist.Draw()
    if tgraph.GetN() > 0: tgraph.Draw("p")
    return bkgndhist, tgraph, domain, values, errors

######################################################################################################

def plotmedians(reports1, reports2, selection=None, binsx=50, windowx=3., ceilingx=None, binsy=50, windowy=3., ceilingy=None, binsdxdz=50, windowdxdz=3., ceilingdxdz=None, binsdydz=50, windowdydz=3., ceilingdydz=None, r1text=" before", r2text=" after", which="median"):
    tdrStyle.SetOptStat("emrou")
    tdrStyle.SetStatW(0.40)
    tdrStyle.SetStatFontSize(0.05)

    hmedianx_before = ROOT.TH1F("hmedianx_before", "", binsx, -windowx, windowx)
    hmediany_before = ROOT.TH1F("hmediany_before", "", binsy, -windowy, windowy)
    hmediandxdz_before = ROOT.TH1F("hmediandxdz_before", "", binsdxdz, -windowdxdz, windowdxdz)
    hmediandydz_before = ROOT.TH1F("hmediandydz_before", "", binsdydz, -windowdydz, windowdydz)
    hmedianx_after = ROOT.TH1F("hmedianx_after", "", binsx, -windowx, windowx)
    hmediany_after = ROOT.TH1F("hmediany_after", "", binsy, -windowy, windowy)
    hmediandxdz_after = ROOT.TH1F("hmediandxdz_after", "", binsdxdz, -windowdxdz, windowdxdz)
    hmediandydz_after = ROOT.TH1F("hmediandydz_after", "", binsdydz, -windowdydz, windowdydz)

    if which == "median":
        whichx = whichy = whichdxdz = whichdydz = "median"
    elif which == "bigmean":
        whichx = "mean30"
        whichy = "mean30"
        whichdxdz = "mean20"
        whichdydz = "mean50"
    elif which == "mean":
        whichx = "mean15"
        whichy = "mean15"
        whichdxdz = "mean10"
        whichdydz = "mean25"
    elif which == "bigwmean":
        whichx = "wmean30"
        whichy = "wmean30"
        whichdxdz = "wmean20"
        whichdydz = "wmean50"
    elif which == "wmean":
        whichx = "wmean15"
        whichy = "wmean15"
        whichdxdz = "wmean10"
        whichdydz = "wmean25"
    elif which == "bigstdev":
        whichx = "stdev30"
        whichy = "stdev30"
        whichdxdz = "stdev20"
        whichdydz = "stdev50"
    elif which == "stdev":
        whichx = "stdev15"
        whichy = "stdev15"
        whichdxdz = "stdev10"
        whichdydz = "stdev25"
    else:
        raise Exception, which + " not recognized"

    for r1 in reports1:
        if selection is None or (selection.func_code.co_argcount == len(r1.postal_address) and selection(*r1.postal_address)):
            found = False
            for r2 in reports2:
                if r1.postal_address == r2.postal_address:
                    found = True
                    break
            if not found: continue

            if r1.status == "PASS" and r2.status == "PASS":
                hmedianx_before.Fill(10.*eval("r1.%s_x" % whichx))
                hmediandxdz_before.Fill(1000.*eval("r1.%s_dxdz" % whichdxdz))
                hmedianx_after.Fill(10.*eval("r2.%s_x" % whichx))
                hmediandxdz_after.Fill(1000.*eval("r2.%s_dxdz" % whichdxdz))

                if r1.median_y is not None:
                    hmediany_before.Fill(10.*eval("r1.%s_y" % whichy))
                    hmediandydz_before.Fill(1000.*eval("r1.%s_dydz" % whichdydz))
                    hmediany_after.Fill(10.*eval("r2.%s_y" % whichy))
                    hmediandydz_after.Fill(1000.*eval("r2.%s_dydz" % whichdydz))

    hmedianx_beforecopy = hmedianx_before.Clone()
    hmediany_beforecopy = hmediany_before.Clone()
    hmediandxdz_beforecopy = hmediandxdz_before.Clone()
    hmediandydz_beforecopy = hmediandydz_before.Clone()
    hmedianx_beforecopy.SetLineStyle(2)
    hmediany_beforecopy.SetLineStyle(2)
    hmediandxdz_beforecopy.SetLineStyle(2)
    hmediandydz_beforecopy.SetLineStyle(2)

    hmedianx_before.SetFillColor(ROOT.kMagenta+2)
    hmediany_before.SetFillColor(ROOT.kMagenta+2)
    hmediandxdz_before.SetFillColor(ROOT.kMagenta+2)
    hmediandydz_before.SetFillColor(ROOT.kMagenta+2)
    hmedianx_after.SetFillColor(ROOT.kYellow)
    hmediany_after.SetFillColor(ROOT.kYellow)
    hmediandxdz_after.SetFillColor(ROOT.kYellow)
    hmediandydz_after.SetFillColor(ROOT.kYellow)

    hmedianx_aftercopy = hmedianx_after.Clone()
    hmediany_aftercopy = hmediany_after.Clone()
    hmediandxdz_aftercopy = hmediandxdz_after.Clone()
    hmediandydz_aftercopy = hmediandydz_after.Clone()
    hmedianx_aftercopy.GetXaxis().SetLabelColor(ROOT.kWhite)
    hmediany_aftercopy.GetXaxis().SetLabelColor(ROOT.kWhite)
    hmediandxdz_aftercopy.GetXaxis().SetLabelColor(ROOT.kWhite)
    hmediandydz_aftercopy.GetXaxis().SetLabelColor(ROOT.kWhite)
    hmedianx_aftercopy.GetYaxis().SetLabelColor(ROOT.kWhite)
    hmediany_aftercopy.GetYaxis().SetLabelColor(ROOT.kWhite)
    hmediandxdz_aftercopy.GetYaxis().SetLabelColor(ROOT.kWhite)
    hmediandydz_aftercopy.GetYaxis().SetLabelColor(ROOT.kWhite)

    hmedianx_after.SetXTitle("median(#Deltax) (mm)")
    hmediany_after.SetXTitle("median(#Deltay) (mm)")
    hmediandxdz_after.SetXTitle("median(#Deltadx/dz) (mrad)")
    hmediandydz_after.SetXTitle("median(#Deltadydz) (mrad)")
    hmedianx_after.GetXaxis().CenterTitle()
    hmediany_after.GetXaxis().CenterTitle()
    hmediandxdz_after.GetXaxis().CenterTitle()
    hmediandydz_after.GetXaxis().CenterTitle()

    if ceilingx is not None: hmedianx_aftercopy.SetAxisRange(0., ceilingx, "Y")
    if ceilingy is not None: hmediany_aftercopy.SetAxisRange(0., ceilingy, "Y")
    if ceilingdxdz is not None: hmediandxdz_aftercopy.SetAxisRange(0., ceilingdxdz, "Y")
    if ceilingdydz is not None: hmediandydz_aftercopy.SetAxisRange(0., ceilingdydz, "Y")

    c1.Clear()
    c1.Divide(2, 2)

    c1.GetPad(1).cd()
    hmedianx_aftercopy.Draw()
    hmedianx_before.Draw("same")
    hmedianx_after.Draw("same")
    hmedianx_beforecopy.Draw("same")
    hmedianx_after.Draw("axissame")

    tlegend = ROOT.TLegend(0.17, 0.75-0.05, 0.45+0.05, 0.9)
    tlegend.SetFillColor(ROOT.kWhite)
    tlegend.SetBorderSize(0)
    tlegend.AddEntry(hmedianx_after, r2text, "f")
    tlegend.AddEntry(hmedianx_before, r1text, "f")
    tlegend.Draw()

    c1.GetPad(2).cd()
    hmediandxdz_aftercopy.Draw()
    hmediandxdz_before.Draw("same")
    hmediandxdz_after.Draw("same")
    hmediandxdz_beforecopy.Draw("same")
    hmediandxdz_after.Draw("axissame")

    c1.GetPad(3).cd()
    hmediany_aftercopy.Draw()
    hmediany_before.Draw("same")
    hmediany_after.Draw("same")
    hmediany_beforecopy.Draw("same")
    hmediany_after.Draw("axissame")

    c1.GetPad(4).cd()
    hmediandydz_aftercopy.Draw()
    hmediandydz_before.Draw("same")
    hmediandydz_after.Draw("same")
    hmediandydz_beforecopy.Draw("same")
    hmediandydz_after.Draw("axissame")

    return hmedianx_before, hmediany_before, hmediandxdz_before, hmediandydz_before, hmedianx_after, hmediany_after, hmediandxdz_after, hmediandydz_after, tlegend

######################################################################################################

phiedges_me11 = [0.087266462599716474, 0.26179938550504211, 0.43633230751381297, 0.61086524309298951, 0.78539818789089832, 0.95993106410343132, 1.13446400890134, 1.3089969444805165, 1.4835298664892873, 1.6580627893946129, 1.8325957122999386, 2.0071286343087094, 2.1816615698878858, 2.3561945146857948, 2.5307273908983277, 2.7052603356962366, 2.8797932712754131, 3.0543261932841839, -3.0543261909900767, -2.8797932680847511, -2.7052603460759803, -2.5307274104968038, -2.3561944656988949, -2.181661589486362, -2.0071286446884531, -1.8325957091092766, -1.6580627871005058, -1.4835298641951802, -1.3089969412898546, -1.1344640192810838, -0.95993108370190716, -0.78539813890399834, -0.61086526269146535, -0.43633231789355653, -0.26179938231437999, -0.087266460305609153]
phiedges_me12 = [0.087266462599716474, 0.26179938297741073, 0.43633231700542385, 0.61086526005981812, 0.78539815872971441, 0.95993109326461523, 1.1344639919345114, 1.3089969349889057, 1.4835298690169187, 1.6580627893946129, 1.8325957097723073, 2.0071286438003204, 2.1816615868547147, 2.3561944855246111, 2.5307274200595118, 2.7052603187294082, 2.879793261783802, 3.0543261958118153, -3.0543261909900767, -2.8797932706123825, -2.7052603365843693, -2.5307273935299754, -2.356194494860079, -2.1816615603251783, -2.0071286616552819, -1.8325957186008877, -1.6580627845728746, -1.4835298641951802, -1.308996943817486, -1.1344640097894729, -0.95993106673507855, -0.78539816806518226, -0.61086523353028144, -0.43633233486038514, -0.26179939180599088, -0.087266457777977771]
phiedges_me13 = [0.087266462599716474, 0.26179938235213535, 0.43633230952414037, 0.61086523916470359, 0.78539817763669606, 0.95993107435763347, 1.1344640128296259, 1.3089969424701891, 1.4835298696421941, 1.6580627893946129, 1.832595709147032, 2.0071286363190368, 2.1816615659596001, 2.3561945044315924, 2.53072740115253, 2.7052603396245227, 2.8797932692650856, 3.0543261964370907, -3.0543261909900767, -2.8797932712376579, -2.7052603440656529, -2.53072741442509, -2.3561944759530973, -2.1816615792321596, -2.0071286407601674, -1.8325957111196041, -1.6580627839475992, -1.4835298641951802, -1.3089969444427614, -1.1344640172707563, -0.95993108763019308, -0.7853981491582005, -0.61086525243726308, -0.43633231396527061, -0.2617993843247074, -0.087266457152702412]
phiedges_me14 = [0.087266462599716474, 0.26179938550504211, 0.43633230751381297, 0.61086524309298951, 0.78539818789089832, 0.95993106410343132, 1.13446400890134, 1.3089969444805165, 1.4835298664892873, 1.6580627893946129, 1.8325957122999386, 2.0071286343087094, 2.1816615698878858, 2.3561945146857948, 2.5307273908983277, 2.7052603356962366, 2.8797932712754131, 3.0543261932841839, -3.0543261909900767, -2.8797932680847511, -2.7052603460759803, -2.5307274104968038, -2.3561944656988949, -2.181661589486362, -2.0071286446884531, -1.8325957091092766, -1.6580627871005058, -1.4835298641951802, -1.3089969412898546, -1.1344640192810838, -0.95993108370190716, -0.78539813890399834, -0.61086526269146535, -0.43633231789355653, -0.26179938231437999, -0.087266460305609153]
phiedges_me21 = [0.26179938481428705, 0.6108652193791777, 0.95993108859688125, 1.3089969578145848, 1.6580627923794755, 2.0071286538798305, 2.356194498693418, 2.7052603320901376, 3.0543261769037247, -2.8797932687755066, -2.5307274342106156, -2.1816615649929121, -1.8325956957752083, -1.4835298612103178, -1.1344639997099626, -0.78539815489637521, -0.43633232149965551, -0.087266476686068212]
phiedges_me22 = [0.087266462599716474, 0.26179938871066555, 0.43633231557670243, 0.61086524129631259, 0.785398172964478, 0.95993107902985153, 1.1344640106980168, 1.308996936417627, 1.483529863283664, 1.6580627893946129, 1.8325957155055621, 2.0071286423715993, 2.1816615680912093, 2.3561944997593747, 2.5307274058247482, 2.7052603374929136, 2.8797932632125236, 3.0543261900785605, -3.0543261909900767, -2.8797932648791278, -2.7052603380130908, -2.5307274122934809, -2.3561944806253154, -2.1816615745599419, -2.0071286428917765, -1.8325957171721663, -1.6580627903061294, -1.4835298641951802, -1.3089969380842312, -1.1344640112181943, -0.95993108549858397, -0.78539815383041856, -0.61086524776504503, -0.43633231609687961, -0.26179939037726946, -0.087266463511232586]
phiedges_me31 = [0.26179938498198485, 0.61086523665761272, 0.95993108859688125, 1.3089969405361499, 1.6580627922117777, 2.0071286313120122, 2.3561944778405319, 2.7052603529430232, 3.0543261994715434, -2.8797932686078087, -2.530727416932181, -2.1816615649929121, -1.8325957130536434, -1.4835298613780155, -1.1344640222777811, -0.78539817574926085, -0.43633230064676976, -0.087266454118249653]
phiedges_me32 = [0.087266462599716474, 0.26179938871066555, 0.43633231557670243, 0.61086524129631259, 0.785398172964478, 0.95993107902985153, 1.1344640106980168, 1.308996936417627, 1.483529863283664, 1.6580627893946129, 1.8325957155055621, 2.0071286423715993, 2.1816615680912093, 2.3561944997593747, 2.5307274058247482, 2.7052603374929136, 2.8797932632125236, 3.0543261900785605, -3.0543261909900767, -2.8797932648791278, -2.7052603380130908, -2.5307274122934809, -2.3561944806253154, -2.1816615745599419, -2.0071286428917765, -1.8325957171721663, -1.6580627903061294, -1.4835298641951802, -1.3089969380842312, -1.1344640112181943, -0.95993108549858397, -0.78539815383041856, -0.61086524776504503, -0.43633231609687961, -0.26179939037726946, -0.087266463511232586]
phiedges_me41 = [0.26179938879942166, 0.61086525092924071, 0.95993108859688125, 1.3089969262645218, 1.6580627883943408, 2.0071286288299772, 2.3561945088997609, 2.7052603218837943, 3.0543262019535784, -2.8797932647903717, -2.5307274026605526, -2.1816615649929121, -1.8325957273252713, -1.4835298651954525, -1.1344640247598159, -0.785398144690032, -0.43633233170599861, -0.087266451636214853]
phiedges_me42 = [0.087266462599716474, 0.26179938871066555, 0.43633231557670243, 0.61086524129631259, 0.785398172964478, 0.95993107902985153, 1.1344640106980168, 1.308996936417627, 1.483529863283664, 1.6580627893946129, 1.8325957155055621, 2.0071286423715993, 2.1816615680912093, 2.3561944997593747, 2.5307274058247482, 2.7052603374929136, 2.8797932632125236, 3.0543261900785605, -3.0543261909900767, -2.8797932648791278, -2.7052603380130908, -2.5307274122934809, -2.3561944806253154, -2.1816615745599419, -2.0071286428917765, -1.8325957171721663, -1.6580627903061294, -1.4835298641951802, -1.3089969380842312, -1.1344640112181943, -0.95993108549858397, -0.78539815383041856, -0.61086524776504503, -0.43633231609687961, -0.26179939037726946, -0.087266463511232586]

phiedges1 = [0.35228048120123945, 0.87587781482541827, 1.3994776462193192, 1.923076807996136, 2.4466741416203148, 2.970273973014216, -2.7893121723885534, -2.2657148387643748, -1.7421150073704739, -1.2185158455936571, -0.69491851196947851, -0.17131868057557731]
phiedges2 = [0.22000706229660855, 0.74360690430428489, 1.267204926935573, 1.7908033890915052, 2.3144032310991816, 2.8380012537304697, -2.9215855912931841, -2.3979857492855081, -1.8743877266542202, -1.3507892644982882, -0.82718942249061178, -0.30359139985932365]
phiedges3 = [0.29751957124275596, 0.82111826253905784, 1.3447162969496083, 1.8683158980376524, 2.3919145893339548, 2.915512623744505, -2.844073082347037, -2.3204743910507353, -1.7968763566401849, -1.2732767555521407, -0.74967806425583894, -0.22608002984528835]
phiedges4 = [3.0136655290752188, -2.7530905195097337, -2.2922883025568734, -1.9222915077192773, -1.5707963267948966, -1.2193011458705159, -0.84930435103291968, -0.38850213408005951, 0.127927124514574, 0.65152597487624719, 1.1322596819239259, 1.5707963267948966, 2.0093329716658674, 2.4900666787135459]

def philines(station, window, abscissa):
    global philine_tlines
    philine_tlines = []
    if station == "me11": phiedges = phiedges_me11
    if station == "me12": phiedges = phiedges_me12
    if station == "me13": phiedges = phiedges_me13
    if station == "me14": phiedges = phiedges_me14
    if station == "me21": phiedges = phiedges_me21
    if station == "me22": phiedges = phiedges_me22
    if station == "me31": phiedges = phiedges_me31
    if station == "me32": phiedges = phiedges_me32
    if station == "me41": phiedges = phiedges_me41
    if station == "me42": phiedges = phiedges_me42
    if station == 1: phiedges = phiedges1
    if station == 2: phiedges = phiedges2
    if station == 3: phiedges = phiedges3
    if station == 4: phiedges = phiedges4
    for phi in phiedges:
        if abscissa is None or abscissa[0] < phi < abscissa[1]:
            philine_tlines.append(ROOT.TLine(phi, -window, phi, window))
            philine_tlines[-1].SetLineStyle(2)
            philine_tlines[-1].Draw()

def zlines(window, abscissa):
    global zline_tlines
    zline_tlines = []
    for z in -401.625, -133.875, 133.875, 401.625:
        if abscissa is None or abscissa[0] < z < abscissa[1]:
            zline_tlines.append(ROOT.TLine(z, -window, z, window))
            zline_tlines[-1].SetLineStyle(2)
            zline_tlines[-1].Draw()

def rlines(disk, window, abscissa):
    global rline_tlines
    rline_tlines = []
    if disk == 1: rl = [150., 270., 480.]
    else: rl = [350.]
    for r in rl:
        if abscissa is None or abscissa[0] < r < abscissa[1]:
            rline_tlines.append(ROOT.TLine(r, -window, r, window))
            rline_tlines[-1].SetLineStyle(2)
            rline_tlines[-1].Draw()

def mapplot(tfiles, name, param, mode="from2d", window=40., abscissa=None, title="", widebins=False, fitsine=False, reset_palette=True):
    tdrStyle.SetOptTitle(1)
    tdrStyle.SetTitleBorderSize(0)
    tdrStyle.SetOptStat(0)
    tdrStyle.SetOptFit(0)
    tdrStyle.SetTitleFontSize(0.05)

    c1.Clear()
    if reset_palette: set_palette("blues")
    global hist, hist2d, hist2dweight, tline1, tline2, tline3
    prof = tfiles[0].Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_prof" % (name, param)).Clone()
    profPos = tfiles[0].Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_profPos" % (name, param)).Clone()
    profNeg = tfiles[0].Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_profNeg" % (name, param)).Clone()
    weights = tfiles[0].Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_weights" % (name, param)).Clone()
    valweights = tfiles[0].Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_valweights" % (name, param)).Clone()
    hist2d = tfiles[0].Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_2d" % (name, param)).Clone()
    hist2dweight = tfiles[0].Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_2dweight" % (name, param)).Clone()
    for tfile in tfiles[1:]:
        prof.Add(tfile.Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_prof" % (name, param)))
        profPos.Add(tfile.Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_profPos" % (name, param)))
        profNeg.Add(tfile.Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_profNeg" % (name, param)))
        weights.Add(tfile.Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_weights" % (name, param)))
        valweights.Add(tfile.Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_valweights" % (name, param)))
        hist2d.Add(tfile.Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_2d" % (name, param)))
        hist2dweight.Add(tfile.Get("AlignmentMonitorMuonSystemMap1D/iter1/%s_%s_2dweight" % (name, param)))

    if mode == "plain":
        hist = prof

    elif mode in ("from2d", "from2dweight"):
        if mode == "from2d": the2d = hist2d
        else: the2d = hist2dweight

        hist = weights.Clone()
        skip = 1
        if widebins:
            hist.Rebin(10)
            skip = 10

        for i in xrange(0, int(weights.GetNbinsX()), skip):
            tmp = the2d.ProjectionY("tmp", i+1, i + skip)
            if tmp.GetEntries() > 2:
                hist.SetBinContent(i/skip+1, tmp.GetMean())
                hist.SetBinError(i/skip+1, tmp.GetRMS() / sqrt(tmp.GetEntries()))
            else:
                hist.SetBinContent(i/skip+1, 2000.)
                hist.SetBinError(i/skip+1, 1000.)
        
    elif mode == "weighted":
        if weights.GetEntries() == 0:
            averageweight = 0.
        else:
            sumofweights = 0.
            for i in xrange(0, int(weights.GetNbinsX())+2):
                sumofweights += weights.GetBinContent(i)
            averageweight = sumofweights / weights.GetEntries()
        hist = weights.Clone()
        for i in xrange(1, int(weights.GetNbinsX())+1):
            if weights.GetBinContent(i) > 0:
                thisweight = weights.GetBinContent(i) / averageweight
                hist.SetBinContent(i, valweights.GetBinContent(i) / thisweight)
                hist.SetBinError(i, sqrt(1. / thisweight))
            else:
                hist.SetBinContent(i, 2000.)
                hist.SetBinError(i, 1000.)

    else:
        raise Exception

    if fitsine:
        f = ROOT.TF1("f", "[0] + [1]*sin(x) + [2]*cos(x)", -pi, pi)
        hist2d.Fit(f, "q")
        hist2d.GetFunction("f").SetLineColor(ROOT.kRed)
        global fitsine_const, fitsine_sin, fitsine_cos, fitsine_chi2, fitsine_ndf
        fitsine_const = hist2d.GetFunction("f").GetParameter(0), hist2d.GetFunction("f").GetParError(0)
        fitsine_sin = hist2d.GetFunction("f").GetParameter(1), hist2d.GetFunction("f").GetParError(1)
        fitsine_cos = hist2d.GetFunction("f").GetParameter(2), hist2d.GetFunction("f").GetParError(2)
        fitsine_chi2 = hist2d.GetFunction("f").GetChisquare()
        fitsine_ndf = hist2d.GetFunction("f").GetNDF()

    hist.SetAxisRange(-window, window, "Y")
    if abscissa is not None: hist.SetAxisRange(abscissa[0], abscissa[1], "X")
    hist.SetMarkerStyle(20)
    hist.SetMarkerSize(0.75)
    hist.GetXaxis().CenterTitle()
    hist.GetYaxis().CenterTitle()
    hist.GetYaxis().SetTitleOffset(0.75)
    hist.GetXaxis().SetTitleSize(0.05)
    hist.GetYaxis().SetTitleSize(0.05)
    hist.SetTitle(title)
    if "vsphi" in name: hist.SetXTitle("Global #phi position (rad)")
    elif "vsz" in name: hist.SetXTitle("Global z position (cm)")
    elif "vsr" in name: hist.SetXTitle("Global R position (cm)")
    if "DT" in name:
        if param == "x": hist.SetYTitle("x' residual (mm)")
        if param == "dxdz": hist.SetYTitle("dx'/dz residual (mrad)")
        if param == "y": hist.SetYTitle("y' residual (mm)")
        if param == "dydz": hist.SetYTitle("dy'/dz residual (mm)")
    if "CSC" in name:
        if param == "x": hist.SetYTitle("r#phi residual (mm)")
        if param == "dxdz": hist.SetYTitle("d(r#phi)/dz residual (mrad)")
    hist.SetMarkerColor(ROOT.kBlack)
    hist.SetLineColor(ROOT.kBlack)
    hist.Draw()
    hist2d.Draw("colzsame")
    if widebins: hist.Draw("samee1")
    else: hist.Draw("same")
    if fitsine: hist2d.GetFunction("f").Draw("same")
    if "vsphi" in name: 
        if ("mem11" in name or "mep11" in name) and not widebins: philines("me11", window, abscissa)
        elif ("mem12" in name or "mep12" in name) and not widebins: philines("me12", window, abscissa)
        elif ("mem13" in name or "mep13" in name) and not widebins: philines("me13", window, abscissa)
        elif ("mem14" in name or "mep14" in name) and not widebins: philines("me14", window, abscissa)
        elif ("mem21" in name or "mep21" in name) and not widebins: philines("me21", window, abscissa)
        elif ("mem22" in name or "mep22" in name) and not widebins: philines("me22", window, abscissa)
        elif ("mem31" in name or "mep31" in name) and not widebins: philines("me31", window, abscissa)
        elif ("mem32" in name or "mep32" in name) and not widebins: philines("me32", window, abscissa)
        elif ("mem41" in name or "mep41" in name) and not widebins: philines("me41", window, abscissa)
        elif ("mem42" in name or "mep42" in name) and not widebins: philines("me42", window, abscissa)
        elif ("st1" in name) and not widebins: philines(1, window, abscissa)
        elif ("st2" in name) and not widebins: philines(2, window, abscissa)
        elif ("st3" in name) and not widebins: philines(3, window, abscissa)
        elif ("st4" in name) and not widebins: philines(4, window, abscissa)
        if abscissa is None:
            tline1 = ROOT.TLine(-pi, 0, pi, 0); tline1.Draw()
            tline2 = ROOT.TLine(-pi, -window, pi, -window); tline2.SetLineWidth(2); tline2.Draw()
            tline3 = ROOT.TLine(-pi, window, pi, window); tline3.Draw()
        else:
            tline1 = ROOT.TLine(abscissa[0], 0, abscissa[1], 0); tline1.Draw()
            tline2 = ROOT.TLine(abscissa[0], -window, abscissa[1], -window); tline2.SetLineWidth(2); tline2.Draw()
            tline3 = ROOT.TLine(abscissa[0], window, abscissa[1], window); tline3.Draw()
    elif "vsz" in name:
        if not widebins: zlines(window, abscissa)
        if abscissa is None:
            tline1 = ROOT.TLine(-660, 0, 660, 0); tline1.Draw()
            tline2 = ROOT.TLine(-660, -window, 660, -window); tline2.SetLineWidth(2); tline2.Draw()
            tline3 = ROOT.TLine(-660, window, 660, window); tline3.Draw()
        else:
            tline1 = ROOT.TLine(abscissa[0], 0, abscissa[1], 0); tline1.Draw()
            tline2 = ROOT.TLine(abscissa[0], -window, abscissa[1], -window); tline2.SetLineWidth(2); tline2.Draw()
            tline3 = ROOT.TLine(abscissa[0], window, abscissa[1], window); tline3.Draw()
    elif "vsr" in name:
        if "mem1" in name or "mep1" in name and not widebins: rlines(1, window, abscissa)
        if "mem2" in name or "mep2" in name and not widebins: rlines(2, window, abscissa)
        if "mem3" in name or "mep3" in name and not widebins: rlines(3, window, abscissa)
        if "mem4" in name or "mep4" in name and not widebins: rlines(4, window, abscissa)
        if abscissa is None:
            tline1 = ROOT.TLine(100, 0, 700, 0); tline1.Draw()
            tline2 = ROOT.TLine(100, -window, 700, -window); tline2.SetLineWidth(2); tline2.Draw()
            tline3 = ROOT.TLine(100, window, 700, window); tline3.Draw()
        else:
            tline1 = ROOT.TLine(abscissa[0], 0, abscissa[1], 0); tline1.Draw()
            tline2 = ROOT.TLine(abscissa[0], -window, abscissa[1], -window); tline2.SetLineWidth(2); tline2.Draw()
            tline3 = ROOT.TLine(abscissa[0], window, abscissa[1], window); tline3.Draw()

def getname(r):
    if r.postal_address[0] == "DT":
        wheel, station, sector = r.postal_address[1:]
        return "DT wheel %d, station %d, sector %d" % (wheel, station, sector)
    elif r.postal_address[0] == "CSC":
        endcap, station, ring, chamber = r.postal_address[1:]
        if endcap != 1: station = -1 * abs(station)
        return "CSC ME%d/%d chamber %d" % (station, ring, chamber)

def bellcurves(tfile, reports, name, twobin=True, suppressblue=False):
    plotDirectory = "MuonAlignmentFromReference"
    tdrStyle.SetOptTitle(1)
    tdrStyle.SetTitleBorderSize(1)
    tdrStyle.SetTitleFontSize(0.1)
    tdrStyle.SetOptStat(0)

    found = False
    for r in reports:
        if r.name == name:
            found = True
            break
    if not found: raise Exception, "Not a valid name"
    if r.status == "FAIL": raise Exception, "Fit failed"
    
    Pos = "Pos"; Neg = "Neg"
    if not twobin:
        Pos = ""; Neg = ""

    chamber_x = tfile.Get("%s/%s%s_x" % (plotDirectory, name, Pos))
    chamber_x_fit = tfile.Get("%s/%s%s_x_fit" % (plotDirectory, name, Pos))
    chamber_y = tfile.Get("%s/%s%s_y" % (plotDirectory, name, Pos))
    chamber_y_fit = tfile.Get("%s/%s%s_y_fit" % (plotDirectory, name, Pos))
    chamber_dxdz = tfile.Get("%s/%s%s_dxdz" % (plotDirectory, name, Pos))
    chamber_dxdz_fit = tfile.Get("%s/%s%s_dxdz_fit" % (plotDirectory, name, Pos))
    chamber_dydz = tfile.Get("%s/%s%s_dydz" % (plotDirectory, name, Pos))
    chamber_dydz_fit = tfile.Get("%s/%s%s_dydz_fit" % (plotDirectory, name, Pos))
    chamber_alphax = tfile.Get("%s/%s%s_alphax" % (plotDirectory, name, Pos))
    chamber_alphax_fit = tfile.Get("%s/%s%s_alphax_fit" % (plotDirectory, name, Pos))
    chamber_alphay = tfile.Get("%s/%s%s_alphay" % (plotDirectory, name, Pos))
    chamber_alphay_fit = tfile.Get("%s/%s%s_alphay_fit" % (plotDirectory, name, Pos))
    chamber_x_fit2 = tfile.Get("%s/%s%s_x_fit" % (plotDirectory, name, Neg))
    chamber_y_fit2 = tfile.Get("%s/%s%s_y_fit" % (plotDirectory, name, Neg))
    chamber_dxdz_fit2 = tfile.Get("%s/%s%s_dxdz_fit" % (plotDirectory, name, Neg))
    chamber_dydz_fit2 = tfile.Get("%s/%s%s_dydz_fit" % (plotDirectory, name, Neg))
    chamber_alphax_fit2 = tfile.Get("%s/%s%s_alphax_fit" % (plotDirectory, name, Neg))
    chamber_alphay_fit2 = tfile.Get("%s/%s%s_alphay_fit" % (plotDirectory, name, Neg))

    if chamber_x is None:
        chamber_x = tfile.Get("%s/%s%s_residual" % (plotDirectory, name, Pos))
        chamber_x_fit = tfile.Get("%s/%s%s_residual_fit" % (plotDirectory, name, Pos))
        chamber_dxdz = tfile.Get("%s/%s%s_resslope" % (plotDirectory, name, Pos))
        chamber_dxdz_fit = tfile.Get("%s/%s%s_resslope_fit" % (plotDirectory, name, Pos))
        chamber_alphax = tfile.Get("%s/%s%s_alpha" % (plotDirectory, name, Pos))
        chamber_alphax_fit = tfile.Get("%s/%s%s_alpha_fit" % (plotDirectory, name, Pos))
        chamber_x_fit2 = tfile.Get("%s/%s%s_residual_fit" % (plotDirectory, name, Neg))
        chamber_dxdz_fit2 = tfile.Get("%s/%s%s_resslope_fit" % (plotDirectory, name, Neg))
        chamber_alphax_fit2 = tfile.Get("%s/%s%s_alpha_fit" % (plotDirectory, name, Neg))

    ####
    chamber_x.SetAxisRange(-30., 30., "X")
    chamber_dxdz.SetAxisRange(-50., 50., "X")
    if chamber_y is not None:
        chamber_y.SetAxisRange(-50., 50., "X")
        chamber_dydz.SetAxisRange(-200., 200., "X")
    ####

    chamber_x.SetXTitle("Local x residual (mm)")
    chamber_dxdz.SetXTitle("Local dx/dz residual (mrad)")
    chamber_alphax.SetXTitle("Local dx/dz residual (mrad)")
    chamber_alphax.SetYTitle("Local x residual (mm)")
    if chamber_y is not None:
        chamber_y.SetXTitle("Local y residual (mm)")
        chamber_dydz.SetXTitle("Local dy/dz residual (mrad)")
        chamber_alphay.SetXTitle("Local dy/dz residual (mrad)")
        chamber_alphay.SetYTitle("Local y residual (mm)")
    if name[0:2] == "ME":
        chamber_x.SetXTitle("Local r#phi residual (mm)")
        chamber_dxdz.SetXTitle("Local d(r#phi)/dz residual (mrad)")
        chamber_alphax.SetXTitle("Local d(r#phi)/dz residual (mrad)")
        chamber_alphax.SetYTitle("Local r#phi residual (mm)")

    for h in chamber_x, chamber_dxdz, chamber_alphax, chamber_alphax, chamber_y, chamber_dydz, chamber_alphay, chamber_alphay:
        if h is not None:
            h.GetXaxis().CenterTitle()
            h.GetYaxis().CenterTitle()
            h.GetXaxis().SetLabelSize(0.05)
            h.GetYaxis().SetLabelSize(0.05)
            h.GetXaxis().SetTitleSize(0.07)
            h.GetYaxis().SetTitleSize(0.07)
            h.GetXaxis().SetTitleOffset(0.9)
            h.GetYaxis().SetTitleOffset(0.9)

    for f in chamber_x_fit2, chamber_y_fit2, chamber_dxdz_fit2, chamber_dydz_fit2, chamber_alphax_fit2, chamber_alphay_fit2:
        if f is not None:
            f.SetLineColor(4)

    if chamber_y is not None:
        c1.Clear()
        c1.Divide(3, 2)
        chamber_x.SetTitle(getname(r))

        c1.GetPad(1).cd()
        chamber_x.Draw()
        if not suppressblue: chamber_x_fit2.Draw("same")
        chamber_x_fit.Draw("same")
        
        c1.GetPad(2).cd()
        chamber_dxdz.Draw()
        if not suppressblue: chamber_dxdz_fit2.Draw("same")
        chamber_dxdz_fit.Draw("same")
        
        c1.GetPad(3).cd()
        chamber_alphax.Draw()
        if not suppressblue: chamber_alphax_fit2.Draw("same")
        chamber_alphax_fit.Draw("same")
        
        c1.GetPad(4).cd()
        chamber_y.Draw()
        if not suppressblue: chamber_y_fit2.Draw("same")
        chamber_y_fit.Draw("same")
        
        c1.GetPad(5).cd()
        chamber_dydz.Draw()
        if not suppressblue: chamber_dydz_fit2.Draw("same")
        chamber_dydz_fit.Draw("same")
        
        c1.GetPad(6).cd()
        chamber_alphay.Draw()
        if not suppressblue: chamber_alphay_fit2.Draw("same")
        chamber_alphay_fit.Draw("same")

    else:
        c1.Clear()
        c1.Divide(3, 1)
        chamber_x.SetTitle(getname(r))

        c1.GetPad(1).cd()
        chamber_x.Draw()
        if not suppressblue: chamber_x_fit2.Draw("same")
        chamber_x_fit.Draw("same")
        
        c1.GetPad(2).cd()
        chamber_dxdz.Draw()
        if not suppressblue: chamber_dxdz_fit2.Draw("same")
        chamber_dxdz_fit.Draw("same")
        
        c1.GetPad(3).cd()
        chamber_alphax.Draw()
        if not suppressblue: chamber_alphax_fit2.Draw("same")
        chamber_alphax_fit.Draw("same")

def polynomials(tfile, reports, name, twobin=True, suppressblue=False):
    global label1, label2, label3, label4, label5, label6, label7, label8, label9
    plotDirectory = "MuonAlignmentFromReference"
    tdrStyle.SetOptTitle(1)
    tdrStyle.SetTitleBorderSize(1)
    tdrStyle.SetTitleFontSize(0.1)
    tdrStyle.SetOptStat(0)

    found = False
    for r in reports:
        if r.name == name:
            found = True
            break
    if not found: raise Exception, "Not a valid name"
    if r.status == "FAIL": raise Exception, "Fit failed"

    Pos = "Pos"; Neg = "Neg"
    if not twobin:
        Pos = ""; Neg = ""

    chamber_x_trackx = tfile.Get("%s/%s%s_x_trackx" % (plotDirectory, name, Pos))
    chamber_x_trackx_fit = tfile.Get("%s/%s%s_x_trackx_fitline" % (plotDirectory, name, Pos))
    chamber_y_trackx = tfile.Get("%s/%s%s_y_trackx" % (plotDirectory, name, Pos))
    chamber_y_trackx_fit = tfile.Get("%s/%s%s_y_trackx_fitline" % (plotDirectory, name, Pos))
    chamber_dxdz_trackx = tfile.Get("%s/%s%s_dxdz_trackx" % (plotDirectory, name, Pos))
    chamber_dxdz_trackx_fit = tfile.Get("%s/%s%s_dxdz_trackx_fitline" % (plotDirectory, name, Pos))
    chamber_dydz_trackx = tfile.Get("%s/%s%s_dydz_trackx" % (plotDirectory, name, Pos))
    chamber_dydz_trackx_fit = tfile.Get("%s/%s%s_dydz_trackx_fitline" % (plotDirectory, name, Pos))
    chamber_x_trackx_fit2 = tfile.Get("%s/%s%s_x_trackx_fitline" % (plotDirectory, name, Neg))
    chamber_y_trackx_fit2 = tfile.Get("%s/%s%s_y_trackx_fitline" % (plotDirectory, name, Neg))
    chamber_dxdz_trackx_fit2 = tfile.Get("%s/%s%s_dxdz_trackx_fitline" % (plotDirectory, name, Neg))
    chamber_dydz_trackx_fit2 = tfile.Get("%s/%s%s_dydz_trackx_fitline" % (plotDirectory, name, Neg))

    chamber_x_tracky = tfile.Get("%s/%s%s_x_tracky" % (plotDirectory, name, Pos))
    chamber_x_tracky_fit = tfile.Get("%s/%s%s_x_tracky_fitline" % (plotDirectory, name, Pos))
    chamber_y_tracky = tfile.Get("%s/%s%s_y_tracky" % (plotDirectory, name, Pos))
    chamber_y_tracky_fit = tfile.Get("%s/%s%s_y_tracky_fitline" % (plotDirectory, name, Pos))
    chamber_dxdz_tracky = tfile.Get("%s/%s%s_dxdz_tracky" % (plotDirectory, name, Pos))
    chamber_dxdz_tracky_fit = tfile.Get("%s/%s%s_dxdz_tracky_fitline" % (plotDirectory, name, Pos))
    chamber_dydz_tracky = tfile.Get("%s/%s%s_dydz_tracky" % (plotDirectory, name, Pos))
    chamber_dydz_tracky_fit = tfile.Get("%s/%s%s_dydz_tracky_fitline" % (plotDirectory, name, Pos))
    chamber_x_tracky_fit2 = tfile.Get("%s/%s%s_x_tracky_fitline" % (plotDirectory, name, Neg))
    chamber_y_tracky_fit2 = tfile.Get("%s/%s%s_y_tracky_fitline" % (plotDirectory, name, Neg))
    chamber_dxdz_tracky_fit2 = tfile.Get("%s/%s%s_dxdz_tracky_fitline" % (plotDirectory, name, Neg))
    chamber_dydz_tracky_fit2 = tfile.Get("%s/%s%s_dydz_tracky_fitline" % (plotDirectory, name, Neg))

    chamber_x_trackdxdz = tfile.Get("%s/%s%s_x_trackdxdz" % (plotDirectory, name, Pos))
    chamber_x_trackdxdz_fit = tfile.Get("%s/%s%s_x_trackdxdz_fitline" % (plotDirectory, name, Pos))
    chamber_y_trackdxdz = tfile.Get("%s/%s%s_y_trackdxdz" % (plotDirectory, name, Pos))
    chamber_y_trackdxdz_fit = tfile.Get("%s/%s%s_y_trackdxdz_fitline" % (plotDirectory, name, Pos))
    chamber_dxdz_trackdxdz = tfile.Get("%s/%s%s_dxdz_trackdxdz" % (plotDirectory, name, Pos))
    chamber_dxdz_trackdxdz_fit = tfile.Get("%s/%s%s_dxdz_trackdxdz_fitline" % (plotDirectory, name, Pos))
    chamber_dydz_trackdxdz = tfile.Get("%s/%s%s_dydz_trackdxdz" % (plotDirectory, name, Pos))
    chamber_dydz_trackdxdz_fit = tfile.Get("%s/%s%s_dydz_trackdxdz_fitline" % (plotDirectory, name, Pos))
    chamber_x_trackdxdz_fit2 = tfile.Get("%s/%s%s_x_trackdxdz_fitline" % (plotDirectory, name, Neg))
    chamber_y_trackdxdz_fit2 = tfile.Get("%s/%s%s_y_trackdxdz_fitline" % (plotDirectory, name, Neg))
    chamber_dxdz_trackdxdz_fit2 = tfile.Get("%s/%s%s_dxdz_trackdxdz_fitline" % (plotDirectory, name, Neg))
    chamber_dydz_trackdxdz_fit2 = tfile.Get("%s/%s%s_dydz_trackdxdz_fitline" % (plotDirectory, name, Neg))

    chamber_x_trackdydz = tfile.Get("%s/%s%s_x_trackdydz" % (plotDirectory, name, Pos))
    chamber_x_trackdydz_fit = tfile.Get("%s/%s%s_x_trackdydz_fitline" % (plotDirectory, name, Pos))
    chamber_y_trackdydz = tfile.Get("%s/%s%s_y_trackdydz" % (plotDirectory, name, Pos))
    chamber_y_trackdydz_fit = tfile.Get("%s/%s%s_y_trackdydz_fitline" % (plotDirectory, name, Pos))
    chamber_dxdz_trackdydz = tfile.Get("%s/%s%s_dxdz_trackdydz" % (plotDirectory, name, Pos))
    chamber_dxdz_trackdydz_fit = tfile.Get("%s/%s%s_dxdz_trackdydz_fitline" % (plotDirectory, name, Pos))
    chamber_dydz_trackdydz = tfile.Get("%s/%s%s_dydz_trackdydz" % (plotDirectory, name, Pos))
    chamber_dydz_trackdydz_fit = tfile.Get("%s/%s%s_dydz_trackdydz_fitline" % (plotDirectory, name, Pos))
    chamber_x_trackdydz_fit2 = tfile.Get("%s/%s%s_x_trackdydz_fitline" % (plotDirectory, name, Neg))
    chamber_y_trackdydz_fit2 = tfile.Get("%s/%s%s_y_trackdydz_fitline" % (plotDirectory, name, Neg))
    chamber_dxdz_trackdydz_fit2 = tfile.Get("%s/%s%s_dxdz_trackdydz_fitline" % (plotDirectory, name, Neg))
    chamber_dydz_trackdydz_fit2 = tfile.Get("%s/%s%s_dydz_trackdydz_fitline" % (plotDirectory, name, Neg))

    if chamber_x_trackx is None:
        chamber_x_trackx = tfile.Get("%s/%s%s_residual_trackx" % (plotDirectory, name, Pos))
        chamber_x_trackx_fit = tfile.Get("%s/%s%s_residual_trackx_fitline" % (plotDirectory, name, Pos))
        chamber_dxdz_trackx = tfile.Get("%s/%s%s_resslope_trackx" % (plotDirectory, name, Pos))
        chamber_dxdz_trackx_fit = tfile.Get("%s/%s%s_resslope_trackx_fitline" % (plotDirectory, name, Pos))
        chamber_x_trackx_fit2 = tfile.Get("%s/%s%s_residual_trackx_fitline" % (plotDirectory, name, Neg))
        chamber_dxdz_trackx_fit2 = tfile.Get("%s/%s%s_resslope_trackx_fitline" % (plotDirectory, name, Neg))

        chamber_x_tracky = tfile.Get("%s/%s%s_residual_tracky" % (plotDirectory, name, Pos))
        chamber_x_tracky_fit = tfile.Get("%s/%s%s_residual_tracky_fitline" % (plotDirectory, name, Pos))
        chamber_dxdz_tracky = tfile.Get("%s/%s%s_resslope_tracky" % (plotDirectory, name, Pos))
        chamber_dxdz_tracky_fit = tfile.Get("%s/%s%s_resslope_tracky_fitline" % (plotDirectory, name, Pos))
        chamber_x_tracky_fit2 = tfile.Get("%s/%s%s_residual_tracky_fitline" % (plotDirectory, name, Neg))
        chamber_dxdz_tracky_fit2 = tfile.Get("%s/%s%s_resslope_tracky_fitline" % (plotDirectory, name, Neg))

        chamber_x_trackdxdz = tfile.Get("%s/%s%s_residual_trackdxdz" % (plotDirectory, name, Pos))
        chamber_x_trackdxdz_fit = tfile.Get("%s/%s%s_residual_trackdxdz_fitline" % (plotDirectory, name, Pos))
        chamber_dxdz_trackdxdz = tfile.Get("%s/%s%s_resslope_trackdxdz" % (plotDirectory, name, Pos))
        chamber_dxdz_trackdxdz_fit = tfile.Get("%s/%s%s_resslope_trackdxdz_fitline" % (plotDirectory, name, Pos))
        chamber_x_trackdxdz_fit2 = tfile.Get("%s/%s%s_residual_trackdxdz_fitline" % (plotDirectory, name, Neg))
        chamber_dxdz_trackdxdz_fit2 = tfile.Get("%s/%s%s_resslope_trackdxdz_fitline" % (plotDirectory, name, Neg))

        chamber_x_trackdydz = tfile.Get("%s/%s%s_residual_trackdydz" % (plotDirectory, name, Pos))
        chamber_x_trackdydz_fit = tfile.Get("%s/%s%s_residual_trackdydz_fitline" % (plotDirectory, name, Pos))
        chamber_dxdz_trackdydz = tfile.Get("%s/%s%s_resslope_trackdydz" % (plotDirectory, name, Pos))
        chamber_dxdz_trackdydz_fit = tfile.Get("%s/%s%s_resslope_trackdydz_fitline" % (plotDirectory, name, Pos))
        chamber_x_trackdydz_fit2 = tfile.Get("%s/%s%s_residual_trackdydz_fitline" % (plotDirectory, name, Neg))
        chamber_dxdz_trackdydz_fit2 = tfile.Get("%s/%s%s_resslope_trackdydz_fitline" % (plotDirectory, name, Neg))

    chamber_x_trackx = chamber_x_trackx.Clone()
    chamber_dxdz_trackx = chamber_dxdz_trackx.Clone()
    chamber_x_tracky = chamber_x_tracky.Clone()
    chamber_dxdz_tracky = chamber_dxdz_tracky.Clone()
    chamber_x_trackdxdz = chamber_x_trackdxdz.Clone()
    chamber_dxdz_trackdxdz = chamber_dxdz_trackdxdz.Clone()
    chamber_x_trackdydz = chamber_x_trackdydz.Clone()
    chamber_dxdz_trackdydz = chamber_dxdz_trackdydz.Clone()

    if chamber_y_trackx is not None:
        chamber_y_trackx = chamber_y_trackx.Clone()
        chamber_dydz_trackx = chamber_dydz_trackx.Clone()
        chamber_y_tracky = chamber_y_tracky.Clone()
        chamber_dydz_tracky = chamber_dydz_tracky.Clone()
        chamber_y_trackdxdz = chamber_y_trackdxdz.Clone()
        chamber_dydz_trackdxdz = chamber_dydz_trackdxdz.Clone()
        chamber_y_trackdydz = chamber_y_trackdydz.Clone()
        chamber_dydz_trackdydz = chamber_dydz_trackdydz.Clone()

    if chamber_y_trackx is not None:
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_x_trackx" % (plotDirectory, name, Neg))); chamber_x_trackx.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_dxdz_trackx" % (plotDirectory, name, Neg))); chamber_dxdz_trackx.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_x_tracky" % (plotDirectory, name, Neg))); chamber_x_tracky.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_dxdz_tracky" % (plotDirectory, name, Neg))); chamber_dxdz_tracky.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_x_trackdxdz" % (plotDirectory, name, Neg))); chamber_x_trackdxdz.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_dxdz_trackdxdz" % (plotDirectory, name, Neg))); chamber_dxdz_trackdxdz.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_x_trackdydz" % (plotDirectory, name, Neg))); chamber_x_trackdydz.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_dxdz_trackdydz" % (plotDirectory, name, Neg))); chamber_dxdz_trackdydz.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_y_trackx" % (plotDirectory, name, Neg))); chamber_y_trackx.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_dydz_trackx" % (plotDirectory, name, Neg))); chamber_dydz_trackx.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_y_tracky" % (plotDirectory, name, Neg))); chamber_y_tracky.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_dydz_tracky" % (plotDirectory, name, Neg))); chamber_dydz_tracky.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_y_trackdxdz" % (plotDirectory, name, Neg))); chamber_y_trackdxdz.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_dydz_trackdxdz" % (plotDirectory, name, Neg))); chamber_dydz_trackdxdz.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_y_trackdydz" % (plotDirectory, name, Neg))); chamber_y_trackdydz.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_dydz_trackdydz" % (plotDirectory, name, Neg))); chamber_dydz_trackdydz.Merge(tlist)
    else:
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_residual_trackx" % (plotDirectory, name, Neg))); chamber_x_trackx.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_resslope_trackx" % (plotDirectory, name, Neg))); chamber_dxdz_trackx.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_residual_tracky" % (plotDirectory, name, Neg))); chamber_x_tracky.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_resslope_tracky" % (plotDirectory, name, Neg))); chamber_dxdz_tracky.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_residual_trackdxdz" % (plotDirectory, name, Neg))); chamber_x_trackdxdz.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_resslope_trackdxdz" % (plotDirectory, name, Neg))); chamber_dxdz_trackdxdz.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_residual_trackdydz" % (plotDirectory, name, Neg))); chamber_x_trackdydz.Merge(tlist)
        tlist = ROOT.TList(); tlist.Add(tfile.Get("%s/%s%s_resslope_trackdydz" % (plotDirectory, name, Neg))); chamber_dxdz_trackdydz.Merge(tlist)

    chamber_x_trackx.SetAxisRange(-14.99, 14.99, "Y")
    chamber_dxdz_trackx.SetAxisRange(-7.5, 7.5, "Y")
    chamber_x_tracky.SetAxisRange(-14.99, 14.99, "Y")
    chamber_dxdz_tracky.SetAxisRange(-7.5, 7.5, "Y")
    chamber_x_trackdxdz.SetAxisRange(-14.99, 14.99, "Y")
    chamber_dxdz_trackdxdz.SetAxisRange(-7.5, 7.5, "Y")
    chamber_x_trackdydz.SetAxisRange(-14.99, 14.99, "Y")
    chamber_dxdz_trackdydz.SetAxisRange(-7.5, 7.5, "Y")

    if chamber_y_trackx is not None:
        chamber_y_trackx.SetAxisRange(-24.99, 24.99, "Y")
        chamber_dydz_trackx.SetAxisRange(-24.99, 24.99, "Y")
        chamber_y_tracky.SetAxisRange(-24.99, 24.99, "Y")
        chamber_dydz_tracky.SetAxisRange(-24.99, 24.99, "Y")
        chamber_y_trackdxdz.SetAxisRange(-24.99, 24.99, "Y")
        chamber_dydz_trackdxdz.SetAxisRange(-24.99, 24.99, "Y")
        chamber_y_trackdydz.SetAxisRange(-24.99, 24.99, "Y")
        chamber_dydz_trackdydz.SetAxisRange(-24.99, 24.99, "Y")

    for h in chamber_x_trackx, chamber_y_trackx, chamber_dxdz_trackx, chamber_dydz_trackx, chamber_x_tracky, chamber_y_tracky, chamber_dxdz_tracky, chamber_dydz_tracky, chamber_x_trackdxdz, chamber_y_trackdxdz, chamber_dxdz_trackdxdz, chamber_dydz_trackdxdz, chamber_x_trackdydz, chamber_y_trackdydz, chamber_dxdz_trackdydz, chamber_dydz_trackdydz:
        if h is not None:
            h.SetMarkerStyle(20)
            h.SetMarkerSize(0.5)
            h.GetXaxis().SetLabelSize(0.13)
            h.GetYaxis().SetLabelSize(0.13)
            h.GetXaxis().SetNdivisions(505)
            h.GetYaxis().SetNdivisions(505)
            h.GetXaxis().SetLabelOffset(0.03)
            h.GetYaxis().SetLabelOffset(0.03)

    trackdxdz_minimum, trackdxdz_maximum = None, None
    for h in chamber_x_trackdxdz, chamber_y_trackdxdz, chamber_dxdz_trackdxdz, chamber_dydz_trackdxdz:
        if h is not None:
            for i in xrange(1, h.GetNbinsX()+1):
                if h.GetBinError(i) > 0.01 and h.GetBinContent(i) - h.GetBinError(i) < 10. and h.GetBinContent(i) + h.GetBinError(i) > -10.:
                    if trackdxdz_minimum is None or trackdxdz_minimum > h.GetBinCenter(i): trackdxdz_minimum = h.GetBinCenter(i)
                    if trackdxdz_maximum < h.GetBinCenter(i): trackdxdz_maximum = h.GetBinCenter(i)
    if trackdxdz_minimum is not None and trackdxdz_maximum is not None:
        for h in chamber_x_trackdxdz, chamber_y_trackdxdz, chamber_dxdz_trackdxdz, chamber_dydz_trackdxdz:
            if h is not None:
                h.SetAxisRange(trackdxdz_minimum, trackdxdz_maximum, "X")

    trackdydz_minimum, trackdydz_maximum = None, None
    for h in chamber_x_trackdydz, chamber_y_trackdydz, chamber_dxdz_trackdydz, chamber_dydz_trackdydz:
        if h is not None:
            for i in xrange(1, h.GetNbinsX()+1):
                if h.GetBinError(i) > 0.01 and h.GetBinContent(i) - h.GetBinError(i) < 10. and h.GetBinContent(i) + h.GetBinError(i) > -10.:
                    if trackdydz_minimum is None or trackdydz_minimum > h.GetBinCenter(i): trackdydz_minimum = h.GetBinCenter(i)
                    if trackdydz_maximum < h.GetBinCenter(i): trackdydz_maximum = h.GetBinCenter(i)
    if trackdydz_minimum is not None and trackdydz_maximum is not None:
        for h in chamber_x_trackdydz, chamber_y_trackdydz, chamber_dxdz_trackdydz, chamber_dydz_trackdydz:
            if h is not None:
                h.SetAxisRange(trackdydz_minimum, trackdydz_maximum, "X")

    for f in chamber_x_trackx_fit2, chamber_y_trackx_fit2, chamber_dxdz_trackx_fit2, chamber_dydz_trackx_fit2, chamber_x_tracky_fit2, chamber_y_tracky_fit2, chamber_dxdz_tracky_fit2, chamber_dydz_tracky_fit2, chamber_x_trackdxdz_fit2, chamber_y_trackdxdz_fit2, chamber_dxdz_trackdxdz_fit2, chamber_dydz_trackdxdz_fit2, chamber_x_trackdydz_fit2, chamber_y_trackdydz_fit2, chamber_dxdz_trackdydz_fit2, chamber_dydz_trackdydz_fit2:
        if f is not None:
            f.SetLineColor(4)

    if chamber_y_trackx is not None:
        c1.Clear()
        c1.Divide(5, 5, 1e-5, 1e-5)

        label1 = ROOT.TPaveLabel(0, 0, 1, 1, "x residuals (mm)")
        label2 = ROOT.TPaveLabel(0, 0, 1, 1, "y residuals (mm)")
        label3 = ROOT.TPaveLabel(0, 0, 1, 1, "dx/dz residuals (mrad)")
        label4 = ROOT.TPaveLabel(0, 0, 1, 1, "dy/dz residuals (mrad)")
        label5 = ROOT.TPaveLabel(0, 0.5, 1, 1, "x position (cm)")
        label6 = ROOT.TPaveLabel(0, 0.5, 1, 1, "y position (cm)")
        label7 = ROOT.TPaveLabel(0, 0.5, 1, 1, "dx/dz angle (rad)")
        label8 = ROOT.TPaveLabel(0, 0.5, 1, 1, "dy/dz angle (rad)")
        label9 = ROOT.TPaveLabel(0, 0, 1, 1, getname(r))

        for l in label1, label2, label3, label4, label5, label6, label7, label8, label9:
            l.SetBorderSize(0)
            l.SetFillColor(ROOT.kWhite)

        label9.SetTextAngle(30)

        c1.GetPad(1).cd(); label1.Draw()
        c1.GetPad(6).cd(); label2.Draw()
        c1.GetPad(11).cd(); label3.Draw()
        c1.GetPad(16).cd(); label4.Draw()
        c1.GetPad(22).cd(); label5.Draw()
        c1.GetPad(23).cd(); label6.Draw()
        c1.GetPad(24).cd(); label7.Draw()
        c1.GetPad(25).cd(); label8.Draw()
        c1.GetPad(21).cd(); label9.Draw()

        c1.GetPad(2).SetRightMargin(1e-5)
        c1.GetPad(2).SetBottomMargin(1e-5)
        c1.GetPad(3).SetLeftMargin(1e-5)
        c1.GetPad(3).SetRightMargin(1e-5)
        c1.GetPad(3).SetBottomMargin(1e-5)
        c1.GetPad(4).SetLeftMargin(1e-5)
        c1.GetPad(4).SetRightMargin(1e-5)
        c1.GetPad(4).SetBottomMargin(1e-5)
        c1.GetPad(5).SetLeftMargin(1e-5)
        c1.GetPad(5).SetBottomMargin(1e-5)

        c1.GetPad(7).SetRightMargin(1e-5)
        c1.GetPad(7).SetBottomMargin(1e-5)
        c1.GetPad(7).SetTopMargin(1e-5)
        c1.GetPad(8).SetLeftMargin(1e-5)
        c1.GetPad(8).SetRightMargin(1e-5)
        c1.GetPad(8).SetBottomMargin(1e-5)
        c1.GetPad(8).SetTopMargin(1e-5)
        c1.GetPad(9).SetLeftMargin(1e-5)
        c1.GetPad(9).SetRightMargin(1e-5)
        c1.GetPad(9).SetBottomMargin(1e-5)
        c1.GetPad(9).SetTopMargin(1e-5)
        c1.GetPad(10).SetLeftMargin(1e-5)
        c1.GetPad(10).SetBottomMargin(1e-5)
        c1.GetPad(10).SetTopMargin(1e-5)

        c1.GetPad(12).SetRightMargin(1e-5)
        c1.GetPad(12).SetBottomMargin(1e-5)
        c1.GetPad(12).SetTopMargin(1e-5)
        c1.GetPad(13).SetLeftMargin(1e-5)
        c1.GetPad(13).SetRightMargin(1e-5)
        c1.GetPad(13).SetBottomMargin(1e-5)
        c1.GetPad(13).SetTopMargin(1e-5)
        c1.GetPad(14).SetLeftMargin(1e-5)
        c1.GetPad(14).SetRightMargin(1e-5)
        c1.GetPad(14).SetBottomMargin(1e-5)
        c1.GetPad(14).SetTopMargin(1e-5)
        c1.GetPad(15).SetLeftMargin(1e-5)
        c1.GetPad(15).SetBottomMargin(1e-5)
        c1.GetPad(15).SetTopMargin(1e-5)

        c1.GetPad(17).SetRightMargin(1e-5)
        c1.GetPad(17).SetTopMargin(1e-5)
        c1.GetPad(18).SetLeftMargin(1e-5)
        c1.GetPad(18).SetRightMargin(1e-5)
        c1.GetPad(18).SetTopMargin(1e-5)
        c1.GetPad(19).SetLeftMargin(1e-5)
        c1.GetPad(19).SetRightMargin(1e-5)
        c1.GetPad(19).SetTopMargin(1e-5)
        c1.GetPad(20).SetLeftMargin(1e-5)
        c1.GetPad(20).SetTopMargin(1e-5)
        
        chamber_x_trackx.GetXaxis().SetLabelColor(ROOT.kWhite)
        chamber_x_tracky.GetXaxis().SetLabelColor(ROOT.kWhite); chamber_x_tracky.GetYaxis().SetLabelColor(ROOT.kWhite)
        chamber_x_trackdxdz.GetXaxis().SetLabelColor(ROOT.kWhite); chamber_x_trackdxdz.GetYaxis().SetLabelColor(ROOT.kWhite)
        chamber_x_trackdydz.GetXaxis().SetLabelColor(ROOT.kWhite); chamber_x_trackdydz.GetYaxis().SetLabelColor(ROOT.kWhite)
        chamber_y_trackx.GetXaxis().SetLabelColor(ROOT.kWhite)
        chamber_y_tracky.GetXaxis().SetLabelColor(ROOT.kWhite); chamber_y_tracky.GetYaxis().SetLabelColor(ROOT.kWhite)
        chamber_y_trackdxdz.GetXaxis().SetLabelColor(ROOT.kWhite); chamber_y_trackdxdz.GetYaxis().SetLabelColor(ROOT.kWhite)
        chamber_y_trackdydz.GetXaxis().SetLabelColor(ROOT.kWhite); chamber_y_trackdydz.GetYaxis().SetLabelColor(ROOT.kWhite)
        chamber_dxdz_trackx.GetXaxis().SetLabelColor(ROOT.kWhite)
        chamber_dxdz_tracky.GetXaxis().SetLabelColor(ROOT.kWhite); chamber_dxdz_tracky.GetYaxis().SetLabelColor(ROOT.kWhite)
        chamber_dxdz_trackdxdz.GetXaxis().SetLabelColor(ROOT.kWhite); chamber_dxdz_trackdxdz.GetYaxis().SetLabelColor(ROOT.kWhite)
        chamber_dxdz_trackdydz.GetXaxis().SetLabelColor(ROOT.kWhite); chamber_dxdz_trackdydz.GetYaxis().SetLabelColor(ROOT.kWhite)
        # chamber_dydz_trackx
        chamber_dydz_tracky.GetYaxis().SetLabelColor(ROOT.kWhite)
        chamber_dydz_trackdxdz.GetYaxis().SetLabelColor(ROOT.kWhite)
        chamber_dydz_trackdydz.GetYaxis().SetLabelColor(ROOT.kWhite)

        c1.GetPad(2).cd()
        chamber_x_trackx.Draw("e1")
        if not suppressblue: chamber_x_trackx_fit2.Draw("samel")
        chamber_x_trackx_fit.Draw("samel")
        
        c1.GetPad(3).cd()
        chamber_x_tracky.Draw("e1")
        if not suppressblue: chamber_x_tracky_fit2.Draw("samel")
        chamber_x_tracky_fit.Draw("samel")
        
        c1.GetPad(4).cd()
        chamber_x_trackdxdz.Draw("e1")
        if not suppressblue: chamber_x_trackdxdz_fit2.Draw("samel")
        chamber_x_trackdxdz_fit.Draw("samel")
        
        c1.GetPad(5).cd()
        chamber_x_trackdydz.Draw("e1")
        if not suppressblue: chamber_x_trackdydz_fit2.Draw("samel")
        chamber_x_trackdydz_fit.Draw("samel")
        
        c1.GetPad(7).cd()
        chamber_y_trackx.Draw("e1")
        if not suppressblue: chamber_y_trackx_fit2.Draw("samel")
        chamber_y_trackx_fit.Draw("samel")
        
        c1.GetPad(8).cd()
        chamber_y_tracky.Draw("e1")
        if not suppressblue: chamber_y_tracky_fit2.Draw("samel")
        chamber_y_tracky_fit.Draw("samel")
        
        c1.GetPad(9).cd()
        chamber_y_trackdxdz.Draw("e1")
        if not suppressblue: chamber_y_trackdxdz_fit2.Draw("samel")
        chamber_y_trackdxdz_fit.Draw("samel")
        
        c1.GetPad(10).cd()
        chamber_y_trackdydz.Draw("e1")
        if not suppressblue: chamber_y_trackdydz_fit2.Draw("samel")
        chamber_y_trackdydz_fit.Draw("samel")
        
        c1.GetPad(12).cd()
        chamber_dxdz_trackx.Draw("e1")
        if not suppressblue: chamber_dxdz_trackx_fit2.Draw("samel")
        chamber_dxdz_trackx_fit.Draw("samel")
        
        c1.GetPad(13).cd()
        chamber_dxdz_tracky.Draw("e1")
        if not suppressblue: chamber_dxdz_tracky_fit2.Draw("samel")
        chamber_dxdz_tracky_fit.Draw("samel")
        
        c1.GetPad(14).cd()
        chamber_dxdz_trackdxdz.Draw("e1")
        if not suppressblue: chamber_dxdz_trackdxdz_fit2.Draw("samel")
        chamber_dxdz_trackdxdz_fit.Draw("samel")
        
        c1.GetPad(15).cd()
        chamber_dxdz_trackdydz.Draw("e1")
        if not suppressblue: chamber_dxdz_trackdydz_fit2.Draw("samel")
        chamber_dxdz_trackdydz_fit.Draw("samel")
        
        c1.GetPad(17).cd()
        chamber_dydz_trackx.Draw("e1")
        if not suppressblue: chamber_dydz_trackx_fit2.Draw("samel")
        chamber_dydz_trackx_fit.Draw("samel")
        
        c1.GetPad(18).cd()
        chamber_dydz_tracky.Draw("e1")
        if not suppressblue: chamber_dydz_tracky_fit2.Draw("samel")
        chamber_dydz_tracky_fit.Draw("samel")
        
        c1.GetPad(19).cd()
        chamber_dydz_trackdxdz.Draw("e1")
        if not suppressblue: chamber_dydz_trackdxdz_fit2.Draw("samel")
        chamber_dydz_trackdxdz_fit.Draw("samel")
        
        c1.GetPad(20).cd()
        chamber_dydz_trackdydz.Draw("e1")
        if not suppressblue: chamber_dydz_trackdydz_fit2.Draw("samel")
        chamber_dydz_trackdydz_fit.Draw("samel")

    else:
        c1.Clear()
        c1.Divide(5, 3, 1e-5, 1e-5)

        label1 = ROOT.TPaveLabel(0, 0, 1, 1, "x residuals (mm)")
        label2 = ROOT.TPaveLabel(0, 0, 1, 1, "dx/dz residuals (mrad)")
        label3 = ROOT.TPaveLabel(0, 0.5, 1, 1, "x position (cm)")
        label4 = ROOT.TPaveLabel(0, 0.5, 1, 1, "y position (cm)")
        label5 = ROOT.TPaveLabel(0, 0.5, 1, 1, "dx/dz angle (rad)")
        label6 = ROOT.TPaveLabel(0, 0.5, 1, 1, "dy/dz angle (rad)")
        label9 = ROOT.TPaveLabel(0, 0.5, 1, 1, getname(r))

        if name[0:2] == "ME":
            label1 = ROOT.TPaveLabel(0, 0, 1, 1, "r#phi residuals (mm)")
            label2 = ROOT.TPaveLabel(0, 0, 1, 1, "d(r#phi)/dz residuals (mrad)")

        for l in label1, label2, label3, label4, label5, label6, label9:
            l.SetBorderSize(0)
            l.SetFillColor(ROOT.kWhite)

        label9.SetTextAngle(30)

        c1.GetPad(1).cd(); label1.Draw()
        c1.GetPad(6).cd(); label2.Draw()
        c1.GetPad(12).cd(); label3.Draw()
        c1.GetPad(13).cd(); label4.Draw()
        c1.GetPad(14).cd(); label5.Draw()
        c1.GetPad(15).cd(); label6.Draw()
        c1.GetPad(11).cd(); label9.Draw()

        c1.GetPad(2).SetRightMargin(1e-5)
        c1.GetPad(2).SetBottomMargin(1e-5)
        c1.GetPad(3).SetLeftMargin(1e-5)
        c1.GetPad(3).SetRightMargin(1e-5)
        c1.GetPad(3).SetBottomMargin(1e-5)
        c1.GetPad(4).SetLeftMargin(1e-5)
        c1.GetPad(4).SetRightMargin(1e-5)
        c1.GetPad(4).SetBottomMargin(1e-5)
        c1.GetPad(5).SetLeftMargin(1e-5)
        c1.GetPad(5).SetBottomMargin(1e-5)

        c1.GetPad(7).SetRightMargin(1e-5)
        c1.GetPad(7).SetTopMargin(1e-5)
        c1.GetPad(8).SetLeftMargin(1e-5)
        c1.GetPad(8).SetRightMargin(1e-5)
        c1.GetPad(8).SetTopMargin(1e-5)
        c1.GetPad(9).SetLeftMargin(1e-5)
        c1.GetPad(9).SetRightMargin(1e-5)
        c1.GetPad(9).SetTopMargin(1e-5)
        c1.GetPad(10).SetLeftMargin(1e-5)
        c1.GetPad(10).SetTopMargin(1e-5)

        chamber_x_trackx.GetXaxis().SetLabelColor(ROOT.kWhite)
        chamber_x_tracky.GetXaxis().SetLabelColor(ROOT.kWhite); chamber_x_tracky.GetYaxis().SetLabelColor(ROOT.kWhite)
        chamber_x_trackdxdz.GetXaxis().SetLabelColor(ROOT.kWhite); chamber_x_trackdxdz.GetYaxis().SetLabelColor(ROOT.kWhite)
        chamber_x_trackdydz.GetXaxis().SetLabelColor(ROOT.kWhite); chamber_x_trackdydz.GetYaxis().SetLabelColor(ROOT.kWhite)
        # chamber_dxdz_trackx
        chamber_dxdz_tracky.GetYaxis().SetLabelColor(ROOT.kWhite)
        chamber_dxdz_trackdxdz.GetYaxis().SetLabelColor(ROOT.kWhite)
        chamber_dxdz_trackdydz.GetYaxis().SetLabelColor(ROOT.kWhite)

        c1.GetPad(2).cd()
        chamber_x_trackx.Draw("e1")
        if not suppressblue: chamber_x_trackx_fit2.Draw("samel")
        chamber_x_trackx_fit.Draw("samel")
        
        c1.GetPad(3).cd()
        chamber_x_tracky.Draw("e1")
        if not suppressblue: chamber_x_tracky_fit2.Draw("samel")
        chamber_x_tracky_fit.Draw("samel")
        
        c1.GetPad(4).cd()
        chamber_x_trackdxdz.Draw("e1")
        if not suppressblue: chamber_x_trackdxdz_fit2.Draw("samel")
        chamber_x_trackdxdz_fit.Draw("samel")
        
        c1.GetPad(5).cd()
        chamber_x_trackdydz.Draw("e1")
        if not suppressblue: chamber_x_trackdydz_fit2.Draw("samel")
        chamber_x_trackdydz_fit.Draw("samel")
        
        c1.GetPad(7).cd()
        chamber_dxdz_trackx.Draw("e1")
        if not suppressblue: chamber_dxdz_trackx_fit2.Draw("samel")
        chamber_dxdz_trackx_fit.Draw("samel")
        
        c1.GetPad(8).cd()
        chamber_dxdz_tracky.Draw("e1")
        if not suppressblue: chamber_dxdz_tracky_fit2.Draw("samel")
        chamber_dxdz_tracky_fit.Draw("samel")
        
        c1.GetPad(9).cd()
        chamber_dxdz_trackdxdz.Draw("e1")
        if not suppressblue: chamber_dxdz_trackdxdz_fit2.Draw("samel")
        chamber_dxdz_trackdxdz_fit.Draw("samel")
        
        c1.GetPad(10).cd()
        chamber_dxdz_trackdydz.Draw("e1")
        if not suppressblue: chamber_dxdz_trackdydz_fit2.Draw("samel")
        chamber_dxdz_trackdydz_fit.Draw("samel")

##################################################################################

def segdiff(tfiles, component, pair, **args):
    tdrStyle.SetOptFit(1)
    tdrStyle.SetOptTitle(1)
    tdrStyle.SetTitleBorderSize(1)
    tdrStyle.SetTitleFontSize(0.05)
    tdrStyle.SetStatW(0.2)
    tdrStyle.SetStatY(0.9)
    tdrStyle.SetStatFontSize(0.06)

    if component[0:2] == "dt":
        wheel = args["wheel"]
        if wheel == -2: wheelletter = "A"
        elif wheel == -1: wheelletter = "B"
        elif wheel ==  0: wheelletter = "C"
        elif wheel == +1: wheelletter = "D"
        elif wheel == +2: wheelletter = "E"
        else: raise Exception
        sector = args["sector"]
        profname = "%s_%s_%02d_%s" % (component, wheelletter, sector, str(pair))
        posname = "pos" + profname
        negname = "neg" + profname

        station1 = int(str(pair)[0])
        station2 = int(str(pair)[1])
        phi1 = signConventions["DT", wheel, station1, sector][4]
        phi2 = signConventions["DT", wheel, station2, sector][4]
        if abs(phi1 - phi2) > 1.:
            if phi1 > phi2: phi1 -= 2.*pi
            else: phi1 += 2.*pi
        phi = (phi1 + phi2) / 2.
        while (phi < -pi): phi += 2.*pi
        while (phi > pi): phi -= 2.*pi

    elif component[0:3] == "csc": raise Exception

    else: raise Exception

    if "window" in args: window = args["window"]
    else: window = 5.

    global tmpprof, tmppos, tmpneg
    tmpprof = tfiles[0].Get("AlignmentMonitorSegmentDifferences/iter1/%s" % profname).Clone()
    tmpprof.SetMarkerStyle(8)
    tmppos = tfiles[0].Get("AlignmentMonitorSegmentDifferences/iter1/%s" % posname).Clone()
    tmpneg = tfiles[0].Get("AlignmentMonitorSegmentDifferences/iter1/%s" % negname).Clone()
    for tfile in tfiles[1:]:
        tmpprof.Add(tfile.Get("AlignmentMonitorSegmentDifferences/iter1/%s" % profname))
        tmppos.Add(tfile.Get("AlignmentMonitorSegmentDifferences/iter1/%s" % posname))
        tmpneg.Add(tfile.Get("AlignmentMonitorSegmentDifferences/iter1/%s" % negname))

    for i in xrange(1, tmpprof.GetNbinsX()+1):
        if tmpprof.GetBinError(i) < 1e-5:
            tmpprof.SetBinError(i, 100.)
    tmpprof.SetAxisRange(-window, window, "Y")

    f = ROOT.TF1("p1", "[0] + [1]*x", tmpprof.GetBinLowEdge(1), -tmpprof.GetBinLowEdge(1))
    f.SetParameters((tmppos.GetMean() + tmpneg.GetMean())/2., 0.)

    tmpprof.SetXTitle("q/p_{T} (c/GeV)")
    if component == "dt13_resid":
        tmpprof.SetYTitle("#Deltax^{local} (mm)")
        tmppos.SetXTitle("#Deltax^{local} (mm)")
        tmpneg.SetXTitle("#Deltax^{local} (mm)")
        f.SetParNames("#Deltax^{local}_{0}", "Slope")
    if component == "dt13_slope":
        tmpprof.SetYTitle("#Deltadx/dz^{local} (mrad)")
        tmppos.SetXTitle("#Deltadx/dz^{local} (mrad)")
        tmpneg.SetXTitle("#Deltadx/dz^{local} (mrad)")
        f.SetParNames("#Deltadx/dz^{local}_{0}", "Slope")
    if component == "dt2_resid":
        tmpprof.SetYTitle("#Deltay^{local} (mm)")
        tmppos.SetXTitle("#Deltay^{local} (mm)")
        tmpneg.SetXTitle("#Deltay^{local} (mm)")
        f.SetParNames("#Deltay^{local}_{0}", "Slope")
    if component == "dt2_slope":
        tmpprof.SetYTitle("#Deltady/dz^{local} (mrad)")
        tmppos.SetXTitle("#Deltady/dz^{local} (mrad)")
        tmpneg.SetXTitle("#Deltady/dz^{local} (mrad)")
        f.SetParNames("#Deltady/dz^{local}_{0}", "Slope")
    tmpprof.GetXaxis().CenterTitle()
    tmpprof.GetYaxis().CenterTitle()
    tmppos.GetXaxis().CenterTitle()
    tmpneg.GetXaxis().CenterTitle()
    if component[0:2] == "dt":
        if int(pair) == 12: tmpprof.SetTitle("MB1 - MB2, wheel %d, sector %02d" % (int(wheel), int(sector)))
        if int(pair) == 23: tmpprof.SetTitle("MB2 - MB3, wheel %d, sector %02d" % (int(wheel), int(sector)))
        if int(pair) == 34: tmpprof.SetTitle("MB3 - MB4, wheel %d, sector %02d" % (int(wheel), int(sector)))

    elif component[0:3] == "csc": raise Exception

    else: raise Exception

    tmppos.SetTitle("Positive muons")
    tmpneg.SetTitle("Negative muons")

    c1.Clear()
    c1.Divide(2, 1)
    c1.GetPad(1).cd()
    fit1 = tmpprof.Fit("p1", "q")
    tmpprof.Draw("e1")
    c1.GetPad(2).cd()
    c1.GetPad(2).Divide(1, 2)
    c1.GetPad(2).GetPad(1).cd()
    f = ROOT.TF1("gausR", "[0]*exp(-(x - [1])**2 / 2. / [2]**2) / sqrt(2.*3.1415926) / [2]", tmppos.GetMean() - tmppos.GetRMS(), tmppos.GetMean() + tmppos.GetRMS())
    f.SetParameters(tmppos.GetEntries() * ((10. - -10.)/100.), tmppos.GetMean(), tmppos.GetRMS())
    f.SetParNames("Constant", "Mean", "Sigma")
    fit2 = tmppos.Fit("gausR", "qR")
    c1.GetPad(2).GetPad(2).cd()
    f = ROOT.TF1("gausR", "[0]*exp(-(x - [1])**2 / 2. / [2]**2) / sqrt(2.*3.1415926) / [2]", tmpneg.GetMean() - tmpneg.GetRMS(), tmpneg.GetMean() + tmpneg.GetRMS())
    f.SetParameters(tmpneg.GetEntries() * ((10. - -10.)/100.), tmpneg.GetMean(), tmpneg.GetRMS())
    f.SetParNames("Constant", "Mean", "Sigma")
    fit3 = tmpneg.Fit("gausR", "qR")

    return phi, tmpprof.GetFunction("p1").GetParameter(0), tmpprof.GetFunction("p1").GetParError(0), \
           (tmppos.GetFunction("gausR").GetParameter(1) + tmpneg.GetFunction("gausR").GetParameter(1)) / 2., \
           sqrt(tmppos.GetFunction("gausR").GetParError(1)**2 + tmpneg.GetFunction("gausR").GetParError(1)**2) / 2., \
           fit1, fit2, fit3

def segdiffvsphi(tfiles, reports, component, wheel, window=5., excludesectors=()):
    tdrStyle.SetOptTitle(1)
    tdrStyle.SetTitleBorderSize(1)
    tdrStyle.SetTitleFontSize(0.05)

    global htemp, gtemp_12, gtemp2_12, gtemp_23, gtemp2_23, gtemp_34, gtemp2_34, tlegend
    htemp = ROOT.TH1F("htemp", "", 1, -pi, pi)
    gtemp_12_phi, gtemp_12_val, gtemp_12_err, gtemp_12_val2, gtemp_12_err2 = [], [], [], [], []
    gtemp_23_phi, gtemp_23_val, gtemp_23_err, gtemp_23_val2, gtemp_23_err2 = [], [], [], [], []
    gtemp_34_phi, gtemp_34_val, gtemp_34_err, gtemp_34_val2, gtemp_34_err2 = [], [], [], [], []
    for sector in xrange(1, 12+1):
        r1_found, r2_found, r3_found, r4_found = False, False, False, False
        for r1 in reports:
            if r1.postal_address == ("DT", wheel, 1, sector):
                r1_found = True
                break
        for r2 in reports:
            if r2.postal_address == ("DT", wheel, 2, sector):
                r2_found = True
                break
        for r3 in reports:
            if r3.postal_address == ("DT", wheel, 3, sector):
                r3_found = True
                break
        for r4 in reports:
            if r4.postal_address == ("DT", wheel, 4, sector):
                r4_found = True
                break
        
        if sector not in excludesectors:
            if r1_found and r2_found and r1.status == "PASS" and r2.status == "PASS":
                phi, val, err, val2, err2, fit1, fit2, fit3 = segdiff(tfiles, component, 12, wheel=wheel, sector=sector)
                if fit1 == 0 and fit2 == 0 and fit3 == 0:
                    gtemp_12_phi.append(phi)
                    gtemp_12_val.append(val)
                    gtemp_12_err.append(err)
                    gtemp_12_val2.append(val2)
                    gtemp_12_err2.append(err2)
            if r2_found and r3_found and r2.status == "PASS" and r3.status == "PASS":
                phi, val, err, val2, err2, fit1, fit2, fit3 = segdiff(tfiles, component, 23, wheel=wheel, sector=sector)
                if fit1 == 0 and fit2 == 0 and fit3 == 0:
                    gtemp_23_phi.append(phi)
                    gtemp_23_val.append(val)
                    gtemp_23_err.append(err)
                    gtemp_23_val2.append(val2)
                    gtemp_23_err2.append(err2)
            if component[:4] == "dt13":
                if r3_found and r4_found and r3.status == "PASS" and r4.status == "PASS":
                    phi, val, err, val2, err2, fit1, fit2, fit3 = segdiff(tfiles, component, 34, wheel=wheel, sector=sector)
                    if fit1 == 0 and fit2 == 0 and fit3 == 0:
                        gtemp_34_phi.append(phi)
                        gtemp_34_val.append(val)
                        gtemp_34_err.append(err)
                        gtemp_34_val2.append(val2)
                        gtemp_34_err2.append(err2)

    if len(gtemp_12_phi) > 0:
        gtemp_12 = ROOT.TGraphErrors(len(gtemp_12_phi), array.array("d", gtemp_12_phi), array.array("d", gtemp_12_val), array.array("d", [0.] * len(gtemp_12_phi)), array.array("d", gtemp_12_err))
        gtemp2_12 = ROOT.TGraphErrors(len(gtemp_12_phi), array.array("d", gtemp_12_phi), array.array("d", gtemp_12_val2), array.array("d", [0.] * len(gtemp_12_phi)), array.array("d", gtemp_12_err2))
    if len(gtemp_23_phi) > 0:
        gtemp_23 = ROOT.TGraphErrors(len(gtemp_23_phi), array.array("d", gtemp_23_phi), array.array("d", gtemp_23_val), array.array("d", [0.] * len(gtemp_23_phi)), array.array("d", gtemp_23_err))
        gtemp2_23 = ROOT.TGraphErrors(len(gtemp_23_phi), array.array("d", gtemp_23_phi), array.array("d", gtemp_23_val2), array.array("d", [0.] * len(gtemp_23_phi)), array.array("d", gtemp_23_err2))
    if len(gtemp_34_phi) > 0:
        gtemp_34 = ROOT.TGraphErrors(len(gtemp_34_phi), array.array("d", gtemp_34_phi), array.array("d", gtemp_34_val), array.array("d", [0.] * len(gtemp_34_phi)), array.array("d", gtemp_34_err))
        gtemp2_34 = ROOT.TGraphErrors(len(gtemp_34_phi), array.array("d", gtemp_34_phi), array.array("d", gtemp_34_val2), array.array("d", [0.] * len(gtemp_34_phi)), array.array("d", gtemp_34_err2))

    gtemp_12.SetMarkerStyle(20);  gtemp_12.SetMarkerSize(1.);  gtemp_12.SetMarkerColor(ROOT.kBlue);  gtemp_12.SetLineColor(ROOT.kBlue)
    gtemp2_12.SetMarkerStyle(24); gtemp2_12.SetMarkerSize(1.); gtemp2_12.SetMarkerColor(ROOT.kBlue); gtemp2_12.SetLineColor(ROOT.kBlue)
    gtemp_23.SetMarkerStyle(21);  gtemp_23.SetMarkerSize(1.);  gtemp_23.SetMarkerColor(ROOT.kRed);   gtemp_23.SetLineColor(ROOT.kRed)
    gtemp2_23.SetMarkerStyle(25); gtemp2_23.SetMarkerSize(1.); gtemp2_23.SetMarkerColor(ROOT.kRed);  gtemp2_23.SetLineColor(ROOT.kRed)
    if component[:4] == "dt13":
        gtemp_34.SetMarkerStyle(22);  gtemp_34.SetMarkerSize(1.25);  gtemp_34.SetMarkerColor(ROOT.kGreen+2);  gtemp_34.SetLineColor(ROOT.kGreen+2)
        gtemp2_34.SetMarkerStyle(26); gtemp2_34.SetMarkerSize(1.25); gtemp2_34.SetMarkerColor(ROOT.kGreen+2); gtemp2_34.SetLineColor(ROOT.kGreen+2)

    if wheel == 0: htemp.SetTitle("Wheel %d" % wheel)
    else: htemp.SetTitle("Wheel %+d" % wheel)
    htemp.SetAxisRange(-window, window, "Y")
    htemp.SetXTitle("Average #phi of pair (rad)")
    if component == "dt13_resid": htemp.SetYTitle("#Deltax^{local} (mm)")
    if component == "dt13_slope": htemp.SetYTitle("#Deltadx/dz^{local} (mrad)")
    if component == "dt2_resid": htemp.SetYTitle("#Deltay^{local} (mm)")
    if component == "dt2_slope": htemp.SetYTitle("#Deltady/dz^{local} (mrad)")
    htemp.GetXaxis().CenterTitle()
    htemp.GetYaxis().CenterTitle()
    htemp.GetYaxis().SetTitleOffset(0.75)

    c1.Clear()
    htemp.Draw()
    if len(gtemp_12_phi) > 0:
        gtemp_12.Draw("p")
        gtemp2_12.Draw("p")
    if len(gtemp_23_phi) > 0:
        gtemp_23.Draw("p")
        gtemp2_23.Draw("p")
    if len(gtemp_34_phi) > 0:
        gtemp_34.Draw("p")
        gtemp2_34.Draw("p")

    tlegend = ROOT.TLegend(0.5, 0.72, 0.9, 0.92)
    tlegend.SetBorderSize(0)
    tlegend.SetFillColor(ROOT.kWhite)
    if len(gtemp_12_phi) > 0:
        tlegend.AddEntry(gtemp_12, "MB1 - MB2 (mean: %4.2f, RMS: %4.2f)" % (mean(gtemp_12_val), stdev(gtemp_12_val)), "pl")
    if len(gtemp_23_phi) > 0:
        tlegend.AddEntry(gtemp_23, "MB2 - MB3 (mean: %4.2f, RMS: %4.2f)" % (mean(gtemp_23_val), stdev(gtemp_23_val)), "pl")
    if len(gtemp_34_phi) > 0:
        tlegend.AddEntry(gtemp_34, "MB3 - MB4 (mean: %4.2f, RMS: %4.2f)" % (mean(gtemp_34_val), stdev(gtemp_34_val)), "pl")
    tlegend.AddEntry(gtemp_12, "total mean: %4.2f, total RMS: %4.2f" % (mean(gtemp_12_val + gtemp_23_val + gtemp_34_val), stdev(gtemp_12_val + gtemp_23_val + gtemp_34_val)), "")
    tlegend.Draw()

