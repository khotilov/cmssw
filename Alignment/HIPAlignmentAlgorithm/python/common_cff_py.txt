from CondCore.DBCommon.CondDBSetup_cfi import *

# loading magnetic field and geometry
# process.load("MagneticField.Engine.uniformMagneticField_cfi")
process.load("Geometry.CMSCommonData.cmsIdealGeometryXML_cfi")
process.load("Geometry.TrackerNumberingBuilder.trackerNumberingGeometry_cfi")

process.load("Configuration.StandardSequences.GeometryIdeal_cff")
# loading the alignment producer
process.load("Alignment.CommonAlignmentProducer.AlignmentProducer_cff")



# loading DB constants 
# *WARNING* - the standard file doesn't work (gives too many "SiStripPedestalsFakeSource" rcds) 
# comment out that line in standard file ... an example is given in release of HIPAlignmentAlgorithm ("FrontierConditions_GlobalTag_cff.py")


# setting global tag
process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
if 'MBVertex'=='<FLAG>':
   process.GlobalTag.globaltag='MC_31X_V6::All' 
elif 'MB'=='<FLAG>':
   process.GlobalTag.globaltag='MC_31X_V6::All' 
elif 'COSMICS'=='<FLAG>':
   process.GlobalTag.globaltag='STARTUP31X_V5::All' 
else :
   process.GlobalTag.globaltag='MC_31X_V6::All'
   
process.load("FWCore.MessageService.MessageLogger_cfi")
MessageLogger = cms.Service("MessageLogger",
							cout = cms.untracked.PSet(
													  threshold = cms.untracked.string('WARNING')
													  ),
							destinations = cms.untracked.vstring('cout')
)
process.MessageLogger.cerr.FwkReport.reportEvery = 1000

# configure magnetic field
process.load("Configuration.StandardSequences.MagneticField_38T_cff")





# configure the database file - use survey one for default
from CondCore.DBCommon.CondDBSetup_cfi import *


## geometry loaded from a sqlite
## process.trackerAlignment = cms.ESSource("PoolDBESSource",
## 					 CondDBSetup,
## 					 timetype = cms.string('runnumber'),
## 					 toGet = cms.VPSet(cms.PSet(
##                                                  record = cms.string('TrackerAlignmentRcd'),
##                                                  tag = cms.string('Alignments')
##                                                  )),
##                                         connect = cms.string('sqlite_file:/afs/cern.ch/cms/CAF/CMSALCA/ALCA_TRACKERALIGN/HIP/alignments.db')
##  )


## ideal geometry
#process.trackerAlignment = cms.ESSource("PoolDBESSource",CondDBSetup,
#                                               connect = cms.string('frontier://FrontierProd/CMS_COND_31X_FROM21X'),
#                                              timetype = cms.string("runnumber"),
#                                             toGet = cms.VPSet(cms.PSet(record = cms.string('TrackerAlignmentRcd'),
#                                                                           tag = cms.string('TrackerIdealGeometry210_mc')
#                                                                              )))
#

#### for best CRAFT08 geometry (SuperHIPMPmerged)
# process.trackerAlignment = cms.ESSource("PoolDBESSource",
#                                         CondDBSetup,
#                                         timetype = cms.string('runnumber'),
#                                         toGet = cms.VPSet(cms.PSet(
#                                                 record = cms.string('TrackerAlignmentRcd'),
#                                                 tag = cms.string('TrackerGeometry_v5_offline')
#                                                 )),
#                                         connect = cms.string('frontier://FrontierProd/CMS_COND_31X_FROM21X')
#                                         )

#### for the CRAFT08Realistic_mc MC misalignment scenario
process.trackerAlignment = cms.ESSource("PoolDBESSource",
                                        CondDBSetup,
                                        timetype = cms.string('runnumber'),
                                        toGet = cms.VPSet(cms.PSet(
                                                record = cms.string('TrackerAlignmentRcd'),
                                                tag = cms.string('TrackerAlignment_CRAFT08Realistic_mc')
                                                )),
                                        connect = cms.string('frontier://FrontierProd/CMS_COND_31X_FROM21X')
                                        )
process.es_prefer_trackerAlignment = cms.ESPrefer("PoolDBESSource", "trackerAlignment")

#load separately the APEs
process.trackerAPE = cms.ESSource("PoolDBESSource",CondDBSetup,
                                  connect = cms.string('frontier://FrontierProd/CMS_COND_31X_FROM21X'),
                                  timetype = cms.string("runnumber"),
                                  toGet = cms.VPSet(
                                        cms.PSet(record = cms.string('TrackerAlignmentErrorRcd'),
                                                 tag = cms.string('Tracker_GeometryErr_v5_offline')
                                                ))
                                        )
process.es_prefer_TrackerAPE = cms.ESPrefer("PoolDBESSource", "trackerAPE")

process.AlignmentProducer.applyDbAlignment = True


### Set parameters to align
### pixels

#process.AlignmentProducer.ParameterBuilder.Selector.alignParams = ['PixelHalfBarrels,111001','TIBHalfBarrels,111001','TOBHalfBarrels,111001','PXEndCaps,101001','TIDs,101001','TECs,101001']

#process.AlignmentProducer.ParameterBuilder.Selector.alignParams = ['PixelHalfBarrelDets,111111','TIBDets,111111','TOBDets,111111','TIDDets,111111','TECDets,111111']
#process.AlignmentProducer.ParameterBuilder.Selector.alignParams = ['AllDets,000000']
process.AlignmentProducer.ParameterBuilder.Selector.alignParams = ['AllDets,111111']
