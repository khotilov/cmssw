from CondCore.DBCommon.CondDBSetup_cfi import *

# loading magnetic field and geometry
process.load("MagneticField.Engine.uniformMagneticField_cfi")
process.load("Geometry.CMSCommonData.cmsIdealGeometryXML_cfi")
process.load("Geometry.TrackerNumberingBuilder.trackerNumberingGeometry_cfi")

# loading the alignment producer
process.load("Alignment.CommonAlignmentProducer.AlignmentProducer_cff")

# loading DB constants 
# *WARNING* - the standard file doesn't work (gives too many "SiStripPedestalsFakeSource" rcds) 
# comment out that line in standard file ... an example is given in release of HIPAlignmentAlgorithm ("FrontierConditions_GlobalTag_cff.py")
#process.load("Configuration.StandardSequences.FrontierConditions_GlobalTag_cff")
process.load("Alignment.HIPAlignmentAlgorithm.FrontierConditions_GlobalTag_cff")
# setting global tag
process.GlobalTag.connect = "frontier://FrontierProd/CMS_COND_21X_GLOBALTAG"
process.GlobalTag.globaltag = "CRUZET4_V6H::All"

process.load("FWCore.MessageService.MessageLogger_cfi")
MessageLogger = cms.Service("MessageLogger",
							cout = cms.untracked.PSet(
													  threshold = cms.untracked.string('WARNING')
													  ),
							destinations = cms.untracked.vstring('cout')
)
process.MessageLogger.cerr.FwkReport.reportEvery = 1000

# configure magnetic field
#from MagnecticField.Engine.uniformMagneticField_cfg import *
process.UniformMagneticFieldESProducer.ZFieldInTesla = 0.0
es_prefer_UniformMagneticFieldESProducer = cms.ESPrefer("UniformMagneticFieldESProducer")


# configure the database file - use survey one for default
from CondCore.DBCommon.CondDBSetup_cfi import *
#from CondCore.DBCommon.CondDBCommon_cfi import *
#process.load("Alignment.CommonAlignmentProducer.GlobalPosition_Frontier_cff")
process.trackerAlignment = cms.ESSource("PoolDBESSource",
					 CondDBSetup,
					 timetype = cms.string('runnumber'),
					 toGet = cms.VPSet(cms.PSet(
												record = cms.string('TrackerAlignmentRcd'),
												tag = cms.string('Alignments')
												), 
									   cms.PSet(
												record = cms.string('TrackerAlignmentErrorRcd'),
												tag = cms.string('AlignmentErrors')
												)),
#					 connect = cms.string('sqlite_file:/afs/cern.ch/cms/CAF/CMSALCA/ALCA_TRACKERALIGN/HIP/alignmentRcds/AllSurveyButTIBTIDGlobal_FPixBPix_wErrs.db')
					 connect = cms.string('sqlite_file:/afs/cern.ch/cms/CAF/CMSALCA/ALCA_TRACKERALIGN/HIP/CRUZET4_DBobjects/alignments_C4fixPXESurveyV3.db')
)

process.es_prefer_trackerAlignment = cms.ESPrefer("PoolDBESSource","trackerAlignment")


process.AlignmentProducer.applyDbAlignment = True
# Set parameters to align
#process.AlignmentProducer.ParameterBuilder.Selector.alignParams = ['TIBSSDets,100001','TIBDSDets,110001','TOBSSDets,100001','TOBDSDets,110001']
process.AlignmentProducer.ParameterBuilder.Selector.alignParams = ['TIBDets,111111','TOBDets,111111','TIDDets,111111','TECDets,111111']
"""
process.AlignmentProducer.ParameterBuilder.Selector = cms.PSet(
                                                    alignParams = cms.vstring('PXECDets,110001',
                                                                 'TIBSSDets,100001',
																 'TIBDSDets,110001',
                                                                 'TOBSSDets,100001',
                                                                 'TOBDSDets,110001',
                                                                 'TECDets,100001,endCapSS',
                                                                 'TECDets,110001,endCapDS',
                                                                 'TIDDets,100001,endCapSS',
                                                                 'TIDDets,110001,endCapDS'
                                                                 ),
                                                    endCapSS= cms.PSet( # valid for TID and TEC
                                                                       etaRanges=cms.vdouble(),
                                                                       phiRanges=cms.vdouble(),
                                                                       zRanges =cms.vdouble(),
                                                                       rRanges =cms.vdouble(40., 60., 75., 999.),
                                                                       xRanges=cms.vdouble(),
                                                                       yRanges=cms.vdouble()
                                                                      ),
                                                    endCapDS= cms.PSet( # valid for TID and TEC
                                                                       	etaRanges=cms.vdouble(),
                                                                       phiRanges=cms.vdouble(),
                                                                       zRanges =cms.vdouble(),
                                                                       rRanges =cms.vdouble(0., 40., 60., 75.),
                                                                       xRanges=cms.vdouble(),
                                                                       yRanges=cms.vdouble()
                                                                       )
						     )
"""

