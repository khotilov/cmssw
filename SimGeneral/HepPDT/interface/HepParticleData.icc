// -----------------------------------------------------------------------------
//  24.02.99 taken from http://www.thep.lu.se/~leif/CLHEP-PDT/
// -----------------------------------------------------------------------------
//  $Date: 2002/02/22 13:22:00 $
//  $Revision: 1.2 $
// -----------------------------------------------------------------------------
// These are the implementations of the inlined memberfunctions of
// class HepParticleData.

#ifdef HEP_DEBUG_INLINE
#define inline
#endif
#include <cfloat>

inline HepParticleData::HepParticleData(HepLong id, const HepString & name)
  : stdhepId(id), stdhepName(name), isStable(true), decayModes(),
    m(-1.0), dmp(0.0), dmn(0.0),
    w(-1.0), dwp(0.0), dwn(0.0),
    t(-1.0), dtp(0.0), dtn(0.0),
    c(HepPDT::Cundefined), s(HepPDT::Sundefined), col(HepPDT::colundefined),
    antiPartner(0), defprod(HepPkgDefault)
{}

inline HepParticleData::~HepParticleData() {}

inline HepLong HepParticleData::id() const {
  return stdhepId;
}

inline const HepString & HepParticleData::name() const {
  return stdhepName;
}

inline const HepDecayTable & HepParticleData::decayTable() const {
  return decayModes;
}

inline const HepDecayMode * HepParticleData::
selectMode(HepDouble r, HepPkg p) const {
  if ( p == HepPkgDefault ) p = defprod;
  return decayTable().selectMode(r, p);
}

inline HepDouble HepParticleData::
mass(HepDouble mi, HepDouble dmpi, HepDouble dmni) {
  m = mi;
  dmp = dmpi;
  dmn = dmni >= 0.0? dmni: dmpi;
  return m;
}

inline HepDouble HepParticleData::mass() const {
  return m;
}

inline HepDouble HepParticleData::massErrPos() const {
  return dmp;
}

inline HepDouble HepParticleData::massErrNeg() const {
  return dmn;
}

inline HepDouble HepParticleData::
width(HepDouble wi, HepDouble dwpi, HepDouble dwni) {
  w = wi;
  dwp = dwpi;
  dwn = dwni >= 0? dwni: dwpi;
  return w;
}

inline HepDouble HepParticleData::width() const {
  return w >= 0.0? w: ( t > 0.0? hbarc/t: ( t == 0.0? FLT_MAX: 0.0 ) );
}

inline HepDouble HepParticleData::widthErrPos() const {
  return w >= 0.0? dwp: ( t > 0.0? hbarc*dtn/(t*t): 0.0 );
}

inline HepDouble HepParticleData::widthErrNeg() const {
  return w >= 0.0? dwn: ( t > 0.0? hbarc*dtp/(t*t): 0.0 );
}

inline HepDouble HepParticleData::
cTau(HepDouble ti, HepDouble dtpi, HepDouble dtni) {
  t = ti;
  dtp = dtpi;
  dtn = dtni >= 0? dtni: dtpi;
  return t;
}

inline HepDouble HepParticleData::cTau() const {
  return t >= 0.0? t: ( w > 0.0? hbarc/w: ( w == 0.0? FLT_MAX: 0.0 ) );
}

inline HepDouble HepParticleData::cTauErrPos() const {
  return t >= 0.0? dtp: ( w > 0.0? hbarc*dwn/(w*w): 0.0 );
}

inline HepDouble HepParticleData::cTauErrNeg() const {
  return t >= 0.0? dtn: ( w > 0.0? hbarc*dwp/(w*w): 0.0 );
}

inline HepPDT::HepCharge HepParticleData::iCharge(HepPDT::HepCharge ci) {
  c = ci;
  return c;
}

inline HepDouble HepParticleData::charge() const {
  return eplus*HepDouble(c)/3.0;
}

inline HepPDT::HepCharge HepParticleData::iCharge() const {
  return c;
}

inline HepBoolean HepParticleData::charged() const {
  return HepPDT::charged(c);
}

inline HepBoolean HepParticleData::positive() const {
  return HepPDT::positive(c);
}

inline HepBoolean HepParticleData::negative() const {
  return HepPDT::negative(c);
}

inline HepPDT::HepSpin HepParticleData::iSpin(HepPDT::HepSpin si) {
  s = si;
  return si;
}

inline HepDouble HepParticleData::spin() const {
  return hbar_Planck*HepDouble(s-1)*0.5;
}

inline HepPDT::HepSpin HepParticleData::iSpin() const {
  return s;
}

inline HepPDT::HepColor HepParticleData::iColor(HepPDT::HepColor ci) {
  col = ci;
  return col;
}

inline HepPDT::HepColor HepParticleData::iColor() const {
  return col;
}

inline HepBoolean HepParticleData::colored() const {
  return HepPDT::colored(col);
}

inline HepBoolean HepParticleData::CC(const HepParticleData & cc) {
  if ( -cc.id() == id() ) antiPartner = &cc;
  return ( -cc.id() == id() );
}

inline const HepParticleData * HepParticleData::CC() const {
  return antiPartner;
}

inline void HepParticleData::stable(HepBoolean _s) {
  isStable = _s;
}

inline HepBoolean HepParticleData::stable() const {
  return isStable || decayModes.empty();
}

inline void HepParticleData::
addProducer(HepPkg package, HepParticleProducer & p) {
  producers[package] = &p;
}

inline HepParticleProducer * HepParticleData::
producer(HepPkg package) const {
  if ( package == HepPkgDefault ) package = defprod;
  ProducerMap::const_iterator prod = producers.find(package);
  return ( prod == producers.end() )? 0: (*prod).second;
}

inline void HepParticleData::setDefaultProducer(HepPkg dp) {
  defprod = dp;
}

inline HepPkg HepParticleData::defaultProducer() const {
  return defprod;
}

#ifdef HEP_DEBUG_INLINE
#undef inline
#endif
