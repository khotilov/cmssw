// -----------------------------------------------------------------------------
//  24.02.99 taken from http://www.thep.lu.se/~leif/CLHEP-PDT/
// -----------------------------------------------------------------------------
//  $Date: 2002/08/27 16:46:56 $
//  $Revision: 1.2 $
// -----------------------------------------------------------------------------
// These are the implementations of the inlined memberfunctions of
// class HepPDTable.

#ifdef HEP_DEBUG_INLINE
#define inline
#endif

inline const HepParticleData * HepPDTable::getParticleData(HepLong id) const {
  ParticleMap::const_iterator it = allParticles.find(id);
  return it == allParticles.end()? 0: (*it).second;
}

inline const HepParticleData * HepPDTable::
getParticleData(const HepString & name) const {
  const HepParticleData * pd = getParticleData(atol(name.c_str()));
  if ( pd ) return pd;
  NameMap::const_iterator nit = mapName2Stdhep.find(name);
  if ( nit != mapName2Stdhep.end() ) return getParticleData((*nit).second);
  return 0;
}

inline HepParticleData * HepPDTable::getParticleData(HepLong id) {
  ParticleMap::iterator it = allParticles.find(id);
  return it == allParticles.end()? 0: (*it).second;
}

inline HepParticleData * HepPDTable::
getParticleData(const HepString & name) {
  HepParticleData * pd = getParticleData(atol(name.c_str()));
  if ( pd ) return pd;
  NameMap::iterator nit = mapName2Stdhep.find(name);
  if ( nit != mapName2Stdhep.end() ) return getParticleData((*nit).second);
  return 0;
}

inline const HepParticleMatcher * HepPDTable::
getParticleMatcher(const HepString & id) const {
  MatcherMap::const_iterator it = allMatchers.find(id);
  return it == allMatchers.end()? 0: (*it).second;
}

inline HepParticleMatcher * HepPDTable::
getParticleMatcher(const HepString & id) {
  MatcherMap::iterator it = allMatchers.find(id);
  return it == allMatchers.end()? 0: (*it).second;
}

inline const HepDecayMode * HepPDTable::
getDecayMode(const HepString & tag) const {
  ModeMap::const_iterator mit = allModes.find(tag);
  return  mit == allModes.end()? 0: (*mit).second;
}

inline HepDecayMode * HepPDTable::getDecayMode(const HepString & intag) {
  HepString tag = intag;
  return constructDecayMode(tag);
}

inline const HepParticleData * HepPDTable::
getParticleData(HepLong id, HepPkg scheme) const {
  TranslationMap::const_iterator sit = map2stdhep.find(scheme);
  if ( sit == map2stdhep.end() ) return 0;
  LongLongMap::const_iterator it = (*sit).second.find(id);
  if ( it == (*sit).second.end() ) return 0;
  return getParticleData((*it).second);
}

inline const HepParticleProducer * HepPDTable::
getParticleProducer(HepPkg pnr, HepLong id) const {
  const HepParticleData * pd = getParticleData(id, pnr);
  if ( !pd ) pd = getParticleData(id);
  return pd? pd->producer(): 0;
}  

inline const HepParticleProducer * HepPDTable::
getParticleProducer(const HepString & name) const {
  const HepParticleData * pd = getParticleData(name);
  return pd? pd->producer(): 0;
}  

inline const HepPDTable::ParticleMap & HepPDTable::particles() const {
  return allParticles;
}

inline const HepPDTable::MatcherMap & HepPDTable::matchers() const {
  return allMatchers;
}

inline const HepPDTable::PackageMap & HepPDTable::packages() const {
  return allPackages;
}

inline const HepPDTable::ModeMap & HepPDTable::modes() const {
  return allModes;
}

inline HepPkg HepPDTable::packageNumber(const HepString & name) const {
  PackageNameMap::const_iterator i = packageNumbers.find(name);
  return  i == packageNumbers.end()? -1: (*i).second;
}
  
inline HepPackageHandler *
HepPDTable::packageHandler(const HepString & pkg) const {
  return packageHandler(packageNumber(pkg));
}

inline HepPackageHandler * HepPDTable::packageHandler(HepPkg pkg) const {
  PackageMap::const_iterator pit = allPackages.find(pkg);
  return ( pit == allPackages.end() )? 0: (*pit).second;
}

inline HepDouble HepPDTable::
globalParameter(HepPkg package, const HepString & name) const {
  PackageParameterMap::const_iterator pit = globalParameters.find(package);
  if ( pit == globalParameters.end() ) return 0.0;
  ParameterMap::const_iterator nit = (*pit).second.find(name);
  return ( nit == (*pit).second.end() )? 0.0: (*nit).second;
}

inline void HepPDTable::
globalParameter(HepPkg pkg, const HepString & name , HepDouble x) {
  globalParameters[pkg][name] = x;
}

#ifdef HEP_DEBUG_INLINE
#undef inline
#endif
