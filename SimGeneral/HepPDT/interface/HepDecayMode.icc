// -----------------------------------------------------------------------------
//  24.02.99 taken from http://www.thep.lu.se/~leif/CLHEP-PDT/
// -----------------------------------------------------------------------------
//  $Date: 2001/04/11 08:30:48 $
//  $Revision: 1.1 $
// -----------------------------------------------------------------------------
// These are the implementations of the inlined memberfunctions of
// class HepDecayMode.

#ifdef HEP_DEBUG_INLINE
#define inline
#endif

inline HepDecayMode::HepDecayMode()
  : brat(0.0), dbratp(0.0), dbratn(0.0),
    wildDecayProductMatch(0), defmod(HepPkgDefault) {}

inline HepDecayMode::~HepDecayMode() {}

inline const HepString & HepDecayMode::tag() const {
  return nameTag;
}

inline const HepString & HepDecayMode::tag(const HepString & intag) {
  return (nameTag = intag);
}

inline HepDouble HepDecayMode::
bRatio(HepDouble inc, HepDouble dincp, HepDouble dincn) {
  brat = inc;
  dbratp = dincp;
  dbratn = dincn >= 0.0? dincn: dincp;
  return brat;
}

inline HepDouble HepDecayMode::bRatio() const {
  return brat;
}

inline HepDouble HepDecayMode::bRatioErrPos() const {
  return dbratp;
}

inline HepDouble HepDecayMode::bRatioErrNeg() const {
  return dbratn;
}

inline HepDouble HepDecayMode::bRatio(HepPkg package, HepDouble exc) {
  ModelMap::iterator it = models.find(package);
  if ( it == models.end() ) return 0.0;
  (*it).second.second = exc;
  return max(exc, 0.0);
}

inline HepDouble HepDecayMode::bRatio(HepPkg package) const {
  if ( package == HepPkgDefault ) package = defmod;
  ModelMap::const_iterator it = models.find(package);
  return ( it == models.end() )? 0.0: max((*it).second.second, 0.0);
}

inline void HepDecayMode::switchOn(HepPkg package) {
  if ( package == HepPkgDefault ) package = defmod;
  ModelMap::iterator it = models.find(package);
  if ( it != models.end() ) (*it).second.second = fabs((*it).second.second);
}

inline void HepDecayMode::switchOff(HepPkg package) {
  if ( package == HepPkgDefault ) package = defmod;
  ModelMap::iterator it = models.find(package);
  if ( it != models.end() ) (*it).second.second = -fabs((*it).second.second);
}

inline void HepDecayMode::parent(const HepParticleData & pd) {
  decayingParticle = &pd;
}

inline const HepParticleData * HepDecayMode::parent() const {
  return decayingParticle;
}

inline HepDecayModel * HepDecayMode::model(HepPkg package) const {
  if ( package == HepPkgDefault ) package = defmod;
  ModelMap::const_iterator mod = models.find(package);
  return ( mod == models.end() )? 0: (*mod).second.first;
}

inline void HepDecayMode::
addModel(HepPkg package, HepDecayModel & dm, HepDouble exc) {
  ModelMap::iterator mod = models.find(package);
  if ( mod == models.end() )
    models[package] = std::pair<HepDecayModel *, HepDouble>(&dm, max(exc,0.0));
  else {
    (*mod).second.first = &dm;
    if ( exc >= 0.0 ) (*mod).second.second = exc;
  }
}

inline void HepDecayMode::addProduct(const HepParticleData & pd) {
  decayProducts.insert(&pd);
}

inline void HepDecayMode::addCascadeProduct(const HepDecayMode & dm) {
  cascadeDecayProducts.insert(&dm);
}

inline void HepDecayMode::addProductMatcher(const HepParticleMatcher & pm) {
  decayProductMatchers.insert(&pm);
}

inline void HepDecayMode::setWildMatcher(const HepParticleMatcher & pm) {
  wildDecayProductMatch = &pm;
}

inline void HepDecayMode::addExcluded(const HepParticleData & pd) {
  excludedIntermediateProducts.insert(&pd);
}

inline const HepDecayMode::ParticleSet & HepDecayMode::products() const {
  return decayProducts;
}

inline const HepDecayMode::ModeSet & HepDecayMode::cascadeProducts() const {
  return cascadeDecayProducts;
}

inline const HepDecayMode::MatcherSet & HepDecayMode::productMatchers() const {
  return decayProductMatchers;
}

inline const HepParticleMatcher * HepDecayMode::wildProductMatcher() const {
  return wildDecayProductMatch;
}

inline const HepDecayMode::ParticleSet & HepDecayMode::excluded() const {
  return excludedIntermediateProducts;
}

inline const std::vector<const HepDecayMode *> & HepDecayMode::overlap() const {
  return overlappingModes;
}

inline HepBoolean HepDecayMode::operator == (const HepDecayMode & d) const {
  return HepBoolean( tag() == d.tag() );
}

inline void HepDecayMode::resetOverlap() {
  overlappingModes = std::vector<const HepDecayMode *>();
}

inline void HepDecayMode::setDefaultModel(HepPkg dm) {
  defmod = dm;
}

inline HepPkg HepDecayMode::defaultModel() const {
  return defmod;
}

inline HepBoolean less<const HepDecayMode *>::
operator () (const HepDecayMode * dm1, const HepDecayMode * dm2) const {
  return dm1->tag() < dm2->tag();
}

#ifdef HEP_DEBUG_INLINE
#undef inline
#endif
