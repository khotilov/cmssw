Glossary: FK=Foreign Key, PK=Primary Key
          lumiversion represents each lumi (re)processing

========
table 1:  RUNSUMMARY (insert one row per run/ populated from LUMI_RAW file)
columns:  runnum(uint32,PK),
          fillnum(uint32),
          totalcmsls(uint32),
          totallumils(uint32),
          sequence(string),
          hltconfigid(uint32),
          startorbit(uint64),
          endorbit(uint64)
 
=======
table 2:  LUMISUMMARY (insert one row per run+lumiLS+lumiversion from LUMI_RAW file)
columns:  
	  lumisummary_id(uint64, PK)
          runnum(uint32),
          cmslsnum(uint32),	
          lumilsnum(uint32),
          lumiversion(string),
          dtnorm(float),
          luminorm(float),
          instlumi(float),
          instlumierror(float),
          instlumiquality(short),
          cmsalive(bool),          
          lumisectionquality(short) // use max 3 bits [HLX,HF,BRAN]
	  
======
table 3:  LUMIDETAIL (insert 3*3564 rows per run+lumiLS+lumiversion+algorithm from LUMI_RAW file)
columns: 
          lumidetail_id(uint64, PK)
          lumisummary_id(FK refers to LUMISUMMARY.lumisummary_id),
	  bxinfo(blob),
          algoname(string), //occ1,occ2,etsum,bran
          
======
table 4:  TRG (insert 192 rows per run+cmsls/populate from GT-DB)
columns:  
          trg_id(uint64, PK),
          runnum(uint32),
          cmsluminum(uint32), //lumi section id taken by cmsdaq
          bitnum(uint32), //range : 0-127 algo;128-192 tech
          bitname(string),
          count(uint64),
          deadtime(uint64),
          prescale(uint32),
          hltpath(string) //to be populated in 2nd phase

======
table 5: HLT (insert n-hltpath rows per run+cmsls/populate from RunInfo-HLT)
         hlt_id(uint64, PK),
	 runnum(uint32),
         cmsluminum(uint32),
         pathname(string),
         inputcount(uint64),
         acceptcount(uint64),
         prescale(uint32)
	  
======
table 6: TRGHLTMAP (intert 1 row per hltpath-l1bit / populated from ConfDB+L1Seed expression parser)
         hltconfid(uint32),
         hltpathname(string),
         l1seed(string)
	 

 ====== result tables======
table 7: INTLUMI (insert 1 row per combinatorial of run+lumiversion)
columns:  
         runnum(uint32),
         lumiversion(string),
         deliveredlumi( float ), 
         recordedlumi( float ) //total recordedlumi deadtimecorrected

table 8: INTLUMIHLT (insert 1 row per combinatorial of run+lumiversion+hltpath)
         runnum(uint32),
         lumiversion(string),
	 hltpath(string),
         recordedlumi( float )

 ====== other helper id tables======
         lumisummary_id, NEXTID (uint64,PK)
         lumidetail_id, NEXTID (uint64,PK),
         hlt_id, NEXTID (uint64),
         trg_id, NEXTID (uint64)       
 
From LumiProducer, we query lumisummary,lumidetail,trg,hlt data in 100 LS(tunable parameter) batch into memory in one DB connection then close the connection. When a new LS is requested, we open a new DB connection asking for this LS+100 into memory.  

