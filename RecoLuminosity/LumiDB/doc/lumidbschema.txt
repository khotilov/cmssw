Glossary: FK=Foreign Key, PK=Primary Key
          lumiversion represents each lumi (re)processing

========
table 1:  CMSRUNSUMMARY 
columns:  runnum(uint32,PK), NOT NULL
          fillnum(uint32),   NOT NULL
          sequence(string),  NOT NULL
          hltkey(string),    NOT NULL

=======
table 2:  LUMISUMMARY (insert one row per run+lumiLS+lumiversion from LUMI_RAW file)
columns:  
	  lumisummary_id(uint64, PK) NOT NULL
          runnum(uint32),            NOT NULL
          cmslsnum(uint32),	     NOT NULL
          lumilsnum(uint32),         NOT NULL
          lumiversion(string),       NOT NULL
          dtnorm(float),             NOT NULL
          lhcnorm(float),            NOT NULL
          instlumi(float),           NOT NULL
          instlumierror(float),      NOT NULL
          instlumiquality(short),    NOT NULL
          cmsalive(bool),            NOT NULL
          startorbit(uint32),        NOT NULL
          numorbit(uint32),          NOT NULL 
          lumisectionquality(short)  NOT NULL // use max 3 bits [HLX,HF,BRAN]
	  
======
table 3:  LUMIDETAIL (insert 1 rows per run+lumiLS+lumiversion+algorithm from LUMI_RAW file)
columns: 
          lumidetail_id(uint64, PK)  NOT NULL
          lumisummary_id(FK refers to LUMISUMMARY.lumisummary_id), NOT NULL
	  bxlumivalue(blob),//blob of float                        NOT NULL
          bxlumierror(blob), //blob of float                       NOT NULL
          bxlumiquality(blob), //blob of short                     NOT NULL
          algoname(string), //occ1,occ2,et,bran                    NOT NULL
          
======
table 4:  TRG (insert 192 rows per run+cmsls/populate from GT-DB)
columns:  
          trg_id(uint64, PK),   NOT NULL
          runnum(uint32),       NOT NULL
          cmslsnum(uint32),     NOT NULL 
                               //lumi section id taken by cmsdaq,count from 1
          bitnum(uint32),       NOT NULL //range : 0-127 algo;128-192 tech
          bitname(string),      NOT NULL
          trgcount(uint32),     NOT NULL
          deadtime(uint64),     NOT NULL
          prescale(uint32),     NOT NULL

======
table 5: HLT (insert n-hltpath rows per run+cmsls/populate from RunInfo-HLT)
         hlt_id(uint64, PK),    NOT NULL
	 runnum(uint32),        NOT NULL
         cmslsnum(uint32),    NOT NULL
         pathname(string),      NOT NULL
         inputcount(uint32),    NOT NULL
         acceptcount(uint32),   NOT NULL
         prescale(uint32)       NOT NULL
	  
======
table 6: TRGHLTMAP (insert 1 row per hltpath-l1seed / populated from ConfDB+L1Seed expression parser)
         hltkey(string),        NOT NULL
         hltpathname(string),   NOT NULL
         l1seed(string)         NOT NULL
	 

 ====== result tables======
table 7: INTLUMI (insert 1 row per combinatorial of run+lumiversion)
columns:  
         runnum(uint32),
         lumiversion(string),
         deliveredlumi( float ), 
         recordedlumi( float ) //total recordedlumi deadtimecorrected

table 8: INTLUMIHLT (insert 1 row per combinatorial of run+lumiversion+hltpath)
         runnum(uint32),
         lumiversion(string),
	 hltpath(string),
         recordedlumi( float )

====== bookkeeping tables ===== (to be added in a 2nd phase)
table 9: LATEST_OFFICIAL_RUN (one entry represents the most recent official run fectched from the cms run info db, can be used to trigger new data pulling chain )
         runnum(uint32),
         hltkey(string)
     
 ====== other helper id tables======
         lumisummary_id, NEXTID (uint64,PK)
         lumidetail_id, NEXTID (uint64,PK),
         hlt_id, NEXTID (uint64),
         trg_id, NEXTID (uint64)       
 
From LumiProducer, we query lumisummary,lumidetail,trg,hlt data in 100 LS(tunable parameter) batch into memory in one DB connection then close the connection. When a new LS is requested, we open a new DB connection asking for this LS+100 into memory.  

