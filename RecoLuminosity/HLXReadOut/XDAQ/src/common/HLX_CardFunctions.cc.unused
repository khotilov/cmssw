/*************************************************************************
 * XDAQ layer for GCT Source Card                                        *
 * Copyright (C) 2006, Imperial College London                           *
 * All rights reserved.                                                  *
 * Authors: J. Jones & A. Rose      					 *
 ************************************************************************/

#include "SourceCardSupervisor.hh"
#include <log4cplus/consoleappender.h>

using namespace log4cplus;
using namespace log4cplus::spi;
using namespace log4cplus::helpers;
using namespace std;
using namespace GCT_SC;

#define XDAQ_PAGE_HEADER "GCT Source Card Supervisor"

namespace GCT_SC {

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  i32 SourceCardSupervisor::ExtractBoardID(xgi::Input * in) throw (xgi::exception::Exception) {
    try {
      cgicc::Cgicc cgi(in);

      vector<cgicc::FormEntry> elements = cgi.getElements();
      vector<cgicc::FormEntry>::iterator forms;

      GCT_SC::i32 boardID = -1;
      std::string setting, val;
      
      for ( forms = elements.begin(); forms!=elements.end(); ++forms){
	std::string command = forms->getName();
	std::string value = forms->getStrippedValue();
	if ( command == "board" ) {
	  boardID = atoi(value.c_str());
	  if ( value == "All" ) boardID = -1;
	}
      }

      std::string temp2, temp3;
      std::stringstream temp;

      temp << boardID << endl;
      temp >> temp3;

      temp2 = __PRETTY_FUNCTION__;
      temp2 += " called with information: ";
      temp2 += "BoardID = ";
      temp2 += temp3;
      LOG4CPLUS_DEBUG(this->getApplicationLogger(), temp2);

      return boardID;
    } catch(ICException &aExc) {
      XCEPT_RAISE(xgi::exception::Exception,aExc.what());
    } catch(xgi::exception::Exception &e) {
      string errMsg = "Exception caught in ";
      errMsg += __PRETTY_FUNCTION__;
      XCEPT_RETHROW(xgi::exception::Exception, errMsg, e);
    } catch(...) {
      string errMsg = "Unknown exception caught in ";
      errMsg += __PRETTY_FUNCTION__;
      XCEPT_RAISE(xgi::exception::Exception, errMsg);
    }
  }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  void SourceCardSupervisor::ParameterSet(xgi::Input * in, xgi::Output * out) throw (xgi::exception::Exception) {
    try {
    
      cgicc::Cgicc cgi(in);

      *out << cgicc::HTMLDoctype(cgicc::HTMLDoctype::eStrict) << std::endl;
      *out << cgicc::html().set("lang", "en").set("dir","ltr") << std::endl;
      *out << cgicc::title(XDAQ_PAGE_HEADER) << std::endl;
      xgi::Utils::getPageHeader(*out, XDAQ_PAGE_HEADER);
      
      std::string link = "/";
      link += getApplicationDescriptor()->getURN().c_str();
      link += "/";
      link += mLastPage;
      *out << "<META HTTP-EQUIV=\"Refresh\" CONTENT=\"0; URL=" << link << "\">" ;

      vector<cgicc::FormEntry> elements = cgi.getElements();
      vector<cgicc::FormEntry>::iterator forms;

      GCT_SC::u32 boardID=0;
      std::string setting, val;
      
      bool bValidValue = false;
      bool bValidSetting = false;
      bool bValidBoardID = false;


      for ( forms = elements.begin(); forms!=elements.end(); ++forms){
	std::string command = forms->getName();
	std::string value = forms->getStrippedValue();

	if ( command == "board" ) {
	  boardID = atoi(value.c_str());
	  bValidBoardID = true;
	}
	if ( command == "setting" ) {
	  setting = value;
	  bValidSetting = true;
	}
	if ( command == "value" ) {
	  val = value;
	  bValidValue = true;
	}


      }

      //*out << val << "\t" << setting << "\t" << boardID << endl;
      std::string temp2, temp3;
      std::stringstream temp;

      temp << boardID << endl;
      temp >> temp3;

      temp2 = __PRETTY_FUNCTION__;
      temp2 += " called with information: ";
      if ( bValidBoardID ) {
	temp2 += "BoardID = ";
	temp2 += temp3;
	temp2 += "; ";
      }
      if ( bValidSetting ) {
	temp2 += "Setting = ";
	temp2 += setting;
	temp2 += "; ";
      }
      if ( bValidValue ) {
	temp2 += "Value = ";
	temp2 += val;
	temp2 += "; ";
      }

      LOG4CPLUS_DEBUG(this->getApplicationLogger(), temp2);

      // Load the value if all parameters ready
      if ( bValidValue && bValidSetting ) this->SetSourceCardParameter(setting,val,boardID,bValidBoardID);
 
    } catch(ICException &aExc) {
      XCEPT_RAISE(xgi::exception::Exception,aExc.what());
    } catch(xgi::exception::Exception &e) {
      string errMsg = "Exception caught in ";
      errMsg += __PRETTY_FUNCTION__;
      XCEPT_RETHROW(xgi::exception::Exception, errMsg, e);
    } catch(...) {
      string errMsg = "Unknown exception caught in ";
      errMsg += __PRETTY_FUNCTION__;
      XCEPT_RAISE(xgi::exception::Exception, errMsg);
    }
  }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  void SourceCardSupervisor::SetSourceCardParameter(const std::string &setting, const std::string &value, const GCT_SC::u32 boardID, const bool bValidBoardID ) throw (xdaq::exception::Exception) {
    try {
      if ( boardID >= mHardwareManager->GetNumBoards() ) {
	// raise?
	return;
      }

      string temp2 = __PRETTY_FUNCTION__;
      temp2 += " called with information: ";
      temp2 += setting;
      temp2 += "; ";
      temp2 += value;
      LOG4CPLUS_DEBUG(this->getApplicationLogger(), temp2);

const GCT_SC::SC_CONFIG *lConfig;

if (bValidBoardID){
      lConfig = mHardwareManager->GetConfig(boardID);
}else{
      lConfig = mHardwareManager->GetConfig();
}

      GCT_SC::SC_CONFIG newConfig;
      memcpy(&newConfig,lConfig,sizeof(GCT_SC::SC_CONFIG));

      string numoption=setting.substr(setting.find(".")+1); 
      string subsetting=setting.substr(0,setting.find(".")); 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

      // Transmitter Parameters	
      if (setting == "SetTransmitterTriggerSource" ) {
	if (value == "RCT") newConfig.transmitter.bTriggerSource[1] = !newConfig.transmitter.bTriggerSource[1];
	else if (value == "TTCBC0") newConfig.transmitter.bTriggerSource[3] = !newConfig.transmitter.bTriggerSource[3];
	else if (value == "TTCL1RST") newConfig.transmitter.bTriggerSource[2] = !newConfig.transmitter.bTriggerSource[2];
	else if (value == "Software") newConfig.transmitter.bTriggerSource[0] = !newConfig.transmitter.bTriggerSource[0];
      } else if (setting == "SetTransmitterResetSource" ) {
	if (value == "TTCBC0") {
	  newConfig.transmitter.bResetSource[2] = !newConfig.transmitter.bResetSource[2];
	} else if (value == "TTCL1RST") { 
	  newConfig.transmitter.bResetSource[1] = !newConfig.transmitter.bResetSource[1];
        } else if (value == "Software") {
	  newConfig.transmitter.bResetSource[0] = !newConfig.transmitter.bResetSource[0];
	}
      } else if (setting == "SetTransmitterEnables") {
	if (value == "1") {
	  newConfig.transmitter.bChannelEnables[0] = !newConfig.transmitter.bChannelEnables[0];
	} else if (value == "2") {
	  newConfig.transmitter.bChannelEnables[1] = !newConfig.transmitter.bChannelEnables[1];
	} else if (value == "3") {
	  newConfig.transmitter.bChannelEnables[2] = !newConfig.transmitter.bChannelEnables[2];
	} else if (value == "4") {
	  newConfig.transmitter.bChannelEnables[3] = !newConfig.transmitter.bChannelEnables[3];
	}
      } else if (setting == "SetTransmitterTriggerMode" ) {
	if (value == "Multi") newConfig.transmitter.mTriggerMode = SourceCardInterface::MULTI;
	else if (value == "Loop") newConfig.transmitter.mTriggerMode = SourceCardInterface::LOOP;
      } else if (setting == "SetTransmitterDataMode" ) {
	if (value == "RCT") newConfig.transmitter.mDataMode = SourceCardInterface::RCT;
	else if (value == "A5") newConfig.transmitter.mDataMode = SourceCardInterface::A5;
	else if (value == "Counter") newConfig.transmitter.mDataMode = SourceCardInterface::COUNTER;
	else if (value == "LFSR") newConfig.transmitter.mDataMode = SourceCardInterface::LFSR;
	else if (value == "FIXED") newConfig.transmitter.mDataMode = SourceCardInterface::FIXED;
	else if (value == "RAM") newConfig.transmitter.mDataMode = SourceCardInterface::RAM;
      } else if (setting == "SetTransmitterDelayPeriod" ) {
	newConfig.transmitter.mDelayPeriod = atoi(value.c_str());
      } else if (setting == "SetTransmitterRunningPeriod" ) {
	newConfig.transmitter.mRunningPeriod = atoi(value.c_str())-1;
      } else if (setting == "SetTransmitterLoopPeriod" ) {
	newConfig.transmitter.mLoopPeriod = atoi(value.c_str());
      } else if (subsetting == "SetTransmitterChannelMask" ) {
	newConfig.transmitter.mChannelMask[atoi(numoption.c_str())-1] = strtoul(value.c_str(),NULL,16);
      } else if (subsetting == "SetSWPatternData" ) {
	//newConfig.transmitter.mFixedPatternSource = 0;
	newConfig.transmitter.mFixedPatternData[atoi(numoption.c_str())-1] = strtoul(value.c_str(),NULL,16);

	  //SourceCardRouting::SourceCardRouting tempRouting;
	  //u16 SFP[2][4]={{0}};
	  //u32 VHDCI[2][2]={{0}};

	  //for (int i=0; i<4;i++){
	  //	SFP[0][i]=newConfig.transmitter.mFixedPatternData[i];
  	  //}

	//tempRouting.SourceCardRouting::SFPtoVHDCI(0,SFP,VHDCI);
	//cout<<hex<<VHDCI[0][0]<<'\t'<<VHDCI[0][1]<<'\t'<<VHDCI[1][0]<<'\t'<<VHDCI[1][1]<<endl;
	//cout<<hex<<SFP[0][0]<<'\t'<<SFP[0][1]<<'\t'<<SFP[0][2]<<'\t'<<SFP[0][3]<<endl;


      } else if (setting == "SetSWDataSource"){
	if (value == "User"){
	  //newConfig.transmitter.mFixedPatternSource = 0;
	  newConfig.transmitter.mFixedPatternData[0] = 0;
	  newConfig.transmitter.mFixedPatternData[1] = 0;
	  newConfig.transmitter.mFixedPatternData[2] = 0;
	  newConfig.transmitter.mFixedPatternData[3] = 0;
	}else if (value == "LinkNumber"){
	  //newConfig.transmitter.mFixedPatternSource = 1;
	  newConfig.transmitter.mFixedPatternData[0] = 0;
	  newConfig.transmitter.mFixedPatternData[1] = 1;
	  newConfig.transmitter.mFixedPatternData[2] = 2;
	  newConfig.transmitter.mFixedPatternData[3] = 3;
	}else if (value == "TTCAddress"){
	  //newConfig.transmitter.mFixedPatternSource = 2;
	}else if (value == "LinkNoAddress"){
	  //newConfig.transmitter.mFixedPatternSource = 3;
	}
      } else if (subsetting == "TransmitterDataPatternMode" ) {
	if (value == "DATA"){
	  newConfig.transmitter.mBRAMData[atoi(numoption.c_str())].mode = SourceCardInterface::DATA;
	} else if (value == "COMMA"){
	  newConfig.transmitter.mBRAMData[atoi(numoption.c_str())].mode = SourceCardInterface::COMMA;
	} else if (value == "CRC"){
	  newConfig.transmitter.mBRAMData[atoi(numoption.c_str())].mode = SourceCardInterface::CRC;
	} else if (value == "STATUS"){
	  newConfig.transmitter.mBRAMData[atoi(numoption.c_str())].mode = SourceCardInterface::STATUS;
	}
      } else if (subsetting == "TransmitterDataPatternLength" ) {
	  newConfig.transmitter.mBRAMData[atoi(numoption.c_str())].length = atoi(value.c_str());
      } else if (subsetting == "TransmitterDataPatternNumEntries") {
	if (value == "ADD"){
	  newConfig.transmitter.mBRAMData[newConfig.transmitter.mNumBRAMDataEntries].mode = SourceCardInterface::DATA;
	  newConfig.transmitter.mBRAMData[newConfig.transmitter.mNumBRAMDataEntries].length = 0;
          newConfig.transmitter.mNumBRAMDataEntries++;
	} else if (value == "REMOVE"){
          if(newConfig.transmitter.mNumBRAMDataEntries > 1) newConfig.transmitter.mNumBRAMDataEntries--;
	} 
 

      } else if (subsetting.substr(0,subsetting.find(":")) == "SetElectronData" ) {
	  u16 temp = atoi(value.c_str());
	  u16 eIsoRank[4]={0};u16 eIsoCardId[4]={0};u16 eIsoRegionId[4]={0};u16 eNonIsoRank[4]={0};u16 eNonIsoCardId[4]={0};u16 eNonIsoRegionId[4]={0};u16 MIPbits[7]={0};u16 Qbits[7]={0};u16 SFP[2][4]={{0}};
	  SourceCardRouting::SourceCardRouting tempRouting;

	  for (int i=0; i<4;i++){
	  	SFP[0][i]=newConfig.transmitter.mFixedPatternData[i];
  	  }

	  tempRouting.SourceCardRouting::SFPtoEMU(eIsoRank,eIsoCardId,eIsoRegionId,eNonIsoRank,eNonIsoCardId,eNonIsoRegionId,MIPbits,Qbits,SFP);

	  if (subsetting.substr(subsetting.find(":")+1)=="Rank"){
 	    switch(atoi(numoption.c_str())){
	      case 1: eIsoRank[0]=temp; break;
	      case 2: eIsoRank[1]=temp; break;
	      case 3: eNonIsoRank[0]=temp; break;
	      case 4: eNonIsoRank[1]=temp; break;
	    }
        } else if (subsetting.substr(subsetting.find(":")+1)=="CardID" ) {
 	    switch(atoi(numoption.c_str())){
	      case 1: eIsoCardId[0]=temp; break;
	      case 2: eIsoCardId[1]=temp; break;
	      case 3: eNonIsoCardId[0]=temp; break;
	      case 4: eNonIsoCardId[1]=temp; break;
	    }
        } else if (subsetting.substr(subsetting.find(":")+1)=="RegionID" ) {
	    switch(atoi(numoption.c_str())){
	      case 1: eIsoRegionId[0]=temp; break;
	      case 2: eIsoRegionId[1]=temp; break;
	      case 3: eNonIsoRegionId[0]=temp; break;
	      case 4: eNonIsoRegionId[1]=temp; break;
	    }
        }
      
	tempRouting.SourceCardRouting::EMUtoSFP(eIsoRank,eIsoCardId,eIsoRegionId,eNonIsoRank,eNonIsoCardId,eNonIsoRegionId,MIPbits,Qbits,SFP);

	  for (int i=0; i<4;i++){
	  	newConfig.transmitter.mFixedPatternData[i]=SFP[0][i];
  	  }
 
// Capture Settings
      }else if (setting == "SetCaptureTriggerSource" ) {
	if (value == "Software") newConfig.capture.bCaptureTriggerSources[0] = !newConfig.capture.bCaptureTriggerSources[0];
	else if (value == "RCTBC0") newConfig.capture.bCaptureTriggerSources[1] = !newConfig.capture.bCaptureTriggerSources[1];
	else if (value == "TTCResync") newConfig.capture.bCaptureTriggerSources[2] = !newConfig.capture.bCaptureTriggerSources[2];
	else if (value == "TTCBC0") newConfig.capture.bCaptureTriggerSources[3] = !newConfig.capture.bCaptureTriggerSources[3];
	else if (value == "Pattern") newConfig.capture.bCaptureTriggerSources[4] = !newConfig.capture.bCaptureTriggerSources[4];
      } else if (setting == "SetCaptureResetSource" ) {
	if (value == "Software") newConfig.capture.bCaptureResetSources[0] = !newConfig.capture.bCaptureResetSources[0];
	else if (value == "TTCResync") newConfig.capture.bCaptureResetSources[1] = !newConfig.capture.bCaptureResetSources[1];
	else if (value == "TTCBC0") newConfig.capture.bCaptureResetSources[2] = !newConfig.capture.bCaptureResetSources[2];
      } else if (setting == "SetCaptureDelayPeriod" ) {
	  newConfig.capture.mCaptureDelayPeriod = atoi(value.c_str());
      } else if (setting == "SetCaptureDepth" ) {
	  newConfig.capture.mCaptureDepth = atoi(value.c_str());
  	  if (newConfig.capture.mCaptureDepth > 4096) newConfig.capture.mCaptureDepth=4096;	 
      } else if (subsetting == "SetCaptureMask" ) {
	  newConfig.capture.mCaptureMask[atoi(numoption.c_str())-1] = strtoul(value.c_str(),NULL,16);
      } else if (subsetting == "SetCapturePattern" ) {
	  newConfig.capture.mCapturePattern[atoi(numoption.c_str())-1] = strtoul(value.c_str(),NULL,16);
      


      } else if (setting == "useBRAMForTransmitter" ) {
	  newConfig.bUseBRAMForTransmitter = (value=="true"?true:false);
      }



////////////////////////////// now complete configuration ////////////////////////////


if (bValidBoardID){
      mHardwareManager->SetConfig(&newConfig,boardID);

}else{
      mHardwareManager->SetConfig(&newConfig);

      if (setting == "ConfigMacro") {
	cout << "in" << endl;
	if (value == "TTCCounter") {
	  cout << "counter" << endl;
	  mHardwareManager->ConfigureTTCCounter(7000);
	} else if (value == "TTCA5") {
	  mHardwareManager->ConfigureTTCA5(7000);
	} else if (value == "TTCLFSR") {
	  mHardwareManager->ConfigureTTCLFSR(7000);
	} else if (value == "TTCID") {
	  mHardwareManager->ConfigureTTCID(7000);
	}

    } else if (setting == "LoadBRAMDataFile" ) {
	string DataFileName="blk_ram_data_files/";
	DataFileName += value;
 	    if (value != "") mHardwareManager->LoadBRAM( DataFileName.c_str() );
    } else if (setting == "LoadFixedPatternDataFile" ) {
	string DataFileName="fixed_pattern_data_files/";
	DataFileName += value;
 	    if (value != "") mHardwareManager->LoadFixedPattern( DataFileName.c_str() );

    } else if (setting == "SoftwareTransmitterReset"){
      mHardwareManager->TransmitterSoftwareReset();
    } else if (setting == "SoftwareTransmitterTrigger"){
      mHardwareManager->TransmitterSoftwareTrigger();
    } else if (setting == "SoftwareCaptureReset"){
      mHardwareManager->CaptureSoftwareReset();
    } else if (setting == "SoftwareCaptureTrigger"){
      mHardwareManager->CaptureSoftwareTrigger();
    }



}


 
	  /*

// Global Status Parameters
      } else if ( setting == "SetTransmitterEnable1" ) {
	bool b1,b2,b3,b4;
	for ( u32 i = 0 ; i != mSourceCardList.size() ; i++ ) {
	  mSourceCardList[i].lBoard->GetSerdesDCMStatus(b1,b2);
	  if ( b1 && b2 ) {
	    mSourceCardList[i].lBoard->GetTransmitterEnables(b1,b2,b3,b4);
	    if (value == "1") b1 = true; else b1=false;
	    mSourceCardList[i].lBoard->SetTransmitterEnables(b1,b2,b3,b4);
	  }
	}
      } else if ( setting == "SetTransmitterEnable2" ) {
	bool b1,b2,b3,b4;
	for ( u32 i = 0 ; i != mSourceCardList.size() ; i++ ) {
	  mSourceCardList[i].lBoard->GetSerdesDCMStatus(b1,b2);
	  if ( b1 && b2 ) {
	    mSourceCardList[i].lBoard->GetTransmitterEnables(b1,b2,b3,b4);
	    if (value == "1") b2 = true; else b2=false;
	    mSourceCardList[i].lBoard->SetTransmitterEnables(b1,b2,b3,b4);
	  }
	}
      } else if ( setting == "SetTransmitterEnable3" ) {
	bool b1,b2,b3,b4;
	for ( u32 i = 0 ; i != mSourceCardList.size() ; i++ ) {
	  mSourceCardList[i].lBoard->GetSerdesDCMStatus(b1,b2);
	  if ( b1 && b2 ) {
	    mSourceCardList[i].lBoard->GetTransmitterEnables(b1,b2,b3,b4);
	    if (value == "1") b3 = true; else b3=false;
	    mSourceCardList[i].lBoard->SetTransmitterEnables(b1,b2,b3,b4);
	  }
	}
      } else if ( setting == "SetTransmitterEnable4" ) {
	bool b1,b2,b3,b4;
	for ( u32 i = 0 ; i != mSourceCardList.size() ; i++ ) {
	  mSourceCardList[i].lBoard->GetSerdesDCMStatus(b1,b2);
	  if ( b1 && b2 ) {
	    mSourceCardList[i].lBoard->GetTransmitterEnables(b1,b2,b3,b4);
	    if (value == "1") b4 = true; else b4=false;
	    mSourceCardList[i].lBoard->SetTransmitterEnables(b1,b2,b3,b4);
	  }
	}
      } else if ( setting == "SetLink1" ) {
	bool b1,b2,b3,b4;
	for ( u32 i = 0 ; i != mSourceCardList.size() ; i++ ) {
	  mSourceCardList[i].lBoard->GetOptoTxEnables(b1,b2,b3,b4);
	  if (value == "1") b1 = true; else b1=false;
	  mSourceCardList[i].lBoard->SetOptoTxEnables(b1,b2,b3,b4);
	}
      } else if ( setting == "SetLink2" ) {
	bool b1,b2,b3,b4;
	for ( u32 i = 0 ; i != mSourceCardList.size() ; i++ ) {
	  mSourceCardList[i].lBoard->GetOptoTxEnables(b1,b2,b3,b4);
	  if (value == "1") b2 = true; else b2=false;
	  mSourceCardList[i].lBoard->SetOptoTxEnables(b1,b2,b3,b4);
	}
      } else if ( setting == "SetLink3" ) {
	bool b1,b2,b3,b4;
	for ( u32 i = 0 ; i != mSourceCardList.size() ; i++ ) {
	  mSourceCardList[i].lBoard->GetOptoTxEnables(b1,b2,b3,b4);
	  if (value == "1") b3 = true; else b3=false;
	  mSourceCardList[i].lBoard->SetOptoTxEnables(b1,b2,b3,b4);
	}
      } else if ( setting == "SetLink4" ) {
	bool b1,b2,b3,b4;
	for ( u32 i = 0 ; i != mSourceCardList.size() ; i++ ) {
	  mSourceCardList[i].lBoard->GetOptoTxEnables(b1,b2,b3,b4);
	  if (value == "1") b4 = true; else b4=false;
	  mSourceCardList[i].lBoard->SetOptoTxEnables(b1,b2,b3,b4);
	}
      } else if ( setting == "SetSerdesDCM" ) {
	for ( u32 i = 0 ; i != mSourceCardList.size() ; i++ ) {
	  if ( value == "1" ) {
	    mSourceCardList[i].lBoard->SetSerdesDCMEnable(true);
	  } else {
	    mSourceCardList[i].lBoard->SetSerdesDCMEnable(false);
	  }
	}
      } else if ( setting == "SetTTCDCM" ) {
	for ( u32 i = 0 ; i != mSourceCardList.size() ; i++ ) {
	  if ( value == "1" ) {
	    mSourceCardList[i].lBoard->SetTTCDCMEnable(true);
	  } else {
	    mSourceCardList[i].lBoard->SetTTCDCMEnable(false);
	  }
	}      
      } else if ( setting == "SetReceiverDCM" ) {
	for ( u32 i = 0 ; i != mSourceCardList.size() ; i++ ) {
	  if ( value == "1" ) {
	    mSourceCardList[i].lBoard->SetReceiverDCMEnable(true);
	  } else {
	    mSourceCardList[i].lBoard->SetReceiverDCMEnable(false);
	  }
	}
      } else if ( setting == "SetQPLLEnable" ) {
	for ( u32 i = 0 ; i != mSourceCardList.size() ; i++ ) {
	  if ( value == "1" ) {
	    mSourceCardList[i].lBoard->QPLLConfigure(false,false,0);
	  } else {
	    mSourceCardList[i].lBoard->QPLLConfigure(true,false,0);
	  }
	}
      } else if ( setting == "SetTTCrxEnable" ) {
	for ( u32 i = 0 ; i != mSourceCardList.size() ; i++ ) {
	  if ( value == "1" ) {
	    mSourceCardList[i].lBoard->SetTTCrxEnable(true);
	  } else {
	    mSourceCardList[i].lBoard->SetTTCrxEnable(false);
	  }
	}
      } else if ( setting == "SetReceiverEnable" ) {
	for ( u32 i = 0 ; i != mSourceCardList.size() ; i++ ) {
	  if ( value == "1" ) {
	    mSourceCardList[i].lBoard->SetReceiverEnable(true);
	  } else {
	    mSourceCardList[i].lBoard->SetReceiverEnable(false);
	  }
	}
      }*/

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    } catch(ICException &aExc) {
      XCEPT_RAISE(xgi::exception::Exception,aExc.what());
    } catch(xgi::exception::Exception &e) {
      string errMsg = "Exception caught in ";
      errMsg += __PRETTY_FUNCTION__;
      XCEPT_RETHROW(xgi::exception::Exception, errMsg, e);
    } catch(...) {
      string errMsg = "Unknown exception caught in ";
      errMsg += __PRETTY_FUNCTION__;
      XCEPT_RAISE(xgi::exception::Exception, errMsg);
    }
  }


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  // Just an init state with nothing in it...
  void SourceCardSupervisor::InitAction(toolbox::Event::Reference e) throw (xdaq::exception::Exception) {
    try {
      string temp2 = __PRETTY_FUNCTION__;
      temp2 += " called";
      LOG4CPLUS_DEBUG(this->getApplicationLogger(), temp2);

      // Commit the current configuration to the hardware
      mHardwareManager->InitialiseSystem();

    } catch(ICException &aExc) {
      XCEPT_RAISE(xgi::exception::Exception,aExc.what());
    } catch (...) {
      XCEPT_RAISE(xdaq::exception::Exception,"Unknown exception caught in ConfigureAction");
    }
  }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  // Transitions to the configure state
  void SourceCardSupervisor::ConfigureAction(toolbox::Event::Reference) throw (xdaq::exception::Exception) {
    try {
      string temp2 = __PRETTY_FUNCTION__;
      temp2 += " called";
      LOG4CPLUS_DEBUG(this->getApplicationLogger(), temp2);

      // Commit the current configuration to the hardware
      mHardwareManager->ConfigureSystem();

    } catch(ICException &aExc) {
      XCEPT_RAISE(xgi::exception::Exception,aExc.what());
    } catch (...) {
      XCEPT_RAISE(xdaq::exception::Exception,"Unknown exception caught in ConfigureAction");
    }
  }
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  void SourceCardSupervisor::HaltAction(toolbox::Event::Reference) throw (xdaq::exception::Exception) {
    try {
      string temp2 = __PRETTY_FUNCTION__;
      temp2 += " called";
      LOG4CPLUS_DEBUG(this->getApplicationLogger(), temp2);
      
      // Commit the current configuration to the hardware
      mHardwareManager->HaltSystem();
      
    } catch(ICException &aExc) {
      XCEPT_RAISE(xgi::exception::Exception,aExc.what());
    } catch (...) {
      XCEPT_RAISE(xdaq::exception::Exception,"Unknown exception caught in HaltAction");
    }
  }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  void SourceCardSupervisor::EnableAction(toolbox::Event::Reference) throw (xdaq::exception::Exception) {
    try {
      string temp2 = __PRETTY_FUNCTION__;
      temp2 += " called";
      LOG4CPLUS_DEBUG(this->getApplicationLogger(), temp2);

      // Enable the system
      mHardwareManager->EnableSystem();
      
    } catch(ICException &aExc) {
      XCEPT_RAISE(xgi::exception::Exception,aExc.what());
    } catch (...) {
      XCEPT_RAISE(xdaq::exception::Exception,"Unknown exception caught in EnableAction");
    }
  }

}
