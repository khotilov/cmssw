process PROD  = {


   service = MessageLogger
   {
      untracked vstring destinations = {"cout"}
      
      untracked vstring categories = { "FwkJob" }

      untracked PSet cout = 
      { 
         untracked PSet default = { untracked int32 limit = 0 }    # kill all messages in the log
         untracked PSet FwkJob  = { untracked int32 limit = -1 }  # except *all* of FwkJob's	  
      }
      
      #untracked vstring fwkJobReports = {"FrameworkJobReport.xml"}
   }

   service = Timing {}


   service = RandomNumberGeneratorService
   {
      untracked uint32 sourceSeed = 135799753
      PSet moduleSeeds =
      {
         untracked uint32 VtxSmeared = 123456789
      }
   }
   
   include "SimGeneral/HepPDTESSource/data/pdt.cfi"


   # NOTE : if one wants to run with the SiStripDigitizer,
   #        then mag.field in the OscarProducer should be
   #        turned ON; otherwise it gets (re)created by the
   #        SiStripDigitizer, which seems to corrupt at all
   #        the edm::Event record


   # Step 1 : Event Generation

   # flat random E-gun, single muon
   #
   # if you want another particle type, replace the PartID
   # (standard STDHEP numbering scheme)
   #
   # to run it along with CMS detector simulation
   # (OscarProducer) make sure to select QGSP physics
   # list, instead DummyPhysics ("Dummy" has only EM
   # process and wont know to model interactions of
   # hadrons with matter)
   #
   source = FlatRandomEGunSource
   {
      untracked int32 maxEvents = 200
      untracked PSet PGunParameters =
      {
         # you can request more than 1 particle
         #untracked vint32  PartID = {211,11}
         untracked vint32 PartID = { 13 }
         untracked double MinEta = -3.5
         untracked double MaxEta = 3.5
         untracked double MinPhi = -3.14159265358979323846 # must be in radians
         untracked double MaxPhi =  3.14159265358979323846
         untracked double MinE  = 19.99
         untracked double MaxE  = 20.01
      }
      untracked int32 Verbosity = 0 # set to 1 (or greater)  for printouts
   }

   # event vertex smearing - applies only once (internal check)
   # Note : all internal generatoes will always do (0,0,0) vertex
   #
   module VtxSmeared = VertexGenerator
   {
      string type = "IOMC/EventVertexGenerators/GaussianEventVertexGenerator"
      double MeanX = 0.
      double MeanY = 0.
      double MeanZ = 0.
      double SigmaX = 0.015
      double SigmaY = 0.015
      double SigmaZ = 53.0  // in mm (as in COBRA/OSCAR)
   }

   #Geometry
   #
   include "Geometry/CMSCommonData/data/cmsSimIdealGeometryXML.cfi"
   es_module = TrackerGeometricDetESModule {}

   #Magnetic Field
   #
   include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

   # Step 2 : CMS Detector Simulation

   # CMS Geant4-based Det.Simulation module (OscarProducer)
   #
   include "SimG4Core/Application/data/SimG4Object.cfi"
   

   # Step 4 : Output module
   #
   module GEN-SIM-DIGI = PoolOutputModule
   {
      untracked string fileName = "evtgen_detsim_digi.root"
   }
   
   #
   # This is the full sequence of digitizers 
   # (Pixels, SiStrips, Ecal, Hcal, Muon(CSC,DT,RPC)
   # MixingModule included (in the zero-pileup mode)
   # it "returns" sequence called doAllDigi which can
   # be directly placed in the path
   #
   include "SimG4Core/Application/data/Digi.cff"
   
   # Now order modules for execution
   #
   path p1 = { VtxSmeared, SimG4Object, doAllDigi }
   endpath outpath = { GEN-SIM-DIGI }

}
