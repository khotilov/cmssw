// -*- C++ -*-
//
// Package:    L1RCTOfflineMonitor
// Class:      L1RCTOfflineMonitor
// 
/**\class L1RCTOfflineMonitor L1RCTOfflineMonitor.cc DQM/RCTMonitor/src/L1RCTOfflineMonitor.cc

 Description: <one line class summary>

 Implementation:
     <Notes on implementation>
*/
//
// Original Author:  Alexander Savin
//         Created:  Sat Jan  5 18:54:26 CET 2008
//     Modified by:  M. Weinberg
// $Id$
//
//


// system include files
#include "DQM/RCTMonitor/interface/L1RCTOfflineMonitor.h"
//
// constructors and destructor
//
L1RCTOfflineMonitor::L1RCTOfflineMonitor(const edm::ParameterSet& iConfig):
  n_events(0),
  ecalTpgData(iConfig.getUntrackedParameter<edm::InputTag>("ecalTpgD")),
  hcalTpgData(iConfig.getUntrackedParameter<edm::InputTag>("hcalTpgD")),
  l1GtDaqInputSource(iConfig.getUntrackedParameter<edm::InputTag>("L1GtDaqInputTag")),
  l1GtObjectMapSource(iConfig.getUntrackedParameter<edm::InputTag>("L1GtObjectMapTag")),
  rctSourceEmulator(iConfig.getUntrackedParameter<edm::InputTag>("rctSourceEmulator")),
  rctSourceData(iConfig.getUntrackedParameter<edm::InputTag>("rctSourceData")),
  writeOutputFile(iConfig.getUntrackedParameter<bool>("WriteOutputFile")),
  outputFileName(iConfig.getUntrackedParameter<std::string>("OutputFileName"))
{
   //now do what ever initialization is needed
  my_rootfile = new TFile(outputFileName.c_str(),"RECREATE");
  my_tree = new TTree("RCT","rct");

  etpgOcc1d    = new TH1F("etpgOcc1d",    "1D Ecal TPG occupancy",       2304, 0.0, 2304.0);                 // Ecal TPG
  emulOcc1d    = new TH1F("emulOcc1d",    "1D emulator occupancy",       144,  0.0, 144.0);
  effOcc1d     = new TH1F("effOcc1d",     "1D efficiency occupancy",     144,  0.0, 144.0);
  ineffOcc1d   = new TH1F("ineffOcc1d",   "1D inefficiency occupancy",   144,  0.0, 144.0);
  overeffOcc1d = new TH1F("overeffOcc1d", "1D overefficiency occupancy", 144,  0.0, 144.0);
  eff1d        = new TH1F("eff1d",        "1D efficiency",               144,  0.0, 144.0);
  ineff1d      = new TH1F("ineff1d",      "1D inefficiency",             144,  0.0, 144.0);
  overeff1d    = new TH1F("overeff1d",    "1D overefficiency",           144,  0.0, 144.0);
  etpgOcc      = new TH2F("etpgOcc",      "Ecal TPG occupancy",          32,   6.5, 14.5, 72, -0.5, 17.5);   // Ecal TPG
  emulOcc      = new TH2F("emulOcc",      "emulator occupancy",          8,    6.5, 14.5, 18, -0.5, 17.5);
  effOcc       = new TH2F("effOcc",       "efficiency occupancy",        8,    6.5, 14.5, 18, -0.5, 17.5);
  ineffOcc     = new TH2F("ineffOcc",     "inefficiency occupancy",      8,    6.5, 14.5, 18, -0.5, 17.5);
  overeffOcc   = new TH2F("overeffOcc",   "overefficiency occupancy",    8,    6.5, 14.5, 18, -0.5, 17.5);
  eff          = new TH2F("eff",          "efficiency",                  8,    6.5, 14.5, 18, -0.5, 17.5);
  ineff        = new TH2F("ineff",        "inefficiency",                8,    6.5, 14.5, 18, -0.5, 17.5);
  overeff      = new TH2F("overeff",      "overefficiency",              8,    6.5, 14.5, 18, -0.5, 17.5);
}


L1RCTOfflineMonitor::~L1RCTOfflineMonitor()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called to for each event  ------------
void
L1RCTOfflineMonitor::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
  
  FillL1RCTOfflineMonitor(iEvent,iSetup) ;

  n_events++ ;
}


// ------------ method called once each job just before starting event loop  ------------
void 
L1RCTOfflineMonitor::beginJob(const edm::EventSetup&)
{
   BookL1RCTOfflineMonitor() ;
}

// ------------ method called once each job just after ending the event loop  ------------
void 
L1RCTOfflineMonitor::endJob() {

  my_rootfile->cd();

  my_tree->Write();
  delete my_tree;

  etpgOcc1d->Write();      // Ecal TPG
  emulOcc1d->Write();
  effOcc1d->Write();
  ineffOcc1d->Write();
  overeffOcc1d->Write();
  eff1d->Write();
  ineff1d->Write();
  overeff1d->Write();
  etpgOcc->Write();        // Ecal TPG
  emulOcc->Write();
  effOcc->Write();
  ineffOcc->Write();
  overeffOcc->Write();
  eff->Write();
  ineff->Write();
  overeff->Write();

  my_rootfile->Close();

}



   void L1RCTOfflineMonitor::FillL1RCTOfflineMonitor(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
  // get the TPGs digis
  edm::Handle<EcalTrigPrimDigiCollection> ecal;
  edm::Handle<HcalTrigPrimDigiCollection> hcal;

  // Get the RCT digis
  edm::Handle<L1CaloEmCollection> em;
  edm::Handle<L1CaloRegionCollection> rgn;

  edm::Handle<L1CaloEmCollection> emData;
  edm::Handle<L1CaloRegionCollection> rgnData;

  iEvent.getByLabel(ecalTpgData, ecal);   // Ecal TPG
if (!ecal.isValid()) {
std::cout << " ECAL TPGs are not o.k. " << std::endl ;
}

  iEvent.getByLabel(hcalTpgData, hcal);   // Hcal TPG
if (!hcal.isValid()) {
std::cout << " HCAL TPGs are not o.k. " << std::endl ;
}

   iEvent.getByLabel(rctSourceEmulator,em);
if (!em.isValid()) {
std::cout << " Emulator em is not o.k. " << std::endl ;
}

   iEvent.getByLabel(rctSourceEmulator,rgn);
if (!rgn.isValid()) {
std::cout << " Emulator em is not o.k. " << std::endl ;
}

   iEvent.getByLabel(rctSourceData,emData);
if (!emData.isValid()) {
std::cout << " Data em is not o.k. " << std::endl ;
}

   iEvent.getByLabel(rctSourceData,rgnData);
if (!rgnData.isValid()) {
std::cout << " Data em is not o.k. " << std::endl ;
}

  // get Hcal TPG information
  netpg = 0;
  for(int i = 0; i < 400; i++)
  {
    etpgRank[i]   = 0;
    etpgEta[i]    = 0;
    etpgPhi[i]    = 0;
  }

std::cout << " HCAL Size " << hcal->size() << std::endl ;
  for(HcalTrigPrimDigiCollection::const_iterator ietpg = hcal->begin(); ietpg != hcal->end(); ietpg++)
{
//    if(ietpg->compressedEt() > 0)
//    {
//      etpgRank[netpg]   = int(ietpg->compressedEt());
//      etpgEta[netpg]    = int(ietpg->id().ieta());
//      etpgPhi[netpg]    = int(ietpg->id().iphi());
//      netpg++;
//    }
//energy = (unsigned short) ietpg->sample(ietpg->presamples()-1).compressedEt();
short iphi = (short) ietpg->id().iphi();
unsigned short energy;
unsigned short fineGrain;

    if (ietpg->id().iphi() >= 1 && ietpg->id().iphi() <=36)
      {
        energy = (unsigned short) ietpg->sample(ietpg->presamples()-1).compressedEt();
        fineGrain = (unsigned short) ietpg->sample(ietpg->presamples()-1).fineGrain();
      }
    else if (ietpg->id().iphi() >= 37 && ietpg->id().iphi() <=72)
      {
        energy = (unsigned short) ietpg->sample(ietpg->presamples()).compressedEt();
        fineGrain = (unsigned short) ietpg->sample(ietpg->presamples()).fineGrain();
      }

if (energy != 0)
std::cout << " Phi " << iphi << " Energy " << energy << " Fine grain " << fineGrain  <<  std::endl ;
}

// Get electron information
   
  nelectr = 0;
  nbits=0;

  int i;

  for(i=0; i<150; i++){
   el_iso[i]=0;
   el_rank[i]=0;
   el_crate[i]=0;
   el_card[i]=0;
   el_region[i]=0 ;
   el_phi[i]=0 ;
   el_eta[i]=0 ;
   trigbit[i]=0 ;
  }

  for (L1CaloEmCollection::const_iterator iem=em->begin(); iem!=em->end(); iem++) {
  if(iem->rank() >= 1){
      std::cout << "Emu Counter " << nelectr << " iso " << iem->isolated() << " phi  " << iem->regionId().iphi() << " eta " << iem->regionId().ieta() << " crate  " <<   iem->rctCrate() << " card " << iem->rctCard() << " region  " << iem->rctRegion() << " rank  " <<  iem->rank() <<  std::endl ; 

  el_iso[nelectr] = int(iem->isolated()) ;
  el_rank[nelectr] = int(iem->rank()) ;
  el_crate[nelectr] = int(iem->rctCrate()) ;
  el_card[nelectr] = int(iem->rctCard()) ;
  el_region[nelectr] = int(iem->rctRegion()) ;
  el_phi[nelectr] = int(iem->regionId().iphi()) ;
  el_eta[nelectr] = int(iem->regionId().ieta()) ;

  nelectr++ ;
  }}
   
  nelectrD = 0;

  for(i=0; i<150; i++){
   el_isoD[i]=0;
   el_rankD[i]=0;
   el_crateD[i]=0;
   el_cardD[i]=0;
   el_regionD[i]=0 ;
   el_phiD[i]=0 ;
   el_etaD[i]=0 ;
  }

  for (L1CaloEmCollection::const_iterator iem=emData->begin(); iem!=emData->end(); iem++) {
  if(iem->rank() >= 1){
    std::cout << "Data Counter " << nelectrD << " iso " << iem->isolated() << " phi  " << iem->regionId().iphi() << " eta " << iem->regionId().ieta() << " crate  " <<   iem->rctCrate() << " card " << iem->rctCard() << " region  " << iem->rctRegion() << " rank  " <<  iem->rank() <<  std::endl ; 

  el_isoD[nelectrD] = int(iem->isolated()) ;
  el_rankD[nelectrD] = int(iem->rank()) ;
  el_crateD[nelectrD] = int(iem->rctCrate()) ;
  el_cardD[nelectrD] = int(iem->rctCard()) ;
  el_regionD[nelectrD] = int(iem->rctRegion()) ;
  el_phiD[nelectrD] = int(iem->regionId().iphi()) ;
  el_etaD[nelectrD] = int(iem->regionId().ieta()) ;

  nelectrD++ ;
  }}

  // find occupancies for Ecal TPG digis
  for(int i = 0; i < netpg; i++)
  {
    etpgOcc1d->Fill(etpgEta[i] + 32*etpgPhi[i]);
    etpgOcc1d->Sumw2();
    etpgOcc->Fill(etpgEta[i], etpgPhi[i]);
  }

  // find efficiency occupancies
  for(int i = 0; i < nelectr; i++)
  {
    Bool_t found = kFALSE;

    emulOcc1d->Fill(el_eta[i] + 8*el_phi[i]);
    emulOcc1d->Sumw2();
    emulOcc->Fill(el_eta[i], el_phi[i]);

    for(int j = 0; j < nelectrD; j++)
      if(el_phi[i] == el_phiD[j] && el_eta[i] == el_etaD[j])
      {
	effOcc1d->Fill(el_eta[i] + 8*el_phi[i]);
	effOcc1d->Sumw2();
	effOcc->Fill(el_eta[i], el_phi[i]);

	eff1d->Divide(effOcc1d, emulOcc1d, 1., 1., "b");

	// eff1d = effOcc1d->Clone();   // copy histogram
	// eff1d->Divide(emulOcc1d);
	// eff1d->Sumw2();

	eff->Divide(effOcc, emulOcc, 1., 1.);
	found = kTRUE;
      }

    if(found == kFALSE)
    {
      ineffOcc1d->Fill(el_eta[i] + 8*el_phi[i]);
      ineffOcc1d->Sumw2();
      ineffOcc->Fill(el_eta[i], el_phi[i]);

      ineff1d->Divide(ineffOcc1d, emulOcc1d, 1., 1., "b");

      // ineff1d = ineffOcc1d->Clone();   // copy histogram
      // ineff1d->Divide(emulOcc1d);
      // ineff1d->Sumw2();

      ineff->Divide(ineffOcc, emulOcc, 1., 1.);
    }
  }

  for(int i = 0; i < nelectrD; i++)
  {
    Bool_t found = kFALSE;

    for(int j = 0; j < nelectr; j++)
      if(el_phiD[i] == el_phi[j] && el_etaD[i] == el_eta[j]) found = kTRUE;

    if(found == kFALSE)
    {
      overeffOcc1d->Fill(el_eta[i] + 8*el_phi[i]);
      overeffOcc1d->Sumw2();
      overeffOcc->Fill(el_eta[i], el_phi[i]);

      overeff1d->Divide(overeffOcc1d, emulOcc1d, 1., 1., "b");

      // overeff1d = overeffOcc1d->Clone();   // copy histogram
      // overeff1d->Divide(emulOcc1d);
      // overeff1d->Sumw2();

      overeff->Divide(overeffOcc, emulOcc, 1., 1.);
    }
  }

  //Fill the tree
  my_tree->Fill();

}

void L1RCTOfflineMonitor::BookL1RCTOfflineMonitor()
{
std::cout << "I am in the booking"  << std::endl ;

  my_tree->Branch("nelectr",&nelectr,"nelectr/I");
  my_tree->Branch("el_iso",el_iso,"el_iso[nelectr]/I");
  my_tree->Branch("el_rank",el_rank,"el_rank[nelectr]/I");
  my_tree->Branch("el_crate",el_crate,"el_crate[nelectr]/I");
  my_tree->Branch("el_card",el_card,"el_card[nelectr]/I");
  my_tree->Branch("el_region",el_region,"el_region[nelectr]/I");
  my_tree->Branch("el_phi",el_phi,"el_phi[nelectr]/I");
  my_tree->Branch("el_eta",el_eta,"el_eta[nelectr]/I");

  my_tree->Branch("nelectrD",&nelectrD,"nelectrD/I");
  my_tree->Branch("el_isoD",el_isoD,"el_isoD[nelectrD]/I");
  my_tree->Branch("el_rankD",el_rankD,"el_rankD[nelectrD]/I");
  my_tree->Branch("el_crateD",el_crateD,"el_crateD[nelectrD]/I");
  my_tree->Branch("el_cardD",el_cardD,"el_cardD[nelectrD]/I");
  my_tree->Branch("el_regionD",el_regionD,"el_regionD[nelectrD]/I");
  my_tree->Branch("el_phiD",el_phiD,"el_phiD[nelectrD]/I");
  my_tree->Branch("el_etaD",el_etaD,"el_etaD[nelectrD]/I");

  my_tree->Branch("nregions",&nregions,"nregions/I");
  my_tree->Branch("rgn_et",rgn_et,"rgn_et[nregions]/I");
  my_tree->Branch("rgn_ovfl",rgn_ovfl,"rgn_ovfl[nregions]/I");
  my_tree->Branch("rgn_tau",rgn_tau,"rgn_tau[nregions]/I");
  my_tree->Branch("rgn_fgr",rgn_fgr,"rgn_fgr[nregions]/I");
  my_tree->Branch("rgn_mip",rgn_mip,"rgn_mip[nregions]/I");
  my_tree->Branch("rgn_quiet",rgn_quiet,"rgn_quiet[nregions]/I");
  my_tree->Branch("rgn_isHf",rgn_isHf,"rgn_isHf[nregions]/I");
  my_tree->Branch("rgn_isHbHe",rgn_isHbHe,"rgn_isHbHe[nregions]/I");
  my_tree->Branch("rgn_Crate",rgn_Crate,"rgn_Crate[nregions]/I");
  my_tree->Branch("rgn_Card",rgn_Card,"rgn_Card[nregions]/I");
  my_tree->Branch("rgn_index",rgn_index,"rgn_index[nregions]/I");
  my_tree->Branch("rgn_phi",rgn_phi,"rgn_phi[nregions]/I");
  my_tree->Branch("rgn_eta",rgn_eta,"rgn_eta[nregions]/I");

  my_tree->Branch("nbits",&nbits,"nbits/I");
  my_tree->Branch("trigbit",trigbit,"trigbit[nbits]/I");

  TCanvas *c1 = new TCanvas();
  c1->Clear();
}

//define this as a plug-in
DEFINE_FWK_MODULE(L1RCTOfflineMonitor);
