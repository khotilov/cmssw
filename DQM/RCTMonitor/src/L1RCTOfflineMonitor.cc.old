// -*- C++ -*-
//
// Package:    L1RCTOfflineMonitor
// Class:      L1RCTOfflineMonitor
//
/**\class L1RCTOfflineMonitor L1RCTOfflineMonitor.cc DQM/RCTMonitor/src/L1RCTOfflineMonitor.cc

 Description: <one line class summary>

 Implementation:
     <notes on implementation>
*/
//
// Original Author: A. Savin
//         Created: Sat Jan 5 18:54:26 CET 2008
//     Modified by: M. Weinberg
// $Id$
//
//

// system include files
#include "DQM/RCTMonitor/interface/L1RCTOfflineMonitor.h"

//
// constructors and destructor
//
L1RCTOfflineMonitor::L1RCTOfflineMonitor(const edm::ParameterSet& iConfig):
  ecalTpgData        (iConfig.getUntrackedParameter<edm::InputTag>("ecalTpgD")),
  hcalTpgData        (iConfig.getUntrackedParameter<edm::InputTag>("hcalTpgD")),
  l1GtDaqInputSource (iConfig.getUntrackedParameter<edm::InputTag>("L1GtDaqInputTag")),
  l1GtObjectMapSource(iConfig.getUntrackedParameter<edm::InputTag>("L1GtObjectMapTag")),
  rctSourceEmulator  (iConfig.getUntrackedParameter<edm::InputTag>("rctSourceEmulator")),
  rctSourceData      (iConfig.getUntrackedParameter<edm::InputTag>("rctSourceData")),

  writeOutputFile(iConfig.getUntrackedParameter<bool>       ("WriteOutputFile")),
  outputFileName (iConfig.getUntrackedParameter<std::string>("OutputFileName")),

  nEvents(0)
{
  // now do whatever initialization is needed
  my_rootfile = new TFile(outputFileName.c_str(), "RECREATE");

  emulElecOcc1d          = new TH1I("emulElecOcc1d",          "1D emulator electron occupancy",           144, -0.5, 143.5);
  matchedElecOcc1d       = new TH1I("matchedElecOcc1d",       "1D matched electron occupancy",            144, -0.5, 143.5);
  unmatchedEmulElecOcc1d = new TH1I("unmatchedEmulElecOcc1d", "1D unmatched emulator electron occupancy", 144, -0.5, 143.5);
  unmatchedHwElecOcc1d   = new TH1I("unmatchedHwElecOcc1d",   "1D unmatched hardware electron occupancy", 144, -0.5, 143.5);

  elecEff1d     = new TH1F("elecEff1d",     "1D efficiency for electrons",     144, -0.5, 143.5);
  elecIneff1d   = new TH1F("elecIneff1d",   "1D inefficiency for electrons",   144, -0.5, 143.5);
  elecOvereff1d = new TH1F("elecOvereff1d", "1D overefficiency for electrons", 144, -0.5, 143.5);

  ecalTpOcc              = new TH2I("ecalTpOcc",              "ECAL TP digi occupancy",                         28,  6.875, 13.875, 72,  -0.625, 17.375);
  hcalTpOcc              = new TH2I("hcalTpOcc",              "HCAL TP digi occupancy",                         28,  6.875, 13.875, 72,  -0.625, 17.375);
  hwElecOcc              = new TH2I("hwElecOcc",              "Hardware electron occupancy",                    8,   6.5,   14.5,   18,  -0.5,   17.5);
  emulElecOcc2d          = new TH2I("emulElecOcc2d",          "2D emulator electron occupancy",                 8,   6.5,   14.5,   18,  -0.5,   17.5);
  matchedElecOcc2d       = new TH2I("matchedElecOcc2d",       "2D matched electron occupancy",                  8,   6.5,   14.5,   18,  -0.5,   17.5);
  unmatchedEmulElecOcc2d = new TH2I("unmatchedEmulElecOcc2d", "2D unmatched emulator electron occupancy",       8,   6.5,   14.5,   18,  -0.5,   17.5);
  unmatchedHwElecOcc2d   = new TH2I("unmatchedHwElecOcc2d",   "2D unmatched hardware electron occupancy",       8,   6.5,   14.5,   18,  -0.5,   17.5);
  matchedElecDeltaE      = new TH2I("matchedElecDeltaE",      "Delta E for matched electrons",                  144, -0.5,  143.5,  100, -50.0,  50.0);
  matchedElecDeltaEOcc   = new TH2I("matchedElecDeltaEOcc",   "Matched electron occupancy for nonzero Delta E", 8,   6.5,   14.5,   18,  -0.5,   17.5);

  elecEff2d              = new TH2F("elecEff2d",              "2D efficiency for electrons",                             8, 6.5, 14.5, 18, -0.5, 17.5);
  elecIneff2d            = new TH2F("elecIneff2d",            "2D inefficiency for electrons",                           8, 6.5, 14.5, 18, -0.5, 17.5);
  elecOvereff2d          = new TH2F("elecOvereff2d",          "2D overefficiency for electrons",                         8, 6.5, 14.5, 18, -0.5, 17.5);
  matchedElecDeltaEIneff = new TH2F("matchedElecDeltaEIneff", "Inefficiency for matched electrons with nonzero Delta E", 8, 6.5, 14.5, 18, -0.5, 17.5);
}

L1RCTOfflineMonitor::~L1RCTOfflineMonitor()
{
  // do anything here that needs to be done at destruction time
  // (e.g. close files, deallocate resources, etc.)
}

//
// member functions
//

// -------------------- method called for each event --------------------
void L1RCTOfflineMonitor::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
  FillL1RCTOfflineMonitor(iEvent, iSetup);
  nEvents++;
}

// -------------------- method called once each job just before starting event loop --------------------
void L1RCTOfflineMonitor::beginJob(const edm::EventSetup&) {BookL1RCTOfflineMonitor();}

// -------------------- method called once each job just after ending event loop --------------------
void L1RCTOfflineMonitor::endJob()
{
  my_rootfile->cd();

  emulElecOcc1d         ->Write();
  matchedElecOcc1d      ->Write();
  unmatchedEmulElecOcc1d->Write();
  unmatchedHwElecOcc1d  ->Write();

  elecEff1d    ->Write();
  elecIneff1d  ->Write();
  elecOvereff1d->Write();

  ecalTpOcc             ->Write();
  hcalTpOcc             ->Write();
  hwElecOcc             ->Write();
  emulElecOcc2d         ->Write();
  matchedElecOcc2d      ->Write();
  unmatchedEmulElecOcc2d->Write();
  unmatchedHwElecOcc2d  ->Write();
  matchedElecDeltaE     ->Write();
  matchedElecDeltaEOcc  ->Write();

  elecEff2d             ->Write();
  elecIneff2d           ->Write();
  elecOvereff2d         ->Write();
  matchedElecDeltaEIneff->Write();

  my_rootfile->Close();
}

void L1RCTOfflineMonitor::FillL1RCTOfflineMonitor(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
  // get the digis
  edm::Handle<EcalTrigPrimDigiCollection> ecalTpColl;
  edm::Handle<HcalTrigPrimDigiCollection> hcalTpColl;
  edm::Handle<L1CaloEmCollection>         hwElecColl;
  edm::Handle<L1CaloEmCollection>         emulElecColl;

  iEvent.getByLabel(ecalTpgData, ecalTpColl);
  if(!ecalTpColl.isValid()) std::cout << "ECAL TP digis are not okay" << std::endl;

  iEvent.getByLabel(hcalTpgData, hcalTpColl);
  if(!hcalTpColl.isValid()) std::cout << "HCAL TP digis are not okay" << std::endl;

  iEvent.getByLabel(rctSourceData, hwElecColl);
  if(!hwElecColl.isValid()) std::cout << "Hardware digis are not okay" << std::endl;

  iEvent.getByLabel(rctSourceEmulator, emulElecColl);
  if(!emulElecColl.isValid()) std::cout << "Emulator digis are not okay" << std::endl;

  // get ECAL TP information
  nEcalTp = 0;

  for(int i = 0; i < 2400; i++)
  {
    ecalTpRank[i] = 0;
    ecalTpEta [i] = 0;
    ecalTpPhi [i] = 0;
  }

  for(EcalTrigPrimDigiCollection::const_iterator iEcalTp = ecalTpColl->begin(); iEcalTp != ecalTpColl->end(); iEcalTp++)
    if(iEcalTp->compressedEt() > 0)
    {
      ecalTpRank[nEcalTp] = iEcalTp->compressedEt();
      ecalTpEta [nEcalTp] = iEcalTp->id().ieta();
      ecalTpPhi [nEcalTp] = iEcalTp->id().iphi();

      nEcalTp++;
    }

  // get HCAL TP information
  nHcalTp = 0;

  for(int i = 0; i < 2400; i++)
  {
    hcalTpRank[i] = 0;
    hcalTpEta [i] = 0;
    hcalTpPhi [i] = 0;
  }

  for(HcalTrigPrimDigiCollection::const_iterator iHcalTp = hcalTpColl->begin(); iHcalTp != hcalTpColl->end(); iHcalTp++)
  {
    if(iHcalTp->id().iphi() >= 1  &&
       iHcalTp->id().iphi() <= 36 &&
       iHcalTp->sample(iHcalTp->presamples() - 1).compressedEt() > 0)
    {
      hcalTpRank[nHcalTp] = iHcalTp->sample(iHcalTp->presamples() - 1).compressedEt();
      hcalTpEta [nHcalTp] = iHcalTp->id().ieta();
      hcalTpPhi [nHcalTp] = iHcalTp->id().iphi();

      nHcalTp++;
    }
    else if(iHcalTp->id().iphi() >= 37 &&
	    iHcalTp->id().iphi() <= 72 &&
	    iHcalTp->sample(iHcalTp->presamples()).compressedEt() > 0)
    {
      hcalTpRank[nHcalTp] = iHcalTp->sample(iHcalTp->presamples()).compressedEt();
      hcalTpEta [nHcalTp] = iHcalTp->id().ieta();
      hcalTpPhi [nHcalTp] = iHcalTp->id().iphi();

      nHcalTp++;
    }
  }

  // get hardware electron information
  nHwElec = 0;

  for(int i = 0; i < 150; i++)
  {
    hwElecRank[i] = 0;
    hwElecEta [i] = 0;
    hwElecPhi [i] = 0;
  }

  for(L1CaloEmCollection::const_iterator iHwElec = hwElecColl->begin(); iHwElec != hwElecColl->end(); iHwElec++)
    if(iHwElec->rank() > 0)
    {
      hwElecRank[nHwElec] = int(iHwElec->rank());
      hwElecEta [nHwElec] = int(iHwElec->regionId().ieta());
      hwElecPhi [nHwElec] = int(iHwElec->regionId().iphi());

      nHwElec++;
    }

  // get emulator electron information
  nEmulElec = 0;

  for(int i = 0; i < 150; i++)
  {
    emulElecRank[i] = 0;
    emulElecEta [i] = 0;
    emulElecPhi [i] = 0;
  }

  for(L1CaloEmCollection::const_iterator iEmulElec = emulElecColl->begin(); iEmulElec != emulElecColl->end(); iEmulElec++)
    if(iEmulElec->rank() > 0)
    {
      emulElecRank[nEmulElec] = int(iEmulElec->rank());
      emulElecEta [nEmulElec] = int(iEmulElec->regionId().ieta());
      emulElecPhi [nEmulElec] = int(iEmulElec->regionId().iphi());

      nEmulElec++;
    }

  // find occupancy for TP digis
  for(int i = 0; i < nEcalTp; i++)
  {
    if     (ecalTpEta[i] < 0) ecalTpOcc->Fill(float(ecalTpEta[i])/4. + 10.5,  float(ecalTpPhi[i])/4. - 0.75);
    else if(ecalTpEta[i] > 0) ecalTpOcc->Fill(float(ecalTpEta[i])/4. + 10.25, float(ecalTpPhi[i])/4. - 0.75);
  }
  for(int i = 0; i < nHcalTp; i++)
  {
    if     (hcalTpEta[i] < 0) hcalTpOcc->Fill(float(hcalTpEta[i])/4. + 10.5,  float(hcalTpPhi[i])/4. - 0.75);
    else if(hcalTpEta[i] > 0) hcalTpOcc->Fill(float(hcalTpEta[i])/4. + 10.25, float(hcalTpPhi[i])/4. - 0.75);
  }

  // find occupancy for electrons
  for(int i = 0; i < nEmulElec; i++)
  {
    bool found = false;

    emulElecOcc1d->Fill(emulElecEta[i] + 8*emulElecPhi[i]);
    emulElecOcc2d->Fill(emulElecEta[i], emulElecPhi[i]);

    for(int j = 0; j < nHwElec; j++)
      if(emulElecEta[i] == hwElecEta[j] && emulElecPhi[i] == hwElecPhi[j])
      {
	matchedElecOcc1d      ->Fill(emulElecEta[i] + 8*emulElecPhi[i]);
	elecEff1d             ->Divide(matchedElecOcc1d, emulElecOcc1d);
	matchedElecOcc2d      ->Fill(emulElecEta[i], emulElecPhi[i]);
	elecEff2d             ->Divide(matchedElecOcc2d, emulElecOcc2d);
	matchedElecDeltaE     ->Fill(emulElecEta[i] + 8*emulElecPhi[i], emulElecRank[i] - hwElecRank[j]);
	if(abs(emulElecRank[i] - hwElecRank[j]) > 0) matchedElecDeltaEOcc->Fill(emulElecEta[i], emulElecPhi[i]);
	matchedElecDeltaEIneff->Divide(matchedElecDeltaEOcc, emulElecOcc2d);

	found = true;
      }

    if(found == false)
    {
      unmatchedEmulElecOcc1d->Fill(emulElecEta[i] + 8*emulElecPhi[i]);
      elecIneff1d           ->Divide(unmatchedEmulElecOcc1d, emulElecOcc1d);
      unmatchedEmulElecOcc2d->Fill(emulElecEta[i], emulElecPhi[i]);
      elecIneff2d           ->Divide(unmatchedEmulElecOcc2d, emulElecOcc2d);
    }
  }

  for(int i = 0; i < nHwElec; i++)
  {
    bool found = false;

    hwElecOcc->Fill(hwElecEta[i], hwElecPhi[i]);

    for(int j = 0; j < nEmulElec; j++)
      if(hwElecEta[i] == emulElecEta[j] && hwElecPhi[i] == emulElecPhi[j]) found = true;

    if(found == false)
    {
      unmatchedHwElecOcc1d->Fill(hwElecEta[i] + 8*hwElecPhi[i]);
      elecOvereff1d       ->Divide(unmatchedHwElecOcc1d, emulElecOcc1d);
      unmatchedHwElecOcc2d->Fill(hwElecEta[i], hwElecPhi[i]);
      elecOvereff2d       ->Divide(unmatchedHwElecOcc2d, emulElecOcc2d);
    }
  }
}

void L1RCTOfflineMonitor::BookL1RCTOfflineMonitor() {std::cout << "I am in the booking" << std::endl;}

// define this as a plug-in
DEFINE_FWK_MODULE(L1RCTOfflineMonitor);
