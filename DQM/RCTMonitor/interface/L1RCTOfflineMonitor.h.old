#ifndef L1RCTOfflineMonitor_H
#define L1RCTOfflineMonitor_H

// -*- C++ -*-
//
// Package:    RCTMonitor
// Class:      RCTMonitor
//
/**\class RCTMonitor

 Description: DQM monitor for the Regional Calorimeter Trigger

*/
//
// Original Authors: S. Dasu, H. Patel, A. Savin
// version 0 is based on the GCTMonitor package created by A. Tapper
// Modified by:      M. Weinberg
//
//

// system files
#include <iostream>
#include <iomanip>
#include <map>
#include <memory>

// CMSSW files
#include "CalibFormats/CaloTPG/interface/CaloTPGRecord.h"
#include "CalibFormats/CaloTPG/interface/CaloTPGTranscoder.h"

#include "CondFormats/DataRecord/interface/L1GtPrescaleFactorsRcd.h"
#include "CondFormats/DataRecord/interface/L1GtTriggerMaskRcd.h"
#include "CondFormats/L1TObjects/interface/L1GtPrescaleFactors.h"
#include "CondFormats/L1TObjects/interface/L1GtTriggerMask.h"

#include "DataFormats/Common/interface/Handle.h"
#include "DataFormats/EcalDigi/interface/EcalDigiCollections.h"
#include "DataFormats/HcalDigi/interface/HcalDigiCollections.h"
#include "DataFormats/L1CaloTrigger/interface/L1CaloCollections.h"
#include "DataFormats/L1GlobalCaloTrigger/interface/L1GctCollections.h"
#include "DataFormats/L1GlobalCaloTrigger/interface/L1GctEtSums.h"
#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerObjectMap.h"
#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerObjectMapRecord.h"
#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h"
#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutSetup.h"
#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutSetupFwd.h"
#include "DataFormats/L1Trigger/interface/L1EmParticle.h"
#include "DataFormats/L1Trigger/interface/L1EtMissParticle.h"
#include "DataFormats/L1Trigger/interface/L1JetParticle.h"

// #include "DQMServices/Core/interface/DaqMonitorBEInterface.h"
// #include "DQMServices/Daemon/interface/MonitorDaemon.h"

#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/Framework/interface/ESHandle.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/EventSetup.h"
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"
#include "FWCore/ParameterSet/interface/InputTag.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/PluginManager/interface/ModuleDef.h"
#include "FWCore/ServiceRegistry/interface/Service.h"

// #include "L1Trigger/GlobalTrigger/interface/L1GlobalTriggerSetup.h"
#include "L1Trigger/RegionalCaloTrigger/interface/L1RCT.h"
#include "L1Trigger/RegionalCaloTrigger/interface/L1RCTLookupTables.h"

#include "L1TriggerConfig/L1Geometry/interface/L1CaloGeometry.h"
#include "L1TriggerConfig/L1Geometry/interface/L1CaloGeometryRecord.h"

// ROOT files
#include <TH1I.h>
#include <TH1F.h>
#include <TH2I.h>
#include <TH2F.h>

#include "TColor.h"
#include "TFile.h"
#include "TROOT.h"
#include "TStyle.h"
#include "TTree.h"

class L1RCTOfflineMonitor: public edm::EDAnalyzer
{
 public:
  explicit L1RCTOfflineMonitor(const edm::ParameterSet&);
  ~L1RCTOfflineMonitor();

 private:
  virtual void beginJob(const edm::EventSetup&);
  virtual void analyze (const edm::Event&, const edm::EventSetup&);
  virtual void endJob  (void);

  // -------------------- member data --------------------
  void BookL1RCTOfflineMonitor();
  void FillL1RCTOfflineMonitor(const edm::Event&, const edm::EventSetup&);

  // input labels
  edm::InputTag ecalTpgData;
  edm::InputTag hcalTpgData;
  edm::InputTag l1GtDaqInputSource;
  edm::InputTag l1GtObjectMapSource;
  edm::InputTag rctSourceEmulator;
  edm::InputTag rctSourceData;

  // write events to an output file named in parameters
  bool writeOutputFile;
  std::string outputFileName;

  // counters
  int nEvents;
  int nEcalTp;
  int nHcalTp;
  int nHwElec;
  int nEmulElec;

  // ECAL TP digis
  int ecalTpRank[2400];
  int ecalTpEta [2400];
  int ecalTpPhi [2400];

  // HCAL TP digis
  int hcalTpRank[2400];
  int hcalTpEta [2400];
  int hcalTpPhi [2400];

  // hardware electrons
  int hwElecRank[150];
  int hwElecEta [150];
  int hwElecPhi [150];

  // emulator electrons
  int emulElecRank[150];
  int emulElecEta [150];
  int emulElecPhi [150];

  // ROOT file
  TFile *my_rootfile;

  // ROOT histograms
  TH1I *emulElecOcc1d;
  TH1I *matchedElecOcc1d;
  TH1I *unmatchedEmulElecOcc1d;
  TH1I *unmatchedHwElecOcc1d;

  TH1F *elecEff1d;
  TH1F *elecIneff1d;
  TH1F *elecOvereff1d;

  TH2I *ecalTpOcc;
  TH2I *hcalTpOcc;
  TH2I *hwElecOcc;
  TH2I *emulElecOcc2d;
  TH2I *matchedElecOcc2d;
  TH2I *unmatchedEmulElecOcc2d;
  TH2I *unmatchedHwElecOcc2d;
  TH2I *matchedElecDeltaE;
  TH2I *matchedElecDeltaEOcc;

  TH2F *elecEff2d;
  TH2F *elecIneff2d;
  TH2F *elecOvereff2d;
  TH2F *matchedElecDeltaEIneff;
};

#endif
