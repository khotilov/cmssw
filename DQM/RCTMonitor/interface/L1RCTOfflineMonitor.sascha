
#ifndef L1RCTOfflineMonitor_H
#define L1RCTOfflineMonitor_H

// -*- C++ -*-
//
// Package:    RCTMonitor
// Class:      RCTMonitor
// 
/**\class RCTMonitor 

 Description: DQM monitor for the Regional Calorimeter Trigger

*/
//
// Original Author:  S.Dasu. H.Patel, A.Savin
// version 0 is based on the GCTMonitor package created by A.Tapper
// Modified by:      M. Weinberg
//
//

// Framework files
#include "FWCore/PluginManager/interface/ModuleDef.h"
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"
#include "FWCore/Framework/interface/EventSetup.h"
#include "FWCore/Framework/interface/ESHandle.h"

//new added with GT

#include "FWCore/ParameterSet/interface/InputTag.h"

//system files

#include <memory>

#include <iostream>
#include <iomanip>

#include<map>

//---------

#include "DataFormats/Common/interface/Handle.h"

#include "CalibFormats/CaloTPG/interface/CaloTPGTranscoder.h"

#include "CalibFormats/CaloTPG/interface/CaloTPGRecord.h"
#include "L1TriggerConfig/L1Geometry/interface/L1CaloGeometry.h"
#include "L1TriggerConfig/L1Geometry/interface/L1CaloGeometryRecord.h"

#include "L1Trigger/RegionalCaloTrigger/interface/L1RCTLookupTables.h"
#include "L1Trigger/RegionalCaloTrigger/interface/L1RCT.h"


#include <TH1F.h>
#include <TH1I.h>
#include <TH2F.h>

// ROOT headers 
#include "TROOT.h"
#include "TTree.h"
#include "TFile.h"
#include "TStyle.h"
#include "TColor.h"


// GCT and RCT data formats
#include "DataFormats/L1GlobalCaloTrigger/interface/L1GctCollections.h"
#include "DataFormats/L1GlobalCaloTrigger/interface/L1GctEtSums.h"
#include "DataFormats/L1CaloTrigger/interface/L1CaloCollections.h"

// TPs
#include "DataFormats/EcalDigi/interface/EcalDigiCollections.h"
#include "DataFormats/HcalDigi/interface/HcalDigiCollections.h"

// L1Extra
#include "DataFormats/L1Trigger/interface/L1EmParticle.h"
#include "DataFormats/L1Trigger/interface/L1JetParticle.h"
#include "DataFormats/L1Trigger/interface/L1EtMissParticle.h"

//L1 Global Trigger
#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutSetupFwd.h"
#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutSetup.h"

#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h"
#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerObjectMapRecord.h"

#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerObjectMap.h"

#include "CondFormats/L1TObjects/interface/L1GtPrescaleFactors.h"
#include "CondFormats/DataRecord/interface/L1GtPrescaleFactorsRcd.h"
#include "CondFormats/L1TObjects/interface/L1GtTriggerMask.h"
#include "CondFormats/DataRecord/interface/L1GtTriggerMaskRcd.h"


struct rct_location { unsigned crate,card,region; };

class L1RCTOfflineMonitor : public edm::EDAnalyzer {
   public:
      explicit L1RCTOfflineMonitor(const edm::ParameterSet&);
      ~L1RCTOfflineMonitor();


   private:
      virtual void beginJob(const edm::EventSetup&) ;
      virtual void analyze(const edm::Event&, const edm::EventSetup&);
      virtual void endJob(void) ;

      // ----------member data ---------------------------
  void BookL1RCTOfflineMonitor() ;
  void FillL1RCTOfflineMonitor(const edm::Event&, const edm::EventSetup&) ;

  TH1F *etpgOcc1d;      // Ecal TPG
  TH1F *emulOcc1d;
  TH1F *effOcc1d;
  TH1F *ineffOcc1d;
  TH1F *overeffOcc1d;
  TH1F *eff1d;
  TH1F *ineff1d;
  TH1F *overeff1d;
  TH2F *etpgOcc;        // Ecal TPG
  TH2F *emulOcc;
  TH2F *effOcc;
  TH2F *ineffOcc;
  TH2F *overeffOcc;
  TH2F *eff;
  TH2F *ineff;
  TH2F *overeff;

  // Don't use the default constructor
//  L1RCTOfflineMonitor();

  // event counter
  int n_events;

  // Input TPG digi labels
  edm::InputTag ecalTpgData;
  edm::InputTag hcalTpgData;
 
  // Input GT labels

  edm::InputTag l1GtDaqInputSource;
  edm::InputTag l1GtObjectMapSource;

  // Input digi labels

  edm::InputTag rctSourceEmulator;
  edm::InputTag rctSourceData;

  // Write events to an output file named in parameters
  bool writeOutputFile;
  std::string outputFileName;

  // tree
  TTree* my_tree;
  // TFile
  TFile *my_rootfile;

  int netpg;           // Ecal TPG
  int etpgRank[400];   // Ecal TPG
  int etpgEta[400];    // Ecal TPG
  int etpgPhi[400];    // Ecal TPG

  int nelectr;
  int el_iso[150];
  int el_rank[150];
  int el_crate[150];
  int el_card[150];
  int el_region[150];
  int el_phi[150];
  int el_eta[150];

  int nelectrD;
  int el_isoD[150];
  int el_rankD[150];
  int el_crateD[150];
  int el_cardD[150];
  int el_regionD[150];
  int el_phiD[150];
  int el_etaD[150];

  int nregions;
  int rgn_et[400];
  int rgn_ovfl[400];
  int rgn_tau[400];
  int rgn_fgr[400];
  int rgn_mip[400];
  int rgn_quiet[400];
  int rgn_isHf[400];
  int rgn_isHbHe[400];
  int rgn_Crate[400];
  int rgn_Card[400];
  int rgn_index[400];
  int rgn_phi[400];
  int rgn_eta[400];


  int nbits ;
  int trigbit[150] ;

  double scaleFactor;
};

#endif 

