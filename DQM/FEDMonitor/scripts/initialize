#!/usr/bin/perl

################################################################################
#
# initialize
# ----------
#
# Setup XDAQ filter farm applications for testing, and generate scripts to
# control execution.
#
#                          03/28/2007 Philipp Schieferdecker <schiefer@fnal.gov>
################################################################################


# welcome
print "\n============================================================";
print "\ninitialize ...";
print "\n============================================================\n";

# hostname, default
my $hostname = $ENV{"HOST"};
my $collectorhost;

# set variables
my $EPport = 40000;
my $DPport = 40001;

my $EPappname="evf::FUEventProcessor";

my $EPlocalid=27;

my $EPlibpath = getLibraryPath("EventFilter/Processor");

my $EPlibname = "libEventFilterProcessor.so";

my $pwd = `pwd`; chomp $pwd;


#
# interpret command line
#
foreach $param (@ARGV) {
    if    ($hostname eq "fillme")    { $hostname=$param; }
    elsif ($param    eq "-host")     { $hostname="fillme"; }
    elsif ($param    gt "-collector"){ @tok = split(/=/, $param); $collectorhost = @tok[1]; }
    else { die ("Unknown parameter $param!\n"); }
}

print "hostname = $hostname\n";
print "collector = $collectorhost\n";

#
# make directories
#
print "make directories ...\n";
`mkdir log`            if (! -e "log");
`mkdir soap`           if (! -e "soap");
`mkdir xml`            if (! -e "xml");
`mkdir cfg`            if (! -e "cfg");


#
# make cfg files
#
print "make cfg files ...\n";

open(CFG,">./cfg/ep.cfg") or die ("Can't open file: $!\n");
print CFG makeCfgEp();
close(CFG);

open(CFG,">./cfg/client.cfg") or die ("Can't open file: $!\n");
print CFG makeCfgClient();
close(CFG);

# make source xml input

open(CFG,">./cfg/MESubscriptionList.xml") or die ("Can't open file: $!\n");
print CFG makeSubscriptionList();
close(CFG);
open(CFG,">./cfg/QualityTests.xml") or die ("Can't open file: $!\n");
print CFG makeQualityTests();
close(CFG);



#
# make XDAQ 'profile.xml'
#
print "make xdaq profile ...\n";

my @EXproperties = ("logUrl",  "string","console",
		    "logLevel","string","INFO");

my @HTTPproperties = ("documentRoot","string",$ENV{"XDAQ_DOCUMENT_ROOT"},
		      "aliasName","string","tmp",
		      "aliasPath","string","/tmp");

open (XML,">./xml/profile.xml") or die ("Can't open file: $!\n");
print XML makeXmlHeader();
print XML makeXmlProfileHeader();
print XML makeXmlAppHeader(0,"executive::Application",0,"executive");
print XML makeXmlAppProperties("Executive",@EXproperties);
print XML makeXmlAppTrailer(0,$ENV{"XDAQ_ROOT"}."/lib","libexecutive.so");
print XML makeXmlAppHeader(0,"pt::http::PeerTransportHTTP",1);
print XML makeXmlAppProperties("pt::http::PeerTransportHTTP",@HTTPproperties);
print XML makeXmlAppTrailer(0,$ENV{"XDAQ_ROOT"}."/lib","libpthttp.so");
print XML makeXmlAppHeader(0,"pt::fifo::PeerTransportFifo",8);
print XML makeXmlAppTrailer(0,$ENV{"XDAQ_ROOT"}."/lib","libptfifo.so");
print XML makeXmlAppHeader(0,"xrelay::Application",4);
print XML makeXmlAppTrailer(0,$ENV{"XDAQ_ROOT"}."/lib","libxrelay.so");
print XML makeXmlAppHeader(0,"hyperdaq::Application",3);
print XML makeXmlAppTrailer(0,$ENV{"XDAQ_ROOT"}."/lib","libhyperdaq.so");
print XML makeXmlProfileTrailer();



#
# make  xdaq configuration file 'evf.xml'
#
print "make xdaq configuration ...\n";

my @EPproperties = ("parameterSet", "string","file:$pwd/cfg/ep.cfg",
		    "collReconnSec","integer","-1",
		    "hasSharedMemory","boolean","false");
my @DPproperties = ("parameterSet", "string","file:$pwd/cfg/client.cfg",
		    "collReconnSec","integer","-1",
		    "hasSharedMemory","boolean","false");

open (XML,">./xml/evf.xml") or die ("Can't open file: $!\n");
print XML makeXmlHeader();
print XML makeXmlPartitionHeader();
print XML makeXmlComm(@apps);


# EP context
    print XML makeXmlContextHeader("EP",$hostname,$EPport);
    print XML makeXmlAppHeader(1,$EPappname,$EPlocalid);
    print XML makeXmlAppProperties($EPappname,@EPproperties);
    print XML makeXmlAppTrailer(1,$EPlibpath,$EPlibname);
    print XML makeXmlContextTrailer();

# Client context
    print XML makeXmlContextHeader("DP",$hostname,$DPport);
    print XML makeXmlAppHeader(1,$EPappname,$EPlocalid);
    print XML makeXmlAppProperties($EPappname,@DPproperties);
    print XML makeXmlAppTrailer(1,$EPlibpath,$EPlibname);
    print XML makeXmlContextTrailer();


print XML makeXmlPartitionTrailer();
close (XML);


#
# make soap command xml files
#
print "make soap command files ...\n";

my @commands = ('Configure','Enable','Stop','Halt' );

foreach  (@commands) {
    open(CMD,">./soap/$_"."EP.xml") or die ("Can't open file: $!\n");
    print CMD makeSoapCommand($hostname,$EPport,$EPlocalid,$_);
    close(CMD);
    open(CMD,">./soap/$_"."DP.xml") or die ("Can't open file: $!\n");
    print CMD makeSoapCommand($hostname,$DPport,$EPlocalid,$_);
    close(CMD);
}


#
# make control scripts
#
print "make control scripts ...\n";

# configure
open (CTL,">configure") or die ("Can't open file: $!\n");
print CTL "#!/usr/bin/perl\n\n";
print CTL makeCtlCommand("Configure",$EPappname,"EP",$hostname,$EPport,0);
print CTL makeCtlCommand("Configure",$EPappname,"DP",$hostname,$DPport,0);

close (CTL);
`chmod +x configure`;

# enable
open (CTL,">enable") or die ("Can't open file: $!\n");
print CTL "#!/usr/bin/perl\n\n";
print CTL makeCtlCommand("Enable",$EPappname,"EP",$hostname,$EPport,0);
print CTL makeCtlCommand("Enable",$EPappname,"DP",$hostname,$DPport,0);

close (CTL);
`chmod +x enable`;

# stop
open (CTL,">stop") or die ("Can't open file: $!\n");
print CTL "#!/usr/bin/perl\n\n";
print CTL makeCtlCommand("Stop",$EPappname,"EP",$hostname,$EPport,5);
print CTL makeCtlCommand("Stop",$EPappname,"DP",$hostname,$DPport,5);

close (CTL);
`chmod +x stop`;

# halt
open (CTL,">halt") or die ("Can't open file: $!\n");
print CTL "#!/usr/bin/perl\n\n";
print CTL makeCtlCommand("Halt",$EPappname,"EP",$hostname,$EPport,1);
print CTL makeCtlCommand("Halt",$EPappname,"DP",$hostname,$DPport,1);

close (CTL);
`chmod +x halt`;

# destroy
open (CTL,">destroy") or die ("Can't open file: $!\n");
print CTL makeCtlDestroy();
close (CTL);
`chmod +x destroy`;



#
# start processes
#

print "\nstart xdaq.exe on $hostname:$EPport\n";
`nice -n 15 xdaq.exe -h $hostname -p $EPport -e xml/profile.xml -c xml/evf.xml >& log/$hostname.$EPport.log &`;
print "\nstart xdaq.exe on $hostname:$DPport\n";
`nice -n 15 xdaq.exe -h $hostname -p $DPport -e xml/profile.xml -c xml/evf.xml >& log/$hostname.$DPport.log &`;



################################################################################
################################################################################
## sub routines
################################################################################
################################################################################


################################################################################
sub getLibraryPath
{
    my ($pkg) = (@_);
    
    my $cmssw_base         = $ENV{"CMSSW_BASE"};
    my $cmssw_release_base = $ENV{"CMSSW_RELEASE_BASE"};

    my $result = "/lib/" . $ENV{"SCRAM_ARCH"};
    
    if (-e "$cmssw_base/src/$pkg") {
	$result = $cmssw_base . $result;
    }
    else {
	$result = $cmssw_release_base . $result;
    }

    return $result;
}

################################################################################
sub makeSoapCommand
{
    my ($hostname,$port,$localid,$command) = @_;
    
    my $result="";
    
    $result = $result . "<SOAP-ENV:Envelope\n";
    $result = $result . "  SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"\n";
    $result = $result . "  xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\n";
    $result = $result . "  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n";
    $result = $result . "  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n";
    $result = $result . "  xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\">\n\n";
    $result = $result . "<SOAP-ENV:Header>\n";
    $result = $result . "  <xr:relay SOAP-ENV:actor=\"http://xdaq.web.cern.ch/xdaq/xsd/2004/XRelay-10\"\n";
    $result = $result . "    xmlns:xr=\"http://xdaq.web.cern.ch/xdaq/xsd/2004/XRelay-10\">\n";
    $result = $result . "  <xr:to url=\"http://$hostname:$port\" urn=\"urn:xdaq-application:lid=$localid\"/>\n";
    $result = $result . "</xr:relay>\n";
    $result = $result . "</SOAP-ENV:Header>\n\n";
    $result = $result . "<SOAP-ENV:Body>\n";
    $result = $result . "  <xdaq:$command xmlns:xdaq=\"urn:xdaq-soap:3.0\"></xdaq:$command>\n";
    $result = $result . "</SOAP-ENV:Body>\n\n";
    $result = $result . "</SOAP-ENV:Envelope>\n";
    
    return $result;
}


################################################################################
sub makeCfgEp
{
    my $result="";
    
    $result = $result . "process FU = {\n\n";


    $result = $result . "  // options\n";
    $result = $result . "  untracked PSet options =\n";
    $result = $result . "  {\n";
    $result = $result . "    untracked vstring Rethrow = " .
	"{\"ProductNotFound\",\"TooManyProducts\"," .
	"\"TooFewProducts\"}\n";
    $result = $result . "    untracked bool    makeTriggerResults = true\n";
    $result = $result . "  }\n\n";

    $result = $result . "  // source\n";
    $result = $result . "  source = DaqSource\n";
    $result = $result . "  {\n";
    $result = $result . "    untracked uint32 evtsPerLS = 100\n";
    $result = $result . "    string          reader    = \"DaqFakeReader\"\n";
    $result = $result . "    PSet pset = {} \n";
    $result = $result . "  }\n\n";
    $result = $result . "  // paths\n";
    $result = $result . "  path p1 = { ecs, fedmon }\n";

    $result = $result . "  service = DaqMonitorROOTBackEnd { }\n";

    $result = $result . "  module fedmon = FEDMonitor {}\n";
    $result = $result . "  module ecs = EventCoordinatesSource {}\n";

    $result = $result . "  service = MonitorDaemon {\n";
    $result = $result . "    untracked string DestinationAddress=\"".$collectorhost."\"\n";
    $result = $result . "    untracked bool AutoInstantiate = true\n";
    $result = $result . "    untracked string NameAsSource=\"EP0\"\n";
    $result = $result . "  }\n\n";
    $result = $result . "  service = MessageLogger {\n";
    $result = $result . "     untracked vstring destinations = { \"cout\" }\n";
    $result = $result . "     untracked PSet cout = { untracked string threshold = \"FATAL\" }\n";
    $result = $result . "  }\n\n";
    $result = $result . "}\n";
    
    return $result;
}


################################################################################

sub makeCfgClient
{
    my $result="";
    
    $result = $result . "process FEDMON = {\n\n";


    $result = $result . "  // source\n";
    $result = $result . "  source = DQMEventSource\n";
    $result = $result . "  {\n";
    $result = $result . "    untracked string server = \"".$collectorhost."\"\n";
    $result = $result . "    untracked string meSubscriptionList = \"cfg/MESubscriptionList.xml\"\n";
    $result = $result . "    untracked string qtList = \"cfg/QualityTests.xml\"\n";
    $result = $result . "    untracked string iRunMEName = \"Collector/EP0/EventInfo/iRun\"\n";
    $result = $result . "    untracked string iEventMEName = \"Collector/EP0/EventInfo/iEvent\"\n";
    $result = $result . "    untracked string timeStampMEName = \"Collector/EP0/EventInfo/timeStamp\"\n";
    $result = $result . "    untracked bool actAsServer = true\n";
    $result = $result . "  }\n\n";
    $result = $result . "  // paths\n";
    $result = $result . "  path p1 = { fedcli }\n";

    $result = $result . "  service = DaqMonitorROOTBackEnd { }\n";
    $result = $result . "  service = ModuleWebRegistry { }\n";

    $result = $result . "  module fedcli = FEDMonitorClient {\n";
    $result = $result . "     untracked bool doCollation = true\n";
    $result = $result . "  }\n";

    $result = $result . "  service = MessageLogger {\n";
    $result = $result . "     untracked vstring destinations = { \"cout\" }\n";
    $result = $result . "     untracked PSet cout = { untracked string threshold = \"FATAL\" }\n";
    $result = $result . "  }\n\n";
    $result = $result . "}\n";
    
    return $result;
}

sub makeSubscriptionList
{
    my $result="";
    
    $result = $result . "<MESUBSCRIPTION>\n";
    $result = $result . "     <ME get=\"yes\">*</ME>\n";
    $result = $result . "</MESUBSCRIPTION>\n";
    return $result;
}

sub makeQualityTests
{
    my $result="";
    $result = $result . "<TESTSCONFIGURATION>\n";
    $result = $result . "<QTEST name=\"MeanWithinExpected:RMS\" activate=\"true\">\n";
    $result = $result . "        <TYPE>MeanWithinExpected</TYPE>\n";
    $result = $result . "        <PARAM name=\"error\">.05</PARAM>\n";
    $result = $result . "        <PARAM name=\"warning\">.1</PARAM>\n";
    $result = $result . "        <PARAM name=\"mean\">1000.0</PARAM>\n";
    $result = $result . "        <PARAM name=\"useRMS\">1</PARAM>\n";
    $result = $result . "        <PARAM name=\"useSigma\">0</PARAM>\n";
    $result = $result . "        <PARAM name=\"useRange\">0</PARAM>\n";
    $result = $result . "        <PARAM name=\"xmin\">0</PARAM>\n";
    $result = $result . "        <PARAM name=\"xmax\">0</PARAM>\n";
    $result = $result . "</QTEST>\n";
    $result = $result . "<LINK name=\"*FEDs/Collated/*\">\n";
    $result = $result . "        <TestName activate=\"true\">MeanWithinExpected:RMS</TestName>\n";
    $result = $result . "</LINK>\n";
    $result = $result . "</TESTSCONFIGURATION>\n";

    return $result;
}

################################################################################
sub makeXmlHeader
{
    my $result = "";
    
    return "<?xml version='1.0'?>\n\n";
    $result = $result . "<xc:Partition\n";
    $result = $result . "  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n";
    $result = $result . "  xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\"\n";
    $result = $result . "  xmlns:xc=\"http://xdaq.web.cern.ch/xdaq/xsd/2004/XMLConfiguration-30\">\n\n";
    
    return $result;
}


################################################################################
sub makeXmlPartitionHeader
{
    my $result = "";
    
    $result = $result . "<xc:Partition\n";
    $result = $result . "  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n";
    $result = $result . "  xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\"\n";
    $result = $result . "  xmlns:xc=\"http://xdaq.web.cern.ch/xdaq/xsd/2004/XMLConfiguration-30\">\n\n";
    
    return $result;
}


################################################################################
sub makeXmlProfileHeader
{
    return 
	"<xp:Profile\n" .
	"  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n" .
	"  xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\"\n" .
	"  xmlns:xp=\"http://xdaq.web.cern.ch/xdaq/xsd/2005/XMLProfile-10\">\n\n";
}


################################################################################
sub makeXmlComm
{
    my $result = "";
    
    $result = $result . "  <!-- communication protocoll -->\n";
    $result = $result . "  <i2o:protocol xmlns:i2o=" .
	"\"http://xdaq.web.cern.ch/xdaq/xsd/2004/I2OConfiguration-30\">\n";
    
    while (@_>0) {
	my $appname  = shift (@_);
	my $localid  = shift (@_);
	$result = $result . "    <i2o:target class=\"" . $appname .
	                    "\" instance=\"0\" tid=\"" . $localid . "\"/>\n";
    }
    $result = $result . "  </i2o:protocol>\n\n";
    
    return $result;
}


################################################################################
sub makeXmlContextHeader
{
    my ($contextname,$hostname,$port) = @_;

    my $result = "";
    
    $result = $result . "<!-- " . $contextname . " CONTEXT -->\n";
    $result = $result . "  <xc:Context url=\"http://$hostname:$port\">\n\n";
    
    return $result;
}



################################################################################
sub makeXmlEndpoint
{
    my ($hostname,$port) = @_;

    my $result = "";
    $result = $result . "    <xc:Endpoint hostname=\"" . $hostname .
	"\" network=\"tcp0\" " .
	"port=\"" .$port . "\" protocol=\"tcp\" " .
	"service=\"i2o\"></xc:Endpoint>\n\n";
    return $result;
}


################################################################################
sub makeXmlAppHeader
{
    my ($inContext,$appname,$localid) = @_;

    my $ns = "xc"; if (!$inContext) { $ns = "xp"; }
    
    my $result = "    <$ns:Application class=\"" . $appname . 
	"\" id=\"" . $localid . "\" instance=\"0\" network=\"local\">\n";
    return $result;
}


################################################################################
sub makeXmlAppProperties
{
    my $result = "";

    my $appname = shift (@_);

    $result = $result . "      <properties xmlns=\"urn:xdaq-application:" . $appname .
	                            "\" xsi:type=\"soapenc:Struct\">\n";
    while (@_>0) {
	my $name  = shift (@_);
	my $type  = shift (@_);
	my $value = shift (@_);
	$result = $result . "        <" . $name . " xsi:type=\"xsd:" . $type . "\">" . $value . "</" . $name . ">\n";
    }
    $result = $result . "      </properties>\n";
    
    return $result;
}


################################################################################
sub makeXmlUnicast
{
    my ($appname) = (@_);
    return "      <xc:Unicast class=\"" . $appname . "\" network=\"tcp0\"></xc:Unicast>\n";
}


################################################################################
sub makeXmlAppTrailer
{
    my ($inContext,$libpath,$libname) = @_;

    my $ns = "xc"; if (!$inContext) { $ns = "xp"; }
    
    my $result = "";
    
    $result = $result . "    </$ns:Application>\n";
    $result = $result . "    <$ns:Module>" . $libpath .
	                "/" . $libname . "</$ns:Module>\n\n";
    
    return $result;
}


################################################################################
sub makeXmlContextTrailer
{
    return "  </xc:Context>\n\n\n";
}


################################################################################
sub makeXmlProfileTrailer
{
    return "</xp:Profile>\n";
}


################################################################################
sub makeXmlPartitionTrailer
{
    return "</xc:Partition>\n";
}


################################################################################
sub makeCtlDestroy
{
    my $result = "";

    my $cmd = "killall xdaq.exe";

    $result = $result . "#!/usr/bin/perl\n\n";
    $result = $result . "print \"$cmd ...\\n\";\n\n";
    $result = $result . "`$cmd`;\n\n";
    $result = $result . "print \"remove files and dirs ...\n\";\n\n";
    $result = $result . "`rm -rf cfg/ soap/ xml/ log/ /tmp/sm " .
	"configure enable halt stop gennums.txt summaryCatalog.txt test.root`;\n\n";
    $result = $result . "print \"FUShmCleanUp_t ...\\n\";\n\n";
    $result = $result . "`FUShmCleanUp_t`;\n\n";
    $result = $result . "print \"XDAQ session destroyed!\\n\";\n\n";
    $result = $result . "`rm destroy`;\n";
    
    return $result;
}


################################################################################
sub makeCtlCommand
{
    my ($cmd,$appname,$appabrev,$host,$port,$sleep) = (@_);

    my $result = "";
    
    $result = $result."print \"\\n===============================================\";\n";
    $result = $result."print \"\\n$cmd the $appname ($appabrev)...\";\n";
    $result = $result."print \"\\n\===============================================\";\n";
    $result = $result."my \$result = `".makeCurlCommand($cmd,$appabrev,$host,$port)."`;\n";
    $result = $result."print \"\\n\$result\\n\\n\";\n";
    if ($sleep>0){
	$result = $result . "\n`sleep $sleep`;\n";
    }
    $result = $result."\n";

    return $result;
}


################################################################################
sub makeCurlCommand
{
    my ($cmd,$appabrev,$host,$port) = @_;
    my $pwd = `pwd`; chomp($pwd);
    return 
	"curl --stderr /dev/null -H " .
	"\"SOAPAction: urn:xdaq-application:lid=4\" " .
	"-d @" . $pwd . "/soap/" . $cmd . $appabrev . ".xml " .
	"http://" . $host . ":" . $port;
}
