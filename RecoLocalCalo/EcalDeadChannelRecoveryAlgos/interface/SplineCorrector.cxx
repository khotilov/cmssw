//
// Original Author:  Georgios Daskalakis , Georgios.Daskalakis@cern.ch
//         Created:  Fri Mar 30 18:15:12 CET 2007
//         
//
//
//


#include "SplineCorrector.h"
#include <cmath>



//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



double SplineCorrector::value(int DeadCrystal, int DeadCrystalEta, int estimE, double estimX, double estimY) {

  double result=0.0;
  index = DeadCrystal;

  switch(estimE) 
    {
    case 50:
      SplE_50(); break;
    default:
      SplE_50(); break;
    }//end switch

  //==================
  int PDIM = 5;
  for (int iy=0 ; iy<PDIM ; iy++){
    for (int ix=0 ; ix<PDIM ; ix++){
      int h = iy*PDIM + ix;
      result = result + constants[h]*pow(estimX,ix)*pow(estimY,iy);
    }
  }
  //==================
  
  return result;
  
}



//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




void SplineCorrector::SplE_50(){
 
  double SPL0[25] ={ 0.000808627, -3.05852e-05, 2.17391e-06, -1.31667e-07, -9.41445e-09, -3.85047e-05, 4.5163e-06, 9.19387e-07, -2.64019e-08, -1.51039e-08, 4.64026e-06, -6.81484e-08, -1.71578e-07, 1.1684e-09, 1.1189e-09, 1.66413e-08, -5.32805e-08, -1.58512e-08, 8.22897e-10, 2.53774e-10, -5.51663e-08, -3.31232e-09, 2.25095e-09, 3.37961e-11, -1.29309e-11 };
  double SPL1[25] ={ 0.00208682, -0.000132566, 6.61433e-06, -1.66698e-07, -2.70472e-08, -6.76477e-05, 5.19987e-06, -2.64511e-07, 1.74513e-08, 3.57425e-10, 4.9769e-07, -2.21649e-07, -2.21343e-07, 3.90468e-09, 3.52512e-09, 5.67208e-08, 1.10957e-08, -1.84092e-09, -2.66792e-10, 3.97516e-11, -1.11506e-09, 3.75449e-09, 2.87343e-09, -6.31545e-11, -4.59858e-11 };
  double SPL2[25] ={ 0.00280094, -0.000220477, 7.61518e-06, -1.24689e-08, 8.9841e-09, 4.9373e-06, -2.39341e-06, 4.31855e-08, 2.82811e-08, 3.76309e-10, -5.09845e-06, 7.71482e-07, 1.26142e-07, -1.18232e-08, -9.95654e-10, -6.65053e-09, 3.11787e-08, 1.33179e-09, -3.91254e-10, -3.40671e-11, 5.17007e-08, -7.48223e-09, -1.74605e-09, 1.80649e-10, 8.17537e-12 };
  double SPL3[25] ={ 0.00186894, -0.000113079, 3.45616e-06, -1.48726e-07, 8.18949e-09, 6.23104e-05, -6.16458e-06, 5.26904e-07, -2.946e-09, -3.05926e-09, 1.40137e-06, -6.18209e-07, -7.15424e-09, 1.23453e-08, -4.09042e-10, -6.30174e-09, 1.58691e-08, -7.78943e-09, 5.12734e-11, 9.16525e-11, -1.46009e-08, 8.37361e-09, -2.19154e-10, -1.88134e-10, 9.59286e-12 };
  double SPL4[25] ={ 0.00072973, -3.04074e-05, 1.38365e-06, -1.4238e-07, -1.5429e-08, 4.26576e-05, -4.79789e-06, -1.18658e-06, 6.05696e-08, 1.773e-08, 2.23583e-06, 2.31795e-07, 8.59041e-08, 1.93837e-09, -1.34654e-09, -1.84551e-07, 4.81835e-08, 2.11682e-08, -1.03034e-09, -3.03185e-10, -2.66988e-08, -5.81882e-09, -1.57921e-09, 8.52794e-12, 2.5524e-11 };
  double SPL5[25] ={ 0.00225923, -8.40328e-05, 3.50612e-07, 7.10065e-08, 5.48893e-09, -0.000153224, 7.99214e-06, 2.16855e-07, -2.52152e-08, -1.851e-09, 5.85988e-06, -2.12755e-07, -9.6969e-08, 8.17059e-10, 7.64206e-10, 1.67447e-07, -1.26419e-08, -7.89125e-09, 4.38894e-10, 7.70178e-11, -2.758e-08, 1.31112e-09, 2.20411e-09, -5.98719e-11, -2.07084e-11 };
  double SPL6[25] ={ 0.010581, -0.000830595, 3.95151e-05, -9.71733e-07, -2.02802e-08, -0.000822393, 0.00011299, -6.69309e-06, 1.58028e-07, -7.50866e-09, 4.04355e-05, -9.81173e-06, 1.04548e-06, -1.12773e-08, -4.70838e-09, -4.95083e-07, 3.34279e-07, -9.39786e-08, 3.26264e-09, 5.8598e-10, -4.10046e-08, 1.4287e-08, 9.29857e-10, -3.55163e-10, 1.96613e-11 };
  double SPL7[25] ={ 0.0277938, -0.00505134, 0.000699373, -4.07987e-05, -1.82042e-07, 1.18946e-05, -4.59118e-05, 1.15459e-05, 1.82354e-06, -3.16048e-07, -9.0265e-05, 1.76358e-05, -2.98335e-06, 8.16141e-07, -7.23851e-08, 7.27394e-07, 6.56123e-07, -1.97964e-07, -2.33225e-08, 4.57311e-09, 3.56818e-07, 2.23592e-07, -4.92948e-08, -1.15237e-08, 1.71079e-09 };
  double SPL8[25] ={ 0.00917689, -0.000727298, 3.57534e-05, -1.05976e-06, -1.8346e-08, 0.000766305, -0.000112759, 9.7799e-06, -4.63502e-07, 3.23774e-09, 3.79176e-05, -1.015e-05, 1.32174e-06, -8.28813e-08, 2.44011e-09, 2.15623e-08, -1.86059e-07, 6.43931e-08, -5.54957e-09, 7.10938e-12, -8.83638e-08, 2.93176e-08, -7.1577e-10, -7.29875e-11, -2.79309e-11 };
  double SPL9[25] ={ 0.00192281, -6.95739e-05, 4.46339e-07, 1.19154e-07, -1.9963e-09, 0.000124828, -7.61766e-06, 1.21022e-07, 2.42121e-08, -2.32823e-10, 5.18011e-06, -5.44835e-08, 3.87314e-08, -3.67962e-09, -7.93181e-10, -4.10698e-08, 3.172e-08, -7.36576e-12, -3.48584e-10, -2.89312e-11, -2.89993e-08, -1.96465e-09, -5.40272e-10, 4.84103e-11, 1.07043e-11 };
  double SPL10[25] ={ 0.00357486, -1.30156e-05, -2.15484e-06, 6.93945e-08, 6.66713e-09, -0.000289775, 2.54956e-06, 1.11651e-06, -4.65335e-08, -9.96252e-09, 1.52292e-05, 4.11315e-07, -1.55046e-07, -5.94464e-09, 1.13499e-09, 3.45081e-08, -2.77521e-08, -1.60931e-08, 6.82901e-10, 2.28775e-10, -5.23087e-08, -5.30369e-09, 1.88091e-09, 5.55848e-11, -1.55379e-11 };
  double SPL11[25] ={ 0.0350363, -0.000209686, -0.000107325, 1.04982e-07, 2.34135e-07, -0.00640358, 6.35861e-05, 8.42575e-05, -1.07698e-07, -6.23809e-07, 0.000820742, -9.14475e-06, -1.75662e-05, 3.98061e-08, 1.47828e-07, -3.02585e-05, -1.27086e-08, -5.99917e-07, -9.45076e-09, 7.57444e-09, -1.81574e-06, 6.36006e-08, 2.06911e-07, 6.39433e-10, -2.08041e-09 };
  double SPL12[25] ={ 4.15555, 0.00221727, -0.0184402, 0.000325706, -0.000148055, -0.00169211, -0.00106088, 0.000135445, 1.40029e-05, -1.81494e-06, -0.0197025, 7.28002e-05, -0.000211815, -7.36958e-06, 5.92984e-06, -0.000242975, 9.97504e-06, -2.30273e-06, -3.3001e-07, 8.55296e-08, -0.000127555, -1.17792e-06, 5.53618e-06, 4.90769e-08, -6.47328e-08 };
  double SPL13[25] ={ 0.0295271, 1.10817e-05, -0.000117014, -7.23982e-07, 5.93992e-07, 0.00645712, 6.04184e-05, -9.57392e-05, -7.46451e-07, 7.4495e-07, 0.000969671, 1.13965e-05, -1.93273e-05, -1.15338e-07, 1.49388e-07, 2.5941e-05, -6.93786e-07, 7.52745e-07, 1.59774e-08, -1.01356e-08, -3.87653e-06, -1.5419e-07, 2.33615e-07, 2.4634e-09, -2.27077e-09 };
  double SPL14[25] ={ 0.00283126, -5.67062e-06, -1.97731e-06, 6.66842e-09, 8.18371e-09, 0.000226831, -4.36466e-07, -5.7895e-07, 7.66057e-09, 5.17664e-09, 9.70516e-06, -6.97868e-08, 1.53224e-08, -3.19662e-10, -5.92556e-10, -4.84971e-08, 1.00143e-08, 6.10836e-09, -1.38914e-10, -1.34216e-10, -2.33987e-08, 2.79484e-09, -5.32797e-10, -2.31404e-11, 8.13758e-12 };
  double SPL15[25] ={ 0.00259361, 8.59258e-05, 1.35625e-06, -9.25666e-08, -1.28208e-08, -0.000176238, -8.6806e-06, 4.45624e-07, 7.67677e-09, -7.32605e-09, 5.72408e-06, 1.75606e-07, -1.07175e-07, 3.84929e-09, 1.81342e-09, 7.82343e-08, 6.30961e-09, -5.95607e-09, -7.63664e-11, 8.3889e-11, -2.01921e-09, 1.91481e-09, 9.91407e-10, -3.81695e-11, -1.59097e-11 };
  double SPL16[25] ={ 0.0123164, 0.000959849, 4.53487e-05, 1.19939e-06, 5.73952e-09, -0.00099435, -0.000133258, -9.44888e-06, -5.83454e-07, -3.0346e-08, 4.44918e-05, 1.04466e-05, 1.37375e-06, 1.00241e-07, 4.28813e-09, -8.98264e-07, -4.44592e-07, -7.94037e-08, -3.308e-09, 2.11991e-10, 5.58387e-08, 2.56939e-09, -2.46319e-09, -2.84861e-10, -2.43852e-11 };
  double SPL17[25] ={ 0.03407, 0.00299839, 0.00128031, 8.0584e-05, -9.16723e-06, 0.000237605, -4.18687e-06, 2.2798e-05, 9.02548e-07, -2.97084e-07, -0.000131024, 0.000165187, -6.16745e-05, -3.16195e-06, 9.21117e-07, -2.94431e-07, 1.04017e-06, -2.27241e-07, -1.71593e-08, 3.57595e-09, 6.51382e-07, -2.53647e-06, 7.13994e-07, 4.19587e-08, -1.10382e-08 };
  double SPL18[25] ={ 0.0102509, 0.000734262, 3.00187e-05, 1.29818e-06, 9.11165e-08, 0.000812184, 0.000103064, 7.96367e-06, 5.08234e-07, 1.93344e-08, 2.72372e-05, 7.58099e-06, 1.3254e-06, 8.56515e-08, 8.04263e-10, 6.14782e-07, 2.10336e-07, 2.37162e-08, 1.77507e-09, 1.01506e-10, 1.14239e-07, -5.98787e-09, -7.90257e-09, -4.11125e-10, 2.07627e-11 };
  double SPL19[25] ={ 0.00201911, 6.32416e-05, 1.15602e-06, -6.99933e-08, -2.96687e-09, 0.000136142, 4.50978e-06, 4.20612e-07, 3.89833e-08, -6.43749e-09, 6.65547e-06, 5.36609e-07, -8.30491e-08, 1.15667e-09, 8.52634e-10, -7.42045e-08, 2.6329e-08, -2.95459e-09, -7.22898e-10, 4.42604e-11, -4.1987e-08, -4.77612e-09, 1.3012e-09, -2.33729e-11, -1.44024e-11 };
  double SPL20[25] ={ 0.000998375, 4.55418e-05, 3.40005e-06, 7.78439e-08, -4.16461e-08, -3.55123e-05, -8.81638e-07, -6.9768e-07, -4.468e-08, 6.75125e-09, 3.93512e-06, 3.1718e-07, -2.894e-07, -1.12594e-08, 5.10375e-09, -1.16412e-07, -3.39988e-08, 1.18203e-08, 6.63711e-10, -1.4861e-10, -4.63661e-08, -4.28453e-09, 4.6379e-09, 1.72486e-10, -7.95956e-11 };
  double SPL21[25] ={ 0.00240214, 0.000152197, 5.81605e-06, 6.90717e-08, -5.263e-09, -8.22523e-05, -8.71656e-06, -1.58445e-07, 2.71001e-08, -4.24154e-09, 9.79457e-07, 1.06085e-07, -4.38444e-08, -1.06931e-09, 8.47264e-10, 1.19497e-07, 3.73311e-08, -5.47014e-09, -6.68709e-10, 1.09876e-10, -3.00884e-09, -1.86626e-09, 2.70484e-10, 4.45991e-11, -5.57197e-12 };
  double SPL22[25] ={ 0.00336068, 0.0002556, 1.27903e-05, 2.3884e-07, -2.33781e-08, 1.04817e-05, 1.86079e-06, -4.86358e-07, -2.76741e-08, 5.57678e-09, -2.23803e-06, -8.26657e-07, -1.36977e-07, 7.14976e-09, 2.16052e-09, -8.45096e-08, -1.8352e-08, 1.30031e-08, 4.61104e-10, -1.41808e-10, 1.38158e-08, 6.5524e-09, 1.15838e-09, -8.18636e-11, -1.98012e-11 };
  double SPL23[25] ={ 0.00220748, 0.000134042, 7.5782e-06, 7.88468e-08, -3.95161e-08, 8.48309e-05, 7.10276e-06, 9.07284e-08, 8.63155e-09, 2.98591e-09, 1.59861e-06, 6.87255e-07, -2.21598e-07, -6.7487e-09, 3.40823e-09, -1.63218e-07, -4.65173e-09, 7.69121e-09, -6.11998e-11, -1.1412e-10, -1.09725e-08, -9.28261e-09, 2.88429e-09, 1.13071e-10, -4.30056e-11 };
  double SPL24[25] ={ 0.000804181, 3.27615e-05, 4.69109e-06, 5.65221e-08, -5.67136e-08, 4.74631e-05, 2.15452e-06, -6.73438e-07, 1.57058e-08, 9.79757e-09, 2.35687e-06, 1.37108e-07, -3.31748e-07, -2.95492e-09, 4.622e-09, -1.4458e-07, 7.98515e-10, 1.12256e-08, -1.50501e-10, -1.48223e-10, -3.02321e-08, 3.78616e-11, 4.59154e-09, 4.26242e-12, -6.22749e-11 };
  
  switch(index) {
  case 0:
    for(int j=0;j<25;j++)constants[j]=SPL0[j];break;
  case 1:
    for(int j=0;j<25;j++)constants[j]=SPL1[j];break;
  case 2:
    for(int j=0;j<25;j++)constants[j]=SPL2[j];break;
  case 3:
    for(int j=0;j<25;j++)constants[j]=SPL3[j];break;
  case 4:
    for(int j=0;j<25;j++)constants[j]=SPL4[j];break;
  case 5:
    for(int j=0;j<25;j++)constants[j]=SPL5[j];break;
  case 6:
    for(int j=0;j<25;j++)constants[j]=SPL6[j];break;
  case 7:
    for(int j=0;j<25;j++)constants[j]=SPL7[j];break;
  case 8:
    for(int j=0;j<25;j++)constants[j]=SPL8[j];break;
  case 9:
    for(int j=0;j<25;j++)constants[j]=SPL9[j];break;
  case 10:
    for(int j=0;j<25;j++)constants[j]=SPL10[j];break;
  case 11:
    for(int j=0;j<25;j++)constants[j]=SPL11[j];break;
  case 12:
    for(int j=0;j<25;j++)constants[j]=SPL12[j];break;
  case 13:
    for(int j=0;j<25;j++)constants[j]=SPL13[j];break;
  case 14:
    for(int j=0;j<25;j++)constants[j]=SPL14[j];break;
  case 15:
    for(int j=0;j<25;j++)constants[j]=SPL15[j];break;
  case 16:
    for(int j=0;j<25;j++)constants[j]=SPL16[j];break;
  case 17:
    for(int j=0;j<25;j++)constants[j]=SPL17[j];break;
  case 18:
    for(int j=0;j<25;j++)constants[j]=SPL18[j];break;
  case 19:
    for(int j=0;j<25;j++)constants[j]=SPL19[j];break;
  case 20:
    for(int j=0;j<25;j++)constants[j]=SPL20[j];break;
  case 21:
    for(int j=0;j<25;j++)constants[j]=SPL21[j];break;
  case 22:
    for(int j=0;j<25;j++)constants[j]=SPL22[j];break;
  case 23:
    for(int j=0;j<25;j++)constants[j]=SPL23[j];break;
  case 24:
    for(int j=0;j<25;j++)constants[j]=SPL24[j];break;
  default:
    std::cout<<" Error, not valid Dead Channel Number, Abort"<<std::endl;
    break;
  }//end switch
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
