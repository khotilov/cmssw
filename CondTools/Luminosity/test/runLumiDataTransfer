#!/usr/bin/env python
"""
runLumiDataTransfer

python script to generate the configuration for
and run EDAnalyzer LumiSectionDataPopCon 

"""
import sys,os,string,shutil,os.path
from ConfigParser import ConfigParser
from optparse import OptionParser

def writeLumiSectionDataPopConCfg(filename,cfgTemplate,rootFilename,
                                  jobreport,tagName,databaseConnect,
                                  logdbConnect,authenticationPath,
                                  allowForceFirstSince,debugMode):
   """
   generate configuration file for LumiSectionDataPopCon EDAnalyzer.
   filenames are all should be in absolute path
   """
   # copy the template file to the new cfg.py file
   shutil.copyfile(cfgTemplate,filename)
   # open the new cfg file and add the necessary lines
   f = open(filename, 'a')
   f.write('\n')
   f.write('process.lumidatatransfer.Source.lumiFileName="'+rootFilename+'"\n')
   if len(logdbConnect)==0:
      f.write('process.lumidatatransfer.loggingOn=False\n')
   else:
      f.write('process.PoolDBOutputService.logconnect="'+logdbConnect+'"\n')
   if allowForceFirstSince:
      f.write('process.lumidatatransfer.Source.allowForceFirstSince=True\n')
   f.write('process.lumidatatransfer.Source.authPath="'+authenticationPath+'"\n')
   f.write('process.PoolDBOutputService.DBParameters.authenticationPath="'+authenticationPath+'"\n')
   f.write('process.PoolDBOutputService.connect="'+databaseConnect+'"\n')
   f.write('process.PoolDBOutputService.toPut[0].tag="'+tagName+'"\n')
   f.write('process.MessageLogger.destinations=["'+jobreport+'"]\n')
   f.write('process.MessageLogger.'+jobreport+'=cms.untracked.PSet(threshold=cms.untracked.string("INFO"),noLineBreaks=cms.untracked.bool(True),noTimeStamps=cms.untracked.bool(True),INFO=cms.untracked.PSet(limit=cms.untracked.int32(0)),LumiReport=cms.untracked.PSet(limit=cms.untracked.int32(10000000)))\n')
   f.write('process.p = cms.Path(process.lumidatatransfer)')

def main():
   """
   Assumptions:
   inputdir is the working(run) dir default to currentdir
   authpath is default to inputdir
   tnsadminpath is default to $TNS_ADMIN if available, otherwise to inputdir
   inputTemplate is taken from cmsswsrc/CondTools/Luminosity/test

   outputdir is the job output dir default to currentdir
   output job config file is in outputdir
   output logfile is in outputdir
   """
   usage = "usage: \%prog [options] commandconfigfile"
   parser = OptionParser(usage=usage)
   parser.add_option("-f","--filename",action="store",dest="rootfilename",
                     help="path and name to lumi root file (REQUIRED)")
   parser.add_option("-t","--tagname",action="store",dest="tagname",
                     help="tag name (REQUIRED)")
   parser.add_option("-c","--connect",action="store",dest="connect",
                     help="connect string to database (REQUIRED)")
   parser.add_option("-P","--authPath",action="store",dest="authpath",
                     help="path to authentication file default to inputdir(OPTIONAL)")
   parser.add_option("-T","--TNSAdminPath",action="store",dest="tnsadminpath",
                     help="path to tnsadmin file default to TNS_ADMIN if available otherwise to inputdir(OPTIONAL)")
   parser.add_option("-i","--inputdir",action="store",dest="inputdir",
                     help="path to job input dir default to currentdir(OPTIONAL)")
   parser.add_option("-I","--inputtemplate",action="store",dest="inputtemplate",
                     help="template job configuration default to LumiMixedTransfer.py.template(OPTIONAL)")
   parser.add_option("-s","--cmsswsrc",action="store",dest="cmsswsrc",help="path to CMSSW/src directory default to $CMSSW_BASE/src (OPTIONAL)")
   parser.add_option("-l","--logdatabase",action="store",dest="logdatabase",
                     help="log database connect string (OPTIONAL)")
   parser.add_option("-o","--outputdir",action="store",dest="outputdir",
                     help="job output dir(OPTIONAL)")
   parser.add_option("-O","--outputfile",action="store",dest="outputfile",
                     help="job config file name default to inputtemplate strip of .template(OPTIONAL)")
   parser.add_option("-d","--dryrun",action="store_true",dest="dryrun",
                     help="dryrun mode-only write the config file (OPTIONAL)")
   parser.add_option("-a","--allowForceFirstSince",action="store_true",dest="allowforcefirstsince",help="set allowForceFirstSince parameter to True (OPTIONAL)")
   parser.add_option("-j","--jobreport",action="store",dest="jobreport",help="jobreport file name default to rawdatafilename.log(OPTIONAL)")
   
   parser.add_option("-v","--verbose",action="store_true",dest="verbose",
                     help="verbose mode")
   (options, args) = parser.parse_args()
   
   rootfilename=''
   tagname=''
   connect=''
   authpath=''
   inputTemplate=''
   inputtemplate='LumiMixedTransfer.py.template'
   logdatabase=''
   outputdir=os.getcwd()
   inputdir=os.getcwd()
   outputFilename=''
   dryrun=False
   allowForceFirstSince=False
   cmsswsrc=''
   tnsadminpath=''
   jobreport=''
   if os.environ.has_key('TNS_ADMIN'):
      tnsadminpath=os.environ['TNS_ADMIN']
      
   if os.environ.has_key('CMSSW_BASE'):
      cmsswsrc=os.path.join(os.environ['CMSSW_BASE'],'src')
      
   verbose=False
   
   if len(args)!=0:
      print 'parse parameters from config file ',args[0]
      Config=ConfigParser()
      Config.read(args[0])
      sectionName='TRANSFERTOEVT'
      try:
        if Config.has_option(sectionName,'authpath') :
           authpath=Config.get(sectionName,'authpath')
        if Config.has_option(sectionName,'tnsadminpath') :
           tnsadminpath=Config.get(sectionName,'tnsadminpath')
        if Config.has_option(sectionName,'inputdir') :
           if len(Config.get(sectionName,'inputdir'))!=0:
              inputdir=Config.get(sectionName,'inputdir')
        if Config.has_option(sectionName,'inputtemplate') :
           inputtemplate=Config.get(sectionName,'inputtemplate')
        if Config.has_option(sectionName,'cmsswsrc') :
           cmsswsrc=Config.get(sectionName,'cmsswsrc')
        if Config.has_option(sectionName,'logdatabase') :
           logdatabase=Config.get(sectionName,'logdatabase')
        if Config.has_option(sectionName,'outputdir') :
           if len(Config.get(sectionName,'outputdir'))!=0:
              outputdir=Config.get(sectionName,'outputdir')
        if Config.has_option(sectionName,'outputfile') :
           if len(Config.get(sectionName,'outputfile'))!=0:
              outputFilename=Config.get(sectionName,'outputfile')
           else:
              outputFilename=inputtemplate.split('.template')[0]
        else:
           outputFilename=inputtemplate.split('.template')[0]
        if Config.has_option(sectionName,'dryrun'):
           dryrun=Config.getboolean(sectionName,'dryrun')
        if Config.has_option(sectionName,'jobreport'):
           jobreport=Config.get(sectionName,'jobreport')
        if Config.has_option(sectionName,'allowforcefirstsince'):
           allowForceFirstSince=Config.getboolean(sectionName,'allowforcefirstsince')
        if Config.has_option(sectionName,'verbose'):
           verbose=Config.getboolean(sectionName,'verbose')
        if Config.has_option(sectionName,'rootfilename'):
           rootfilename=Config.get(sectionName,'rootfilename')
        else:
           raise ValueError, "option rootfilename is required"
        if Config.has_option(sectionName,'tagname'):
           tagname=Config.get(sectionName,'tagname')
        else:
           raise ValueError, "option tagname is required"
        if Config.has_option(sectionName,'dbconnect'):
           connect=Config.get(sectionName,'dbconnect')
        else:
           raise ValueError, "option dbconnect is required"
      except Exception,er:
        print str(er)
        sys.exit(2) 

   else: 
      if not options.rootfilename:
         parser.error('option -f or --filename is required')
      if not options.tagname:
         parser.error('option -t or --tagname is required')
      if not options.connect:
         parser.error('option -c or --connect is required')
      
      rootfilename=options.rootfilename
      tagname=options.tagname
      connect=options.connect
      if options.authpath:
         authpath=options.authpath
      if options.tnsadminpath:
         tnsadminpath=options.tnsadminpath
      if options.inputdir:
         inputdir=options.inputdir
      if options.cmsswsrc:
         cmsswsrc=options.cmsswsrc
      if options.logdatabase:
         logdatabase=options.logdatabase
      if options.outputdir:
         outputdir=options.outputdir
      if options.jobreport:
         jobreport=options.jobreport
      if options.inputtemplate:
         inputtemplate=options.inputtemplate
      if options.outputfile:
         outputFilename=options.outputfile
      else:
         outputFilename=inputtemplate.split('.template')[0]
      verbose=options.verbose
      dryrun=options.dryrun
      allowForceFirstSince=options.allowforcefirstsince
   if len(authpath)==0:
      authpath=inputdir
   if len(tnsadminpath)==0:
      tnsadminpath=inputdir
   if len(jobreport)==0:
      jobreport=os.path.basename(os.path.splitext(rootfilename)[0])
      if len(jobreport)==0: #last resort
         jobreport='jobreport'
   outputFilename=os.path.join(outputdir,outputFilename)
   inputTemplate=os.path.join(cmsswsrc,'CondTools','Luminosity','test',inputtemplate)
   
   if verbose:
      print 'rootfilename:\t',rootfilename
      print 'tagname:\t',tagname
      print 'connect:\t',connect
      print 'authpath:\t',authpath
      print 'tnsadminpath:\t',tnsadminpath
      print 'inputdir:\t',inputdir
      print 'inputtemplate:\t',inputtemplate
      
      print 'cmsswsrc:\t',cmsswsrc
      if len(logdatabase)==0:
         print 'logdatabase:\t logging off'
      else:
         print 'logdatabase:\t',logdatabase
      print 'outputdir:\t',outputdir
      if allowForceFirstSince:
         print 'allowForceFirstSince:\t True'
      if dryrun:
         print 'dryrun mode'
      print 'outputFilename\t',outputFilename
      print 'inputTemplate\t',inputTemplate
      print 'popconjobreport\t',jobreport
   writeLumiSectionDataPopConCfg(outputFilename,inputTemplate,rootfilename,jobreport,tagname,connect,logdatabase,authpath,allowForceFirstSince,verbose)
   if not dryrun:
      #print '====== running config file ',outputFilename
      #os.system('cmsRun '+outputFilename)
      currentdir=os.getcwd()
      os.chdir(cmsswsrc)
      (stdin,stdout_and_stderr)=os.popen4("scramv1 runtime -sh")
      lines=[]
      for line in stdout_and_stderr.readlines():
         if line.find("export LD_LIBRARY_PATH=")!=-1 or line.find("export PATH=")!=-1 or line.find("export PYTHONPATH=")!=-1:
            lines.append(line.split('\n')[0])
      lines.append(' '.join(['cmsRun',outputFilename]))
      os.chdir(outputdir)
      (stdin,stdout_and_stderr)=os.popen4(' '.join(lines))
      outfd=open(os.path.join(outputdir,'exestatus.txt'),'w',0)
      outfd.write( stdout_and_stderr.read())
      outfd.close()
      os.chdir(currentdir)
   else:
      print 'written cfg file as ',outputFilename
      
if __name__ == '__main__':
   main()

