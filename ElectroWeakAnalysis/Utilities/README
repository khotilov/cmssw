>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
UTILITIES in ElectroWeakAnalysis/Utilities:
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

src/PdfWeightProducer.cc
===========================
- Writes into the data structure a std::vector<double> containing the LHAPDF weights 
  PDF_user(i)/PDF__in_generated_sample for each event, where 
  PDF_user(i) corresponds to the PDF set chosen by the user in the configuration file
  and i runs over the total number of members in the set. These weights can be 
  easily used later to assign systematics. Example of usage:

      # Produce PDF weights (maximum is 3)
      process.pdfWeights = cms.EDProducer("PdfWeightProducer",
            PdfInfoTag = cms.untracked.InputTag("generator"),
            PdfSetNames = cms.untracked.vstring(
                    "cteq65.LHgrid"
                  , "MRST2006nnlo.LHgrid"
                  , "MRST2007lomod.LHgrid"
            )
      )

- WARNING AT CREATION TIME: From the 330 series on, full LHAPDF libraries are 
  shipped with CMSSW. However, the default libraries used in the release are 
  he "light" ones, leading to a very slow code. In order to run fast, 
  please follow the recipes provided in ElectroWeakAnalysis/Utilities/BuildFile
  and comment/uncomment the relevant lines there.

- A typical application is the determination of the PDF systematics. This is 
  implemented in "src/PdfSystematicsAnalyzer.cc". This analyzer counts the 
  processed events using PDF re-weighting, and assigns systematic 
  uncertainties on the rate according to the recipe described in
  hep-ph/0605240. Usage:

      # Count PDF-weighted events and collect uncertainties
      process.pdfDenominatorSystematics = cms.EDFilter("PdfSystematicsAnalyzer",
            PdfWeightTags = cms.untracked.VInputTag(
                    "pdfWeights:cteq65"
                  , "pdfWeights:MRST2006nnlo"
                  , "pdfWeights:MRST2007lomod"
            )
      )

- A test example for these utilities is "python/PdfSystematicsAnalyzer.py". There, 
  one counts re-weighted events before and after selection, which gives immediate
  access to the determination of PDF uncertainties on the acceptance for the 
  given process under study.


src/ISRWeightProducer.cc
============================
- Writes into the data structure a product containing the event weight ("double")
  to be applied to obtain an estimate of variations due to a modification of the 
  Z (or W) pt spectrum at the generator level. The input weights as a function 
  of the boson Pt are proovided via vectors in the configuration file.
  Example of usage:

      # Produce event weights according to generated boson Pt
      # Example corresponds to approximate weights to study
      # systematic effects due to ISR uncertainties (Z boson)
      process.isrWeight = cms.EDProducer("ISRWeightProducer",
            GenTag = cms.untracked.InputTag("generator"),
            ISRBinEdges = cms.untracked.vdouble(
                  0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.
                  , 10., 11., 12., 13., 14., 15., 16., 17., 18., 19.
                  , 20., 21., 22., 23., 24., 25., 26., 27., 28., 29.
                  , 30., 31., 32., 33., 34., 35., 36., 37., 38., 39.
                  , 40., 41., 42., 43., 44., 45., 46., 47., 48., 49.
                  , 999999.
            ),
            PtWeights = cms.untracked.vdouble(
                  0.800665, 0.822121, 0.851249, 0.868285, 0.878733
                  , 0.953853, 0.928108, 0.982021, 1.00659 , 1.00648
                  , 1.03218 , 1.04924 , 1.03621 , 1.08743 , 1.01951
                  , 1.10519 , 0.984263, 1.04853 , 1.06724 , 1.10183
                  , 1.0503  , 1.13162 , 1.03837 , 1.12936 , 0.999173
                  , 1.01453 , 1.11435 , 1.10545 , 1.07199 , 1.04542
                  , 1.00828 , 1.0822  , 1.09667 , 1.16144 , 1.13906
                  , 1.27974 , 1.14936 , 1.23235 , 1.06667 , 1.06363
                  , 1.14225 , 1.22955 , 1.12674 , 1.03944 , 1.04639
                  , 1.13667 , 1.20493 , 1.09349 , 1.2107  , 1.21073
            )
      )
     
- This weight information can be processed via the Analyzer
  "src/SimpleSystematicsAnalyzer.cc". A test example is 
  "python/SimpleSystematicsAnalyzer.py".

src/FSRWeightProducer.cc
============================
- Writes into the data structure a product containing the event weight ("double")
  for estimating uncertainties due to missing final state QED radiation terms in 
  PYTHIA for W->l nu and Z->ll. It produces the procuct of two factor:
      a) Factor to go from soft-collinear approach to exact O(alpha) 
         (from hep-ph/0303260, only sizable for W, and small in general)
      b) Factor to recover missing NLO QED terms 
         (using alpha(pt**2) instead of alpha(0))
  Example of usage:

      process.fsrWeight = cms.EDProducer("FSRWeightProducer",
            GenTag = cms.untracked.InputTag("generator"),
      )

- This weight information can be processed via the Analyzer
  "src/SimpleSystematicsAnalyzer.cc". A test example is 
  "python/SimpleSystematicsAnalyzer.py".

src/DistortedMuonProducer.cc
============================

- Writes into the data structure a new reco::Muon collection and its associated 
  reco::Track (innerTrack modified) collection after smearing and efficiency 
  effects. This new collection can be easily used as a realistic Monte Carlo 
  prediction for the latest steps of the analysis. One can provide the necessary 
  distortions as a function of pseudorapidity via vectors in the configuration file. 
  To include momentum distortions properly we require a previous matching between 
  reconstructed and generated muons using standard CMSSW matching utilities.  
  Example of usage:

      process.genMatchMap = cms.EDFilter("MCTruthDeltaRMatcherNew",
        src = cms.InputTag("muons"),
        matched = cms.InputTag("genParticles"),
        distMin = cms.double(0.15),
        matchPDGId = cms.vint32(13)
      )   

      process.distortedMuons = cms.EDFilter("DistortedMuonProducer",
        MuonTag = cms.untracked.InputTag("muons"),
        GenMatchTag = cms.untracked.InputTag("genMatchMap"),
        EtaBinEdges = cms.untracked.vdouble(-2.1,2.1), # one more entry than next vectors
        MomentumScaleShift = cms.untracked.vdouble(1.e-3),
        UncertaintyOnOneOverPt = cms.untracked.vdouble(2.e-4), #in [1/GeV]
        RelativeUncertaintyOnPt = cms.untracked.vdouble(1.e-3),
        EfficiencyRatioOverMC = cms.untracked.vdouble(0.99)
      )

- A simple example showing how to use this code is given in "python/distortedMuons.py".

src/DistortedMETProducer.cc
===========================

- Writes into the data structure a new reco::MET collection after distortion.
  This new collection can be easily used as a realistic Monte Carlo 
  prediction for (muon-uncorrected) MET at the latest steps of the analysis. 
  At present, only the simplest possibility of scaling MET and sum(ET) by 
  a global scale factor is implemented, and no matching with GenMET has been 
  tried yet. Example of usage:

      process.distortedMET = cms.EDFilter("DistortedMETProducer",
        MetTag = cms.untracked.InputTag("met"),
        MetScaleShift = cms.untracked.double(0.1)
      )

- A simple example showing how to use this code is given in "python/distortedMET.py".

