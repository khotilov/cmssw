//C++ includes
#include <vector>
#include <functional>

//ROOT includes
#include <Math/VectorUtil.h>

//CMSSW includes
#include "UserAnalysisCode/ZTauTauAnalysis/plugins/MuTkIsolation.h"
#include "DataFormats/TrackReco/interface/TrackFwd.h"
#include "TrackingTools/PatternTools/interface/Trajectory.h"
#include "TrackingTools/TrajectoryCleaning/interface/TrajectoryCleanerBySharedHits.h"
#include "TrackingTools/Records/interface/TrackingComponentsRecord.h"
#include "TrackingTools/TrajectoryState/interface/TrajectoryStateTransform.h"
#include "TrackingTools/PatternTools/interface/TransverseImpactPointExtrapolator.h"
#include "TrackingTools/PatternTools/interface/TSCPBuilderNoMaterial.h"
#include "TrackingTools/PatternTools/interface/TrajectoryFitter.h"
#include "RecoTracker/CkfPattern/interface/TransientInitialStateEstimator.h"
#include "RecoTracker/Record/interface/TrackerRecoGeometryRecord.h"
#include "DataFormats/GeometryVector/interface/GlobalPoint.h"
#include "DataFormats/GeometryVector/interface/GlobalVector.h"
#include "DataFormats/VertexReco/interface/Vertex.h"
#include <algorithm>
#include <Math/VectorUtil.h>
#include <TROOT.h>
#include <TSystem.h>
#include <TCanvas.h>
#include <cmath>
#include "TStyle.h"
#include "Math/Vector4D.h"
#include "HepMC/GenEvent.h"
#include "Math/GenVector/VectorUtil.h"
#include "TLorentzVector.h"
#include <string>
#include <vector>
#include <set>
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "SimDataFormats/Vertex/interface/SimVertexContainer.h"
#include "TLorentzVector.h"
#include <string>
#include <vector>
#include <set>
#include <TROOT.h>
#include <TSystem.h>
#include <TCanvas.h>
#include <cmath>
#include "Math/GenVector/LorentzVector.h"


using namespace std ;
using namespace ROOT::Math::VectorUtil ;

//MuTkIsolation::MuTkIsolation ()
//{
//}


MuTkIsolation::MuTkIsolation (const reco::Muon* muon,
				      const reco::TrackCollection* trackCollection)   :
  muon_(muon) ,
  trackCollection_(trackCollection)  
  
{
  muonCollection_ = 0; 
  extRadius_ = 0.25 ;//0.25 ;
  intRadius_ = 0.00 ;//0.015 
  ptLow_ = 0.5 ; 
  lip_ = 1. ; 
}

// MuTkIsolation::MuTkIsolation (const reco::Muon* muon, 
// 			    const reco::MuonCollection* muonCollection,
// 			    const reco::TrackCollection* trackCollection) : 
//   muon_(muon) ,
//   trackCollection_(trackCollection) ,
//   muonCollection_(muonCollection)  
// {
//   extRadius_ = 0.25 ;
//   intRadius_ = 0.015 ;
//   ptLow_ = 1.5 ; 
//   lip_ = 0.1 ; 
// }  

MuTkIsolation::~MuTkIsolation ()
{
}

void MuTkIsolation::setExtRadius (double extRadius)
{
  extRadius_ = extRadius ;
}

void MuTkIsolation::setIntRadius (double intRadius)
{  
  intRadius_ = intRadius ;
}

void MuTkIsolation::setPtLow (double ptLow)
{  
  ptLow_ = ptLow ;
}

void MuTkIsolation::setLip (double lip)
{  
  lip_ = lip ;
}

int MuTkIsolation::getNumberTracks () const
{  
  //counter for the tracks in the isolation cone
  int dummyCounter = 0 ;    

  //Take the muon track
  reco::TrackRef tmpTrack = muon_->track() ;
  math::XYZVector tmpMuonMomentumAtVtx = (*tmpTrack).innerMomentum () ; 

  for ( reco::TrackCollection::const_iterator itrTr  = (*trackCollection_).begin() ; 
                                              itrTr != (*trackCollection_).end()   ; 
	   			              ++itrTr ) 
    {
	math::XYZVector tmpTrackMomentumAtVtx = (*itrTr).innerMomentum () ; 
	double this_pt  = sqrt( tmpTrackMomentumAtVtx.Perp2 () );
	if ( this_pt < ptLow_ ) 
	  continue ;  
	if (fabs( (*itrTr).dz() - (*tmpTrack).dz() ) > lip_ )
          continue ;
	double dr = DeltaR(tmpTrackMomentumAtVtx,tmpMuonMomentumAtVtx) ;
	if ( fabs(dr) < extRadius_ && 
	     fabs(dr) >= intRadius_ )
	  ++dummyCounter ;       
    }//end loop over tracks                 
  //  cout<<"dummyCounter"<<dummyCounter<<endl;
  return dummyCounter ;
}

double MuTkIsolation::getPtTracks () const
{
  //dummy counter for the pT of tracks inside the cone
  double dummypT = 0. ;
  
  //Take the muon track
  reco::TrackRef tmpTrack = muon_->track() ;
  //float tmppt=muon_->pt();
  //cout<<"tmppt"<<tmppt<<endl;
  //double d0=tmpTrack->d0;
  //cout<<"d0"<<d0<<endl;
  math::XYZVector tmpMuonMomentumAtVtx = (*tmpTrack).innerMomentum () ; 

  for ( reco::TrackCollection::const_iterator itrTr  = (*trackCollection_).begin() ; 
                                              itrTr != (*trackCollection_).end()   ; 
	   			              ++itrTr) 
    {
      //cout<<"pt tracce "<<itrTr->pt()<<endl;
	math::XYZVector tmpTrackMomentumAtVtx = (*itrTr).innerMomentum () ; 
	double this_pt  = sqrt( tmpTrackMomentumAtVtx.Perp2 () );
	double dr = DeltaR(tmpTrackMomentumAtVtx,tmpMuonMomentumAtVtx) ;
	//cout<<"pt tracce e dr "<<this_pt<<" "<<dr<<endl;
	if ( this_pt < ptLow_ ) 
	  continue ;  
	if (fabs( (*itrTr).dz() - (*tmpTrack).dz() ) > lip_ )
          continue ;
	if ( fabs(dr) < extRadius_ && 
	     fabs(dr) >= intRadius_ )
	  {
	    //dummypT += this_pt ;
            //for (unsigned i = 0; i < muon_.size(); ++i ) {
	      if ( itrTr->recHitsSize() < 8 ) continue;// at least 5 hits in tracker
	      //math::LorentzVector track(itrTr->px(), itrTr->py(), itrTr->pz(), itrTr->p());
	      //if (itrTr->pt() < ptLow_ ) continue; // at least pt > ptMin
	      //float dR = DeltaR(tmpTrackMomentumAtVtx,tmpMuonMomentumAtVtx);
	      //if (dR > extRadius_ || dR < intRadius_  ) continue;  // within cone
	      //float z = itrTr->dz();
	      //float dz = tmpMuonMomentumAtVtx.z() - z;
	      //if ( fabs(dz) > 0.2 ) continue;  // Does not satisfy vertex constraint
	      //iso += fabs( track.pt() ) ;
	      //if (itrTr->chi2() >10) continue;
              //if (itrTr->pt() <1) continue;
              dummypT += this_pt;
	    }
	    
	//}
    }
  //cout<<"dummypT =PTSum= "<<dummypT<<endl;
  return dummypT ;
}

