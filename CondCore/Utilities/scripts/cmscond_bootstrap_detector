#!/usr/bin/env python
import os,os.path,string
import sys
import xml.parsers.expat
import fnmatch
from optparse import OptionParser

elementstack_l1=[]
elementstack_l2=[]
registry={}
def locate(pattern, root=os.curdir):
    '''Locate all files matching supplied filename pattern in and below
    supplied root directory.'''
    for path, dirs, files in os.walk(os.path.abspath(root)):
        for filename in fnmatch.filter(files, pattern):
            print os.path.join(path, filename)
            yield str(os.path.join(path, filename))

def start_element(name, attrs):
    if name=='detector':
        elementstack_l1.append(attrs)
    if name=='poolsetup':
        elementstack_l2.append(attrs)
    return

def fillregistry():
    idx=0
    for l1element in elementstack_l1:
         currentdetector=l1element['name']
         offlineconnect=l1element['offline_connect']
         detectormap={}
         detectormap['mapping']=[]
         detectormap['library']=''
         registry[currentdetector]=(offlineconnect,detectormap)
         idx=elementstack_l1.index(l1element)
         level2elements=elementstack_l2[idx]
         mappingdir=os.path.abspath(level2elements['mappingdir'])
         print mappingdir
         mappingfile=level2elements['mappingfile']
         print mappingfile
         result=[]
         if mappingfile=='*':
             for result in locate('*.xml'):
                 print 'result',result
                 print 'current detector ',
                 registry[currentdetector][1]['mapping'].append(result)
                 registry[currentdetector][1]['library']='lib'+level2elements['library']+'.so'
         else:
             a=mappingfile.split(' ')
             result=map(lambda x: os.path.join(mappingdir,x) ,a)
             print result
             registry[currentdetector][1]['mapping']=result
             registry[currentdetector][1]['library']='lib'+level2elements['library']+'.so'
    return

class bootstrap:
    def __init__(self):
        """
        Prepare schema for one or many database schema.
        usage: %prog [options]
        -f, --dbconfig : DB configuration file with absolute path(default hardcoded in CondTools/OracleDBA/dbconfig/dbconfiguration.xml)
        -P, --authPath : path to authentication.xml(default .)
        -c, --connect : connect string to DB to set up (default in dbconfig)
        -a, --all : Set up all schemas in DB configuration file(default)
        -D, --Detector : Set up only schema identified with given Detector entry in the DBConfiguration file
        --fake : Don't actually do anything, only print commands
        -v, --verbose: verbose mode
        -h, --help: print usage
        """
        self.__verbose=False
        self.__fake=False
        self.__all=True
        self.__registry={}
        self.__authpath='.'
        self.__commands=[]
    def parsedbconfig(self):
        """
        Parse dbconfig xml to fill in self.__registry
        """
        p = xml.parsers.expat.ParserCreate()
        p.StartElementHandler = start_element
        f=open('dbconfiguration.xml','r')
        p.ParseFile(f)
        print 'elementstack_l1',elementstack_l1
        print 'elementstack_l2',elementstack_l2
        fillregistry()
        print registry
        
    def parsecmdln(self):
        """
        Parse commandline
        """
        usage = "usage: \%prog [options] \n"
        parser = OptionParser()
        parser.add_option("-f","--dbconfig",action="store",dest="dbconfig",
                          help="( DB configuration file with absolute path required )")
        parser.add_option("-P","--authPath",action="store",dest="authpath",
                          help="path to authentication.xml(default .)")
        parser.add_option("-c","--connect",action="store",dest="connect",
                          help="DB to set up (default in dbconfig)")
        parser.add_option("-a","--all",action="store_true",dest="all",
                          help="Set up all schemas in DB configuration file(default)")
        parser.add_option("-D","--Detector",action="store",dest="Detector",
                          help="Set up only schema identified with given Detector entry in the DBConfiguration file")
        parser.add_option("--fake",action="store_true",dest="fake",
                          help="Don't actually do anything, only print commands")
        parser.add_option("-v","--verbose",action="store_true",dest="verbose",
                          help="verbose mode")
        (options, args) = parser.parse_args()
        

if __name__ == "__main__":
    b=bootstrap()
    b.parsedbconfig()
    print registry
             
