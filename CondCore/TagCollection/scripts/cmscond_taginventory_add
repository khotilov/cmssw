#!/usr/bin/env python
from ConfigParser import ConfigParser
from copy import copy
from optparse import OptionParser, Option, OptionValueError
import coral
from CondCore.TagCollection import Node,tagInventory
def stripws(myinput):
    result=('').join(myinput.split(' '))
    return result
def converttagdata(value):
    cleanvalue=stripws(value)
    mytagdata={}
    startbrack=cleanvalue.find('{')
    endbrack=cleanvalue.find('}')
    metadatastr=cleanvalue[startbrack+1:endbrack]
    mytagdata['tagname']=cleanvalue[0:startbrack]
    metadatalist=metadatastr.split(',')
    for pair in metadatalist:
        mydata=pair.split(':')
        mytagdata[mydata[0]]=mydata[1]
    return mytagdata
def check_tagdata(option, opt, value):
    try:
        return converttagdata(value)
    except ValueError:
        raise OptionValueError(
            "option %s: invalid tagdata: %r" % (opt, value))
class MyOption (Option):
    TYPES = Option.TYPES + ("tagdata",)
    TYPE_CHECKER = copy(Option.TYPE_CHECKER)
    TYPE_CHECKER["tagdata"] = check_tagdata
    
class tagInventoryBuilder:
    def __init__(self):
        """
        Class add entry in the tag inventory
        usage: %prog [options]
        -f, --file=filename: configuration file
        -c, --connect=connectstring: connection string to the tag DB (required)
        -u, --user=user: user name
        -p, --password=password: password
        -P, --path=path: path to authentication.xml
        -t, --tag=tagdata: \"tagname{pfn:string,objectname:string, recordname:string, labelname:string, timetype:string}\"
        -v, --verbose: switch on verbose mode
        -h, --help: print usage
        """
        self.__parser=OptionParser(option_class=MyOption)
        self.__connectstring=''
        self.__user=''
        self.__password=''
        self.__authpath='.'
        self.__tagdata={}
        self.__verbose=False
    def parsecmdln(self):
        """
        Parse commandline
        """
        usage = "usage: \%prog [options] \n"
        self.__parser.add_option("-f","--file",action="store",dest="filename",help="configuration file")
        self.__parser.add_option("-c","--connect",action="store",dest="connectstring",type="string",help="connection string to the tag DB")
        self.__parser.add_option("-u","--user",action="store",dest="user",type="string",help="user name")
        self.__parser.add_option("-p","--password",action="store",dest="password",type="string",help="password")
        self.__parser.add_option("-P","--path",action="store",dest="authpath",type="string",help="path to authentication.xml")
        self.__parser.add_option("-t","--tagdata",action="store",dest="tagdata",type="tagdata",help=" \"tagname{pfn:string,objectname:string,recordname:string, labelname:string,timetype:string}\" ")
        self.__parser.add_option("-v","--verbose",action="store_true",dest="verbose",help="verbose mode")
        self.__parser.set_defaults(filename='')
        self.__parser.set_defaults(connectstring='')
        self.__parser.set_defaults(user='')
        self.__parser.set_defaults(password='')
        self.__parser.set_defaults(authpath='.')
        self.__parser.set_defaults(tagdata={})
        self.__parser.set_defaults(verbose=False)
        (options, args) = self.__parser.parse_args()
        if self.__parser.values.filename!='':
            configparser=ConfigParser()
            configparser.read(self.__parser.values.filename)
            print configparser.defaults()
            self.__connectstring=configparser.defaults()['connect']
            self.__user=configparser.defaults()['user']
            self.__password=configparser.defaults()['password']
            self.__authpath=configparser.defaults()['path']
            self.__tagdata=converttagdata(configparser.tagdata()['tagdata'])
            self.__verbose=configparser.defaults()['verbose']
        else:
            self.__connectstring=self.__parser.values.connectstring
            self.__user=self.__parser.values.user
            self.__password=self.__parser.values.password
            self.__authpath=self.__parser.values.authpath
            self.__tagdata=self.__parser.values.tagdata
            self.__verbose=self.__parser.values.verbose
        if self.__parser.values.verbose is True:
            print 'config file: ',self.__parser.values.filename
            print 'connectstring: ',self.__connectstring
            print 'user: ',self.__user
            print 'password: ',self.__password
            print 'authpath: ',self.__authpath
            print 'tagdata: ',self.__tagdata
    def addEntry(self):
        """
        Add entry in the tag inventory
        """
        if len(self.__tagdata) == 0 :
            #print 'nothing to add'
            return
        context = coral.Context()
        if self.__verbose is True:
            context.setVerbosityLevel( 'DEBUG' )
        else:
            context.setVerbosityLevel( 'ERROR' )
        svc = coral.ConnectionService( context )
        session = svc.connect( self.__connectstring,accessMode = coral.access_Update )
        try:
            inv=tagInventory.tagInventory(session)
            #print 'about to create table'
            if inv.existInventoryTable() is False:
                inv.createInventoryTable()
            tagentry=Node.LeafNode()
            tagentry.tagname=self.__tagdata['tagname']
            tagentry.objectname=self.__tagdata['objectname']
            tagentry.pfn=self.__tagdata['pfn']
            tagentry.recordname=self.__tagdata['recordname']
            if self.__tagdata.has_key('labelname'):
                tagentry.labelname=self.__tagdata['labelname']
            else:
                tagentry.labelname=''
            if self.__tagdata.has_key('timetype'):
                tagentry.timetype=self.__tagdata['timetype']
            else:
                tagentry.timetype='runnumber'
            if self.__tagdata.has_key('comment'):
                tagentry.comment=self.__tagdata['comment']
            else:
                tagentry.comment=''
            inv.addEntry(tagentry)
            del session
        except Exception, e:
            print str(e)
            del session
        
if __name__ == "__main__":
    tagbuilder=tagInventoryBuilder() 
    tagbuilder.parsecmdln()
    tagbuilder.addEntry()
    

