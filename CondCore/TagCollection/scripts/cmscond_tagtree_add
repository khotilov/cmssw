#!/usr/bin/env python
from ConfigParser import ConfigParser
from copy import copy
from optparse import OptionParser, Option, OptionValueError
import coral
from CondCore.TagCollection import Node,TagTree,tagInventory
def convertnodedata(value):
    mynodedata={}
    datastr=('').join(value.split(' '))
    startbrack=datastr.find('{')
    endbrack=datastr.find('}')
    metagdatastr=datastr[startbrack+1:endbrack]
    mynodedata['nodelabel']=datastr[0:startbrack]
    metadatalist=metagdatastr.split(',')
    for pair in metadatalist:
        mydata=pair.split(':')
        mynodedata[mydata[0]]=mydata[1]
    return mynodedata
def check_nodedata(option, opt, value):
    try:
        return convertnodedata(value)
    except ValueError:
        raise OptionValueError(
            "option %s: invalid nodedata: %r" % (opt, value))
class MyOption (Option):
    TYPES = Option.TYPES + ("nodedata",)
    TYPE_CHECKER = copy(Option.TYPE_CHECKER)
    TYPE_CHECKER["nodedata"] = check_nodedata
    
class tagTreeBuilder:
    def __init__(self):
        """
        Class add node in the tag tree
        usage: %prog [options]
        -f, --file=filename: configuration file
        -c, --connect=connectstring: connection string to the tag DB (required)
        -u, --user=user: user name
        -p, --password=password: password
        -P, --path=path: path to authentication.xml
        -n, --node=node: nodelabel{parentlabel:string,globalsince:unsigned long long,globaltill:unsigned long long}
        -l, --leafnode=leafnode: leafnodelabel{parentlabel:string}
        -v, --verbose: switch on verbose mode
        -h, --help: print usage
        """
        self.__parser=OptionParser(option_class=MyOption)
        self.__connectstring=''
        self.__user=''
        self.__password=''
        self.__authpath='.'
        self.__nodedata={}
        self.__isleaf=False
        self.__verbose=False
    def parsecmdln(self):
        """
        Parse commandline
        """
        usage = "usage: \%prog [options] \n"
#        parser = OptionParser(option_class=MyOption)
        self.__parser.add_option("-f","--file",action="store",dest="filename",help="configuration file")
        self.__parser.add_option("-c","--connect",action="store",dest="connectstring",type="string",help="connection string to the tag DB")
        self.__parser.add_option("-u","--user",action="store",dest="user",type="string",help="user name")
        self.__parser.add_option("-p","--password",action="store",dest="password",type="string",help="password")
        self.__parser.add_option("-P","--path",action="store",dest="authpath",type="string",help="path to authentication.xml")
        self.__parser.add_option("-n","--nodedata",action="store",dest="nodedata",type="nodedata",help="node data")
        self.__parser.add_option("-l","--isleaf",action="store_true",dest="isleaf",help="is leaf node")
        self.__parser.add_option("-v","--verbose",action="store_true",dest="verbose",help="verbose mode")
        self.__parser.set_defaults(filename='')
        self.__parser.set_defaults(connectstring='')
        self.__parser.set_defaults(user='')
        self.__parser.set_defaults(password='')
        self.__parser.set_defaults(authpath='.')
        self.__parser.set_defaults(nodedata={})
        self.__parser.set_defaults(verbose=False)
        self.__parser.set_defaults(isleaf=True)
        (options, args) = self.__parser.parse_args()
        if self.__parser.values.filename!='':
            configparser=ConfigParser()
            configparser.read(self.__parser.values.filename)
            print configparser.defaults()
            self.__connectstring=configparser.defaults()['connect']
            self.__user=configparser.defaults()['user']
            self.__password=configparser.defaults()['password']
            self.__authpath=configparser.defaults()['path']
            self.__nodedata=convertnodedata(configparser.defaults()['nodedata'])
            self.__isleaf=configparser.defaults()['isleaf']
            self.__verbose=configparser.defaults()['verbose']
        else:
            self.__connectstring=self.__parser.values.connectstring
            self.__user=self.__parser.values.user
            self.__password=self.__parser.values.password
            self.__authpath=self.__parser.values.authpath
            self.__nodedata=self.__parser.values.nodedata
            self.__isleaf=self.__parser.values.isleaf
            self.__verbose=self.__parser.values.verbose
        if self.__parser.values.verbose is True:
            print 'config file: ',self.__parser.values.filename
            print 'connectstring: ',self.__connectstring
            print 'user: ',self.__user
            print 'password: ',self.__password
            print 'authpath: ',self.__authpath
            print 'nodedata: ',self.__nodedata
            print 'isleaf: ',self.__isleaf
    def addEntry(self):
        """
        Add node in the tag tree
        """
        if len(self.__nodedata) == 0 :
            print 'nothing to add'
            return
        context = coral.Context()
        if self.__verbose is True:
            context.setVerbosityLevel( 'DEBUG' )
        else:
            context.setVerbosityLevel( 'ERROR' )
            
        svc = coral.ConnectionService( context )
        session = svc.connect( self.__connectstring,accessMode = coral.access_Update )
        try:
            mynode=Node.Node()
            if self.__isleaf is True:
                inv=tagInventory.tagInventory(session)
                print 'toget ',self.__nodedata['nodelabel']
                result=inv.getEntryByName(self.__nodedata['nodelabel'])
                print result
                mytree=TagTree.tagTree(session)
                mytree.createTagTreeTable()
                print 'about to insert'
                mynode.globalsince=0
                mynode.globaltill=0
                print 'parent',self.__nodedata['parentlabel']
                mynode.nodelabel='mytag'
                mynode.tagid=result.tagid
                print mynode
                mytree.insertNode(mynode,self.__nodedata['parentlabel'])
                print 'end'
            else:
                mynode=Node.Node()
                mynode.nodelabel=self.__nodedata['nodelabel']
                print mynode.nodelabel
                mynode.globalsince=self.__nodedata['globalsince']
                print mynode.globalsince
                mynode.globaltill=self.__nodedata['globaltill']
                print mynode.globaltill
                mytree=TagTree.tagTree(session)
                mytree.createTagTreeTable()
                mytree.insertNode(mynode,self.__nodedata['parentlabel'])
            del session
        except Exception, e:
            print str(e)
            del session
        
if __name__ == "__main__":
    tagtreebuilder=tagTreeBuilder() 
    tagtreebuilder.parsecmdln()
    tagtreebuilder.addEntry()


