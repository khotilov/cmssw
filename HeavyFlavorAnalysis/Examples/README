0. Recipe for the impatient
---------------------------

The following works (for me) on lxplus and elsewhere, both on 64bit and 32bit architectures
   cd SOMEWHERE
   scramv1 project CMSSW CMSSW_1_6_10
   cd CMSSW_1_6_10/src
   eval `scramv1 runtime -csh`
   project CMSSW
   cvs co AnalysisDataFormats/HeavyFlavorObjects
   cvs co HeavyFlavorAnalysis/Examples
   cd AnalysisDataFormats/HeavyFlavorObjects/
   make all
   cd ../../HeavyFlavorAnalysis/Examples
   scramv1 b
   cd test
   
Generate an example RECO file (it will contain Bs -> mu+ mu-)
   ln -s . scratch  # or somewhere else!
   mkdir scratch/ana
   cmsRun Bs2MuMu_GEN_SIM_DIGI_RECO.cfg 

Run EDAnalyzers and fill a tree
   cmsRun test.cfg

Look at the tree
   root
     gSystem->Load("../../../AnalysisDataFormats/HeavyFlavorObjects/lib/libAna00.so");
     .x test.C


Alternatively, run FAMOS in one go: 
   cmsRun HFExample.cfg
   root
     gSystem->Load("../../../AnalysisDataFormats/HeavyFlavorObjects/lib/libAna00.so");
     .x HFExample.C

A better way for analysis is with the compiled root class: 
   cd ../../../AnalysisDataFormats/HeavyFlavorObjects/test
   ../bin/runMyReader -f ../../../HeavyFlavorAnalysis/Examples/test/scratch/ana/hfexample.root
   root 
      TFile f("hfexample.defaults.root")
      m100->Draw()


1. Notes
--------

o Both FAMOS and FULLSIM examples are provided. FAMOS requires some
  change of name (e.g. muons -> paramMuons:ParamGlobalMuons). These
  are collected in data/HFFamosReplacements.cff. 

o A few cfg files in test provide the following options: 

  HFExample.cfg runs PYTHIA+GenFilters+FAMOS+NTP-dumping in one go. No
  CMSSW file is produced, only the ntuple. By default it contains B+
  -> J/psi K+. 

  test.cfg runs PYTHIA+FULLSIM. The output is a CMSSW file. 

o Be careful about MSEL=5 and MSEL=1: MSEL=1 is the only fully correct
  way to generate  events. However, it generates minimum  bias, so 99%
  of  all events  do not  contain a  b quark.  You can  filter  on the
  generator level with the bFilter (see data/mc.cff). 

  As  a fast  way  to  generate bbbar-events,  MSEL=5  is useful.   It
  generates only gluon-fusion events with bbbar in the final state. It
  runs  about 100  times  faster than  MSEL=1,  but the  b quarks  are
  produced  back-to-back;  in gluon  splitting  they  are  not at  all
  back-to-back.



2. Missing features
-------------------

Please  send an  email  to Urs  Langenegger  if you  would like  other
features.
