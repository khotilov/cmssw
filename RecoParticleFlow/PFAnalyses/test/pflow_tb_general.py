# Python script generated by stageEnergy.py
# For Testbeam data processing

# Jamie Ballin, Imperial College London
# December 2008

import FWCore.ParameterSet.Config as cms
import commands
process = cms.Process("PROD")
process.load("RecoParticleFlow.PFAnalyses.pflowProcessTestbeam_cff")
process.load("Geometry.CaloEventSetup.CaloGeometry_cff")
from RecoParticleFlow.PFAnalyses.RunDict import *

from RecoParticleFlow.PFAnalyses.pflowOptions_cfi import *

outputTree = "outputtree_" + fileLabel
outputFile = "reprocessed_" + fileLabel
logFile = "log_" + logLabel


if options.notracks <> 0:
    process.faketracks.justCreateEmptyCollections = cms.bool(True)
    print "Running in notrack mode"

specifiedE = energies[options.beamEnergy]

process.particleFlowRecHitHCAL.thresh_Barrel = cms.double(0.0)
process.particleFlowClusterHCAL.thresh_Seed_Barrel = cms.double(1.4)
process.particleFlowClusterHCAL.thresh_Barrel = cms.double(0.8)
process.particleFlowBlock.pf_chi2_ECAL_HCAL = cms.double(100.0)

result = []
if options.copyToTmp <> 0:
    map(lambda a : commands.getoutput('rfcp ' + '/castor/cern.ch/cms/store/h2tb2006/reco/v6/h2.000' + str(a) + '.combined.OutServ_0.0-cmsswreco.root' + ' .'), specifiedE)
    result = map(lambda x : 'file:h2.000' + str(x) + '.combined.OutServ_0.0-cmsswreco.root', specifiedE)
else:    
    result = map(lambda x : 'rfio:///castor/cern.ch/cms/store/h2tb2006/reco/v6/h2.000' + str(x) + '.combined.OutServ_0.0-cmsswreco.root', specifiedE)
    
#if options.endcapMode <> 0:
#    result = ['file:/tmp/tb07_reco_edm_run_00016031.0000.root']
#    process.particleFlowRecHitECAL.ecalRecHitsEB = cms.InputTag("ecal2007TBH2WeightUncalibRecHit", "EcalUncalibRecHitsEB")
#    process.particleFlowRecHitECAL.ecalRecHitsEE = cms.InputTag("ecal2007TBH2WeightUncalibRecHit", "EcalUncalibRecHitsEE")

if options.kevents <> 0:
    process.maxEvents = cms.untracked.PSet(
        input=cms.untracked.int32(options.kevents*1000)
        )

# Files to process
runs = cms.untracked.vstring(result)
print "Input files :"
print result

print "Log file :"
print logFile

# Output tree of cleaned particles
process.TFileService.fileName = cms.string(outputTree)

# New Event file
process.finishup.fileName = cms.untracked.string(outputFile)

# LogFile

process.MessageLogger = cms.Service("MessageLogger",
    destinations=cms.untracked.vstring(logFile),
)

process.source = cms.Source("PoolSource",
        fileNames = runs,
        inputCommands=cms.untracked.vstring('keep *', 'drop EBDataFramesSorted_*_*_*')

        
)

process.p1 = cms.Path(process.pflowProcessTestbeam)
process.outpath = cms.EndPath(process.finishup)
