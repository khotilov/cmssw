# Python script generated by stageEnergy.py
# For Testbeam data processing

# Jamie Ballin, Imperial College London
# December 2008

import FWCore.ParameterSet.Config as cms
import commands
process = cms.Process("PROD")
process.load("RecoParticleFlow.PFAnalyses.pflowProcessTestbeam_cff")
process.load("Geometry.CaloEventSetup.CaloGeometry_cff")
from RecoParticleFlow.PFAnalyses.RunDict import *

from RecoParticleFlow.PFAnalyses.pflowOptions_cfi import *

outputTree = "outputtree_" + fileLabel
outputFile = "/tmp/rereprocessed_" + fileLabel
logFile = "/tmp/log_" + logLabel


specifiedE = energies[options.beamEnergy]


process.particleFiltration.debug = cms.int32(5)

process.particleFlowRecHitHCAL.thresh_Barrel = cms.double(0.0)
process.particleFlowClusterHCAL.thresh_Seed_Barrel = cms.double(0.6)
process.particleFlowClusterHCAL.thresh_Barrel = cms.double(0.6)

process.particleFlowRecHitHCAL.thresh_Endcap = cms.double(0.0)
process.particleFlowClusterHCAL.thresh_Seed_Endcap = cms.double(0.8)
process.particleFlowClusterHCAL.thresh_Endcap = cms.double(0.8)

process.particleFlowBlock.pf_chi2_ECAL_HCAL = cms.double(100.0)

#Don't create neutrals from E > p detection...
#process.particleFlow.pf_nsigma_HCAL = cms.double(100)
#process.particleFlow.pf_nsigma_ECAL = cms.double(100)

#process.particleFlowBlock.debug = cms.untracked.bool(True)
#process.particleFlow.debug = cms.untracked.bool(True)
#Uncomment this lot if you want a file of noise!
#process.particleFiltration.noiseMode=cms.bool(True)
#process.extraction.applyCleaningCuts=cms.bool(False)
#process.extraction.saveJustPions=cms.bool(False)
## Also change masterConeDeltaR in pflowCalibratable_cfi to something like 1

#Need to override clustering to exclude HF components
from RecoParticleFlow.PFClusterProducer.particleFlowCluster_cff import *
process.pfClusteringHCAL = cms.Sequence(particleFlowRecHitHCAL * particleFlowClusterHCAL)
#process.extraction.clustersFromCandidates=cms.bool(True)
#process.extraction.rechitsFromCandidates=cms.bool(True)
process.extraction.nRingsHcalCaloWindow=cms.uint32(20)
process.particleFlow.debug=cms.untracked.bool(True)
if options.endcapMode <> 0:
    process.particleFlowRecHitECAL.ecalRecHitsEB = cms.InputTag("pflowCalibEcalRechits", "ecalEBRechitsCalib")
    process.particleFlowRecHitECAL.ecalRecHitsEE = cms.InputTag("pflowCalibEcalRechits", "ecalEERechitsCalib")
    process.extraction.RawRecHitsEcalEB = cms.InputTag("pflowCalibEcalRechits", "ecalEBRechitsCalib")
    process.extraction.RawRecHitsEcalEE = cms.InputTag("pflowCalibEcalRechits", "ecalEERechitsCalib")

if options.kevents <> 0:
    process.maxEvents = cms.untracked.PSet(
        input=cms.untracked.int32(options.kevents * 1000)
)

print "Log file :"
print logFile

# Output tree of cleaned particles
process.TFileService.fileName = cms.string(outputTree)

# New Event file
process.finishup.fileName = cms.untracked.string(outputFile)

# LogFile

process.MessageLogger = cms.Service("MessageLogger",
    destinations=cms.untracked.vstring(logFile, 'cout'),
)

process.source = cms.Source("PoolSource",
    fileNames=cms.untracked.vstring('file:/tmp/reprocessed_50GeV_justCleaned.root'),
    inputCommands=cms.untracked.vstring('keep *', 'drop *_faketracks_*_*')
)

process.p1 = cms.Path(process.pfAlgoAndExtractionTestbeam)


if options.outputCollections:
    process.outpath = cms.EndPath(process.finishup)
