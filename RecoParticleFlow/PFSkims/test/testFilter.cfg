process PROD  = 
{

    # The number of events to be processed.
    untracked PSet maxEvents = {untracked int32 input = 10000}
    
    service =  RandomNumberGeneratorService {
	untracked uint32 sourceSeed = 123456789
    }
    
    /* */
    source = PythiaSource {
#	untracked int32	pythiaPylistVerbosity =12
	untracked int32 maxEventsToPrint =5 
	PSet PythiaParameters = {
	    
	    # This is a vector of ParameterSet names to be read, in this order
	    # The first two are in the include files below
	    # The last one are simply my additional parameters
	    vstring parameterSets = {
		#	"pythiaMinBias", 
		"myParameters"
	    }
	    #
	    # Default cards for minimum bias events (unfiltered)
	    # Name of the set is "pythiaMinBias"
	    #include "IOMC/GeneratorInterface/test/pythiaMinBias.cfg"
	    #
	    # User cards - name is "myParameters"
	    # Pythia's random generator initialization 
	    vstring myParameters = {
      'MSEL=0 ! Your fate is in the following cards ',
      'MSUB(86)=1 !gg->J/Psi g',
   
        # J/psi decays
        'MDME(858,1)=1 ! J/psi->e+e-',
        'MDME(859,1)=0 ! J/psi->mumu',
        'MDME(860,1)=0'


	    }
	    
	}
    }	
    /* */
    

    service = DaqMonitorROOTBackEnd{}  

    service = Timing { }
#    service = SimpleProfiling { }
    
include "RecoParticleFlow/PFSkims/data/JPsieeFilter.cfi"
#    replace jpsiupsilon_filter.doHistos=true
    
    path p1 = { 
	jpsiupsilon_filter
    }

   	
    module o1 = PoolOutputModule { 
	untracked string fileName = "test.root" 
	 untracked vstring outputCommands = {
	"keep *",
	"drop *_mix_*_*"
	}
	untracked PSet SelectEvents = {
	    vstring SelectEvents = {"p1"}
        }
    }
    endpath outpath = { o1 }

    
    # Keep the logging output to a nice level #
    include "FWCore/MessageService/data/MessageLogger.cfi"
    replace MessageLogger.destinations = {"detailedInfo.txt"}
    
}		
