#!/usr/bin/env python

##############################################################################
#
# Script for running the Intel PTU from command line instead of
# Eclipse. Runs vtsarun.bin directly for the benchmark and then runs
# the conversion with vtdpview.
#
# In order to analyse the results, one can use the ptuanalyse script
# for converting the data to a set of CSV files, and ptuview to view
# them as HTML.
#
#
# After everything necessary (PTU, CMSSW) are in the environment, one
# can run the basic_sampling profile by
#
# $ pturun -e basic_sampling01 cmsRun conf_cfg.py
#   or
# $ pturun -e basic_sampling01 --events basic_sampling cmsRun conf_cfg.py
#   or
# $ pturun -e basic_sampling01 --events CPU_CLK_UNHALTED.CORE:sa=2000000,INST_RETIRED.ANY:sa=2000000 cmsRun conf_cfg.py
#
# This will create a directory "basic_sampling01" under the working
# directory and run the profile of cmsRun with the conf_cfg.py
# configuration. 
#
# If the ptuanalyse script is used to process the profile data, one
# should use the same experiment directory was used here.
#
# A short help of the parameters is shown with '-h'.
#
#
#  $Id: pturun,v 1.4 2010/07/25 18:39:20 mkortela Exp $
#
# Matti Kortelainen, Helsinki Institute of Physics
# 16 April 2010
##############################################################################

import os
import sys
import subprocess
from optparse import OptionParser, OptionGroup

class Profile:
    def __init__(self, events, args):
        self.events = events
        self.args = args

    def getEvents(self):
        return self.events

    def getArgs(self):
        return self.args
    
# Paths to the relevant PTU executables
#ptu_path = "/opt/intel/ptu32_001_lin_intel64/bin"
# take executables from $PATH
ptu_path = ""
vtsarun = os.path.join(ptu_path, "vtsarun.bin")
vtdpview = os.path.join(ptu_path, "vtdpview")

# Predefined profiles (name => event string)
# -ex is for extra options, I have no idea why 0x20 should be passed to it
# -dl enables data latency specific data collection
# -em performs event multiplexing
# -dts specifies the time slice (in ms), do not change unless you know
#  what you're doing, and event then, do NOT decrease the value
profiles = {"basic_sampling": Profile("CPU_CLK_UNHALTED.CORE:sa=2000000,INST_RETIRED.ANY:sa=2000000", ["-ex", "0x20"]),
            "basic_sampling_nhm": Profile("CPU_CLK_UNHALTED.THREAD:sa=2000000,INST_RETIRED.ANY:sa=2000000", ["-ex", "0x20"]),
            "basic_sampling_wsm": Profile("CPU_CLK_UNHALTED.THREAD:sa=2000000,INST_RETIRED.ANY:sa=2000000", ["-ex", "0x20"]),
            "cern_nhm": Profile("ARITH.CYCLES_DIV_BUSY:sa=2000000,BR_INST_EXEC.DIRECT_NEAR_CALL:sa=20000,BR_INST_EXEC.INDIRECT_NEAR_CALL:sa=20000,BR_INST_EXEC.INDIRECT_NON_CALL:sa=20000,BR_INST_EXEC.NON_CALLS:sa=200000,BR_INST_RETIRED.ALL_BRANCHES:sa=200000,BR_INST_RETIRED.NEAR_CALL:sa=4000,BR_MISP_EXEC.ANY:sa=20000,CPU_CLK_UNHALTED.THREAD:sa=2000000,DTLB_MISSES.ANY:sa=200000,INST_DECODED.DEC0:sa=2000000,INST_QUEUE_WRITE_CYCLES:sa=2000000,INST_QUEUE_WRITES:sa=2000000,INST_RETIRED.ANY:sa=2000000,ITLB_MISS_RETIRED:sa=200000,ITLB_MISSES.ANY:sa=200000,ITLB_MISSES.WALK_COMPLETED:sa=200000,L2_RQSTS.IFETCH_HIT:sa=20000,L2_RQSTS.IFETCH_MISS:sa=20000,MACHINE_CLEARS.CYCLES:sa=20000,MACHINE_CLEARS.MEM_ORDER:sa=20000,MACHINE_CLEARS.SMC:sa=20000,MEM_LOAD_RETIRED.L2_HIT:sa=200000,MEM_LOAD_RETIRED.LLC_MISS:sa=10000,MEM_LOAD_RETIRED.LLC_UNSHARED_HIT:sa=40000,MEM_UNCORE_RETIRED.LOCAL_DRAM:sa=10000,MEM_UNCORE_RETIRED.REMOTE_DRAM:sa=20000,OFFCORE_RESPONSE_0.DATA_IN.LOCAL_CACHE:sa=100000,OFFCORE_RESPONSE_0.DATA_IN.LOCAL_DRAM:sa=100000,OFFCORE_RESPONSE_0.DATA_IN.REMOTE_DRAM:sa=100000,OFFCORE_RESPONSE_0.DEMAND_IFETCH.LOCAL_CACHE:sa=10000,OFFCORE_RESPONSE_0.DEMAND_IFETCH.LOCAL_DRAM:sa=10000,OFFCORE_RESPONSE_0.DEMAND_IFETCH.REMOTE_DRAM:sa=10000,PARTIAL_ADDRESS_ALIAS:sa=200000,RESOURCE_STALLS.ANY:sa=2000000,UOPS_DECODED.MS_CYCLES_ACTIVE:sa=2000000,UOPS_DECODED.STALL_CYCLES:sa=2000000,UOPS_ISSUED.ANY:sa=2000000,UOPS_ISSUED.CORE_STALL_CYCLES:sa=2000000,UOPS_ISSUED.STALL_CYCLES:sa=2000000,UOPS_RETIRED.ANY:sa=2000000,UOPS_RETIRED.RETIRE_SLOTS:sa=2000000,UOPS_RETIRED.STALL_CYCLES:sa=2000000", ["-dl", "-em", "-dts 100"]),
	    "cern_wsm_dp_branch": Profile("ARITH.CYCLES_DIV_BUSY:sa=2000000,BR_INST_EXEC.DIRECT_NEAR_CALL:sa=20000,BR_INST_EXEC.INDIRECT_NEAR_CALL:sa=20000,BR_INST_EXEC.INDIRECT_NON_CALL:sa=20000,BR_INST_RETIRED.ALL_BRANCHES:sa=200000,BR_INST_RETIRED.NEAR_CALL:sa=2000,BR_MISP_EXEC.ANY:sa=20000,BR_MISP_EXEC.DIRECT:sa=20000,BR_MISP_EXEC.INDIRECT_NEAR_CALL:sa=2000,BR_MISP_EXEC.INDIRECT_NON_CALL:sa=2000,BR_MISP_RETIRED.ALL_BRANCHES:sa=20000,BR_MISP_RETIRED.NEAR_CALL:sa=2000,CPU_CLK_UNHALTED.REF:sa=2000000,CPU_CLK_UNHALTED.THREAD:sa=2000000,DTLB_MISSES.ANY:sa=200000,DTLB_MISSES.WALK_COMPLETED:sa=200000,DTLB_MISSES.WALK_CYCLES:sa=2000000,ILD_STALL.LCP:sa=2000000,INST_QUEUE_WRITE_CYCLES:sa=2000000,INST_RETIRED.ANY:sa=2000000,ITLB_MISSES.ANY:sa=200000,ITLB_MISSES.WALK_COMPLETED:sa=200000,ITLB_MISSES.WALK_CYCLES:sa=2000000,L2_RQSTS.IFETCH_HIT:sa=200000,L2_RQSTS.IFETCH_MISS:sa=200000,LOAD_BLOCK.OVERLAP_STORE:sa=200000,LSD.ACTIVE:sa=2000000,MACHINE_CLEARS.CYCLES:sa=20000,MACHINE_CLEARS.MEM_ORDER:sa=20000,MACHINE_CLEARS.SMC:sa=20000,MEM_LOAD_RETIRED.L2_HIT:sa=200000,MEM_LOAD_RETIRED.LLC_MISS:sa=10000,MEM_LOAD_RETIRED.LLC_UNSHARED_HIT:sa=40000,MEM_LOAD_RETIRED.OTHER_CORE_L2_HIT_HITM:sa=40000,MEM_UNCORE_RETIRED.LOCAL_DRAM_AND_REMOTE_CACHE_HIT:sa=20000,MEM_UNCORE_RETIRED.REMOTE_DRAM:sa=20000,OFFCORE_REQUESTS.DEMAND.READ_CODE:sa=100000,OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_CODE:sa=2000000,OFFCORE_REQUESTS_OUTSTANDING.DEMAND.READ_CODE_NOT_EMPTY:sa=2000000,OFFCORE_RESPONSE.DATA_IN.ANY_DRAM_AND_REMOTE_FWD_1:sa=100000,OFFCORE_RESPONSE.DATA_IN.LOCAL_DRAM_AND_REMOTE_CACHE_HIT_0:sa=100000,OFFCORE_RESPONSE.DATA_IN.REMOTE_DRAM_1:sa=100000,OFFCORE_RESPONSE.DEMAND_IFETCH.LOCAL_CACHE_0:sa=100000,OFFCORE_RESPONSE.DEMAND_IFETCH.LOCAL_DRAM_AND_REMOTE_CACHE_HIT_1:sa=100000,OFFCORE_RESPONSE.DEMAND_IFETCH.REMOTE_DRAM_0:sa=100000,PARTIAL_ADDRESS_ALIAS:sa=200000,RAT_STALLS.ANY:sa=2000000,RESOURCE_STALLS.ANY:sa=2000000,SQ_FULL_STALL_CYCLES:sa=2000000,STORE_BLOCKS.AT_RET:sa=200000,UOPS_DECODED.MS_CYCLES_ACTIVE:sa=2000000,UOPS_DECODED.STALL_CYCLES:sa=2000000,UOPS_EXECUTED.CORE_STALL_CYCLES:sa=2000000,UOPS_ISSUED.ANY:sa=2000000,UOPS_ISSUED.FUSED:sa=2000000,UOPS_ISSUED.STALL_CYCLES:sa=2000000,UOPS_RETIRED.ANY:sa=2000000,UOPS_RETIRED.RETIRE_SLOTS:sa=2000000,UOPS_RETIRED.STALL_CYCLES:sa=2000000", ["-dl", "-em", "-dts 100"])
            }

def main(parser, opts, args):
    # Check for query options
    if opts.listev:
        subprocess.call([vtsarun, "-el"])
        return
    if opts.listmod != None:
        subprocess.call([vtsarun, "-ml", opts.listmod])
        return
    if opts.listprof:
        print "%-20s Event configuration" % "Profile name"
        for name,profile in profiles.iteritems():
            print "%-20s %s" % (name, profile.getEvents())
        return

    # Check we have the necessary information for the benchmark
    if opts.expdir == None:
        parser.error("The PTU experiment directory must be given (-e)")
    if len(args) == 0:
        parser.error("Program is missing")

    # Check if the profile is one of the predefined ones
    events = opts.events
    prof_args = ["-ex", "0x20"]
    if profiles.has_key(events):
        prof = profiles[events]
        
        events = prof.getEvents()
        prof_args = prof.getArgs()

    # Run profile
    # -s is for starting event based sampling
    cmd = [vtsarun, opts.expdir, "-s", "-ec", events]
    cmd.extend(prof_args)
    cmd.append("--")
    cmd.extend(args)
    print >> sys.stderr, "Starting vtsarun with command"
    print >> sys.stderr, " ".join(cmd)
    print >> sys.stderr, "-------------------------------------------------------------"
    ret = subprocess.call(cmd)
    if ret != 0:
        print >> sys.stderr, "Failure!"
        return

    # Run conversion
    cmd = [vtdpview, opts.expdir, "--convert"]
    print >> sys.stderr, "-------------------------------------------------------------"
    print >> sys.stderr, "Starting conversion"
    print >> sys.stderr, "-------------------------------------------------------------"
    subprocess.call(cmd)
    print >> sys.stderr, "-------------------------------------------------------------"
    print >> sys.stderr, "Done."


if __name__ == "__main__":
    parser = OptionParser(usage="Usage: %prog [options] [program] [program arguments]")
    parser.add_option("--experiment", "-e", dest="expdir", type="string",
                      help="PTU Experiment directory")
    parser.add_option("--events", dest="events", type="string", default="basic_sampling",
                      help='Predefined profile, or a string passed to vtsarun via "-ec" if no profile found (default: "basic_sampling")')

    glist = OptionGroup(parser, "List options", "List events and their modifiers")
    glist.add_option("--list-events", dest="listev", action="store_true", default=False,
                      help="List available events")
    glist.add_option("--list-modifiers", dest="listmod", type="string",
                      help="List available modifiers for a given event")
    glist.add_option("--list-profiles", dest="listprof", action="store_true", default=False,
                     help="List predefined profiles")
    parser.add_option_group(glist)
    
    (opts, args) = parser.parse_args()

    main(parser, opts, args)
