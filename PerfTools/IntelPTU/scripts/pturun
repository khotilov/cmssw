#!/usr/bin/env python

##############################################################################
#
# Script for running the Intel PTU from command line instead of
# Eclipse. Runs vtsarun.bin directly for the benchmark and then runs
# the conversion with vtdpview.
#
# In order to analyse the results, one can use the ptuanalyse script
# for converting the data to a set of CSV files, and ptuview to view
# them as HTML.
#
#
# After everything necessary (PTU, CMSSW) are in the environment, one
# can run the basic_sampling profile by
#
# $ ptuanalyse -e basic_sampling01 cmsRun conf_cfg.py
#   or
# $ ptuanalyse -e basic_sampling01 --events basic_sampling cmsRun conf_cfg.py
#   or
# $ ptuanalyse -e basic_sampling01 --events CPU_CLK_UNHALTED.CORE:sa=2000000,INST_RETIRED.ANY:sa=2000000 cmsRun conf_cfg.py
#
# This will create a directory "basic_sampling01" under the working
# directory and run the profile of cmsRun with the conf_cfg.py
# configuration. 
#
# If the ptuanalyse script is used to process the profile data, one
# should use the same experiment directory was used here.
#
# A short help of the parameters is shown with '-h'.
#
#
#  $Id: ptuview,v 1.7 2010/04/16 13:21:21 mkortela Exp $
#
# Matti Kortelainen, Helsinki Institute of Physics
# 16 April 2010
##############################################################################

import sys
import subprocess
from optparse import OptionParser, OptionGroup

# Paths to the relevant PTU executables
vtsarun = "/opt/intel/ptu32_001_lin_intel64/bin/vtsarun.bin"
vtdpview = "/opt/intel/ptu32_001_lin_intel64/bin/vtdpview"

# Predefined profiles (name => event string)
profiles = {"basic_sampling": "CPU_CLK_UNHALTED.CORE:sa=2000000,INST_RETIRED.ANY:sa=2000000"}

def main(parser, opts, args):
    # Check for query options
    if opts.listev:
        subprocess.call([vtsarun, "-el"])
        return
    if opts.listmod != None:
        subprocess.call([vtsarun, "-ml", opts.listmod])
        return
    if opts.listprof:
        print "%-20s Event configuration" % "Profile name"
        for profile,events in profiles.iteritems():
            print "%-20s %s" % (profile, events)
        return

    # Check we have the necessary information for the benchmark
    if opts.expdir == None:
        parser.error("The PTU experiment directory must be given (-e)")
    if len(args) == 0:
        parser.error("Program is missing")

    # Check if the profile is one of the predefined ones
    events = opts.events
    if profiles.has_key(events):
        events = profiles[events]

    # Run profile
    # -s is for starting event based sampling
    # -ex is for extra options, I have no idea why 0x20 should be passed to it
    cmd = [vtsarun, opts.expdir, "-s", "-ex", "0x20", "-ec", events]
    cmd.append("--")
    cmd.extend(args)
    print >> sys.stderr, "Starting vtsarun with command"
    print >> sys.stderr, " ".join(cmd)
    print >> sys.stderr, "-------------------------------------------------------------"
    ret = subprocess.call(cmd)
    if ret != 0:
        print >> sys.stderr, "Failure!"
        return

    # Run conversion
    cmd = [vtdpview, opts.expdir, "--convert"]
    print >> sys.stderr, "-------------------------------------------------------------"
    print >> sys.stderr, "Starting conversion"
    print >> sys.stderr, "-------------------------------------------------------------"
    subprocess.call(cmd)
    print >> sys.stderr, "-------------------------------------------------------------"
    print >> sys.stderr, "Done."


if __name__ == "__main__":
    parser = OptionParser(usage="Usage: %prog [options] [program] [program arguments]")
    parser.add_option("--experiment", "-e", dest="expdir", type="string",
                      help="PTU Experiment directory")
    parser.add_option("--events", dest="events", type="string", default="basic_sampling",
                      help='Predefined profile, or a string passed to vtsarun via "-ec" if no profile found (default: "basic_sampling")')

    glist = OptionGroup(parser, "List options", "List events and their modifiers")
    glist.add_option("--list-events", dest="listev", action="store_true", default=False,
                      help="List available events")
    glist.add_option("--list-modifiers", dest="listmod", type="string",
                      help="List available modifiers for a given event")
    glist.add_option("--list-profiles", dest="listprof", action="store_true", default=False,
                     help="List predefined profiles")
    parser.add_option_group(glist)
    
    (opts, args) = parser.parse_args()

    main(parser, opts, args)
