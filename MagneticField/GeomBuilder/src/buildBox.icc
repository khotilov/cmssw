/*
 *  Compute parameters for a box 
 *
 *  $Date: 2005/07/29 13:49:20 $
 *  $Revision: 1.4 $
 *  \author N. Amapane - INFN Torino
 */

void MagGeoBuilderFromDDD::volumeHandle::buildBox(const DDExpandedView &fv) {
  if (bldVerb.debugOut) cout << "Building box surfaces...: " <<endl;

  DDBox box(solid);
  double halfX = box.halfX()/cm;
  double halfY = box.halfY()/cm;
  double halfZ = box.halfZ()/cm;

  if (bldVerb.debugOut) cout << " halfX: " << halfX 
		  << " halfY: " << halfY 
		  << " halfZ: " << halfZ <<endl;

  GlobalVector planeXAxis = refPlane->toGlobal(LocalVector( 1, 0, 0));
  GlobalVector planeYAxis = refPlane->toGlobal(LocalVector( 0, 1, 0));
  GlobalVector planeZAxis = refPlane->toGlobal(LocalVector( 0, 0, 1)); 

  GlobalPoint pos_outer(refPlane->toGlobal(LocalPoint(0.,halfY,0.)));
  GlobalPoint pos_inner(refPlane->toGlobal(LocalPoint(0.,-halfY,0.)));
  GlobalPoint pos_zplus(refPlane->toGlobal(LocalPoint(0.,0.,halfZ)));
  GlobalPoint pos_zminus(refPlane->toGlobal(LocalPoint(0.,0.,-halfZ)));
  GlobalPoint pos_phiplus(refPlane->toGlobal(LocalPoint(-halfX,0.,0.)));
  GlobalPoint pos_phiminus(refPlane->toGlobal(LocalPoint(halfX,0.,0.)));

  if (bldVerb.debugOut) cout << "pos_outer    " << pos_outer << " "
		  << pos_outer.perp() << " " << pos_outer.phi() << endl 
		  << "pos_inner    " << pos_inner << " "
		  << pos_inner.perp() << " " << pos_inner.phi() << endl
		  << "pos_zplus    " << pos_zplus << " "
		  << pos_zplus.perp() << " " << pos_zplus.phi() << endl
		  << "pos_zminus   " << pos_zminus << " "
		  << pos_zminus.perp() << " " << pos_zminus.phi() << endl
		  << "pos_phiplus  " << pos_phiplus << " "
		  << pos_phiplus.perp() << " " << pos_phiplus.phi() <<endl
		  << "pos_phiminus " << pos_phiminus << " "
		  << pos_phiminus.perp() << " " << pos_phiminus.phi() <<endl;

  // Check ordering.
  if (bldVerb.debugOut) {
    if (pos_outer.perp() < pos_inner.perp()) {
      cout << "*** WARNING: pos_outer < pos_inner " << endl;
    }
    if (pos_zplus.z() < pos_zminus.z()) {
      cout << "*** WARNING: pos_zplus < pos_zminus " << endl;
    }
    if (Geom::Phi<float>(pos_phiplus.phi()-pos_phiminus.phi()) < 0. ) {
      cout << "*** WARNING: pos_phiplus < pos_phiminus " << endl;
    }
  }
  
  Surface::RotationType rot_R(planeZAxis, planeXAxis);
  Surface::RotationType rot_Z(planeXAxis, planeYAxis);
  Surface::RotationType rot_phi(planeZAxis, planeYAxis); // opposite to x axis

  // FIXME: use builder
  surfaces[outer]    = new Plane(pos_outer, rot_R);
  surfaces[inner]    = new Plane(pos_inner, rot_R);
  surfaces[zplus]    = new Plane(pos_zplus, rot_Z);
  surfaces[zminus]   = new Plane(pos_zminus, rot_Z);
  surfaces[phiplus]  = new Plane(pos_phiplus, rot_phi);
  surfaces[phiminus] = new Plane(pos_phiminus, rot_phi);

  if (bldVerb.debugOut) {
    cout << "rot_R " << surfaces[outer]->toGlobal(LocalVector(0.,0.,1.)) <<endl
	 << "rot_Z " << surfaces[zplus]->toGlobal(LocalVector(0.,0.,1.)) <<endl
	 << "rot_phi " << surfaces[phiplus]->toGlobal(LocalVector(0.,0.,1.))
	 << endl;
  }
  
  // Save volume boundaries
  theRMin = fabs(surfaces[inner]->toLocal(GlobalPoint(0,0,0)).z());
  theRMax = fabs(surfaces[outer]->toLocal(GlobalPoint(0,0,0)).z());
}
