#!/usr/bin/env python
from optparse import OptionParser
from os import system
from os.path import exists
from tempfile import NamedTemporaryFile 
from sys import exit

detectProcess = """
from FWCore.ParameterSet.Config import Process
import imp
module = imp.load_source('cmsConfig', "%s")
processName = [k for (k,v) in module.__dict__.iteritems() if type(v) == Process][0]
"""

if __name__ == "__main__":
   parser = OptionParser()
   parser.add_option("-d", "--debug", dest="debug", help="Run in debug mode.", 
                     action="store_true", default=False)
   parser.add_option("-c", "--config", dest="displayConfigFilename", metavar="FILENAME",
                     help="PATH to cmsShow GUI configuration", default=None)
   parser.add_option("-g", "--geometry", dest="geometryFilename", metavar="FILENAME",
                     help="PATH to geometry file", default=None)
   opts, args = parser.parse_args()
   
   if not len(args) == 1:
      parser.error("Only one CMSSW configuration file allowed.")
   
   results = {}
   cmsswConfig = args[0]
   if not exists(cmsswConfig):
      parser.error("File not found: %s" % cmsswConfig)

   print "Validating CMSSW configuration file..."
   try:
      exec detectProcess % cmsswConfig in results
   except:
      print """The specified configuration file contains syntax errors.

Please make sure you are able to run it using cmsRun, e.g.:

   cmsRun %s

before attempting to run it in cmsShowFF.
""" % cmsswConfig
      exit(1)

   if "processName" not in results:
      print "Unable to find the main Process in configuration. Please make sure\n\n%s\n\n is a valid CMSSW configuration file." % cmsswConfig
      exit(1)
   processName = results["processName"]
   print "Valid configuration file found."
   if opts.debug:
      print "Process name is '%s'." % processName
   serviceOpts = ["\"FWFFService\""]

   if opts.geometryFilename:
      serviceOpts.append("geometryFilename=cmsShowPrivate.untracked.string(\"%s\")" % opts.geometryFilename)
   if opts.displayConfigFilename:
      serviceOpts.append("displayConfigFilename=cmsShowPrivate.untracked.string(\"%s\")" % opts.displayConfigFilename)
   dest = NamedTemporaryFile(suffix=".py", delete=not opts.debug)
   dest.write(file(cmsswConfig).read())
   dest.write("""
import FWCore.ParameterSet.Config as cmsShowPrivate
%s.FWFFService = cmsShowPrivate.Service(%s)
""" % (processName, ",".join(serviceOpts)))
   dest.flush()
   if opts.debug:
      print "Temporary configuration file can be found at %s" % dest.name
      print "Executing", "cmsRun %s" % dest.name
   system("cmsRun %s" % dest.name)
   dest.close()
