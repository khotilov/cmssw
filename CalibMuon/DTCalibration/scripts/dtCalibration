#! /usr/bin/env python

from CalibMuon.DTCalibration.Workflow.DTTTrigProd import DTTTrigProd
from CalibMuon.DTCalibration.Workflow.DTTTrigCorrFirst import DTTTrigCorrFirst
from CalibMuon.DTCalibration.Workflow.DTTTrigValid import DTTTrigValid
from CalibMuon.DTCalibration.Workflow.DTTTrigResidualCorr import DTTTrigResidualCorr
from CalibMuon.DTCalibration.Workflow.DTValidSummary import DTValidSummary
from CalibMuon.DTCalibration.Workflow.DTDqm import DTDqm
from CalibMuon.DTCalibration.Workflow.CrabWatch import CrabWatch
from CalibMuon.DTCalibration.Workflow.tools import listFilesInCastor,haddInCastor,listFilesLocal,haddLocal,parseInput
import sys,os,time,optparse

def runTtrigProd(run,runselection,trial,config,runStep=True):

    print "Processing tTrig production"
    config.runselection = runselection
    #config.userdircaf = 'TTRIGCalibration/Production/Run' + str(run) + '/v' + str(trial)
    config.userdircaf = 'TTRIGCalibration/Run' + str(run) + '/Production/' + 'v' + str(trial)
    config.digilabel = 'muonDTDigis'
   
    dtTtrigProd = DTTTrigProd(run,config.prod_dir,config) 
    dtTtrigProd.writeCfg()
    
    if runStep:
        project_prod = dtTtrigProd.run()

        print "Sent production jobs with project",project_prod

        crabProd = CrabWatch(project_prod)
        crabProd.start()
        crabProd.join()

        result_file = config.result_dir + '/DTTimeBoxes_%s.root'%run
        if config.stageOutLocal:
            output_dir = project_prod + "/res"
            haddLocal(output_dir,result_file) 
        elif config.stageOutCAF:
            castor_dir = config.castorpath + "/" + config.userdircaf
            haddInCastor(castor_dir,result_file)

        return project_prod

    return None

def runTtrigCorrFirst(run,config,runStep=True):

    print "Processing tTrig correction"
    dtTtrigCorrFirst = DTTTrigCorrFirst(run,config.run_dir,config.result_dir,config)
    dtTtrigCorrFirst.writeCfg()
 
    if runStep:  
        dtTtrigCorrFirst.run()

        print "Finished processing:"
        for pset in dtTtrigCorrFirst.configs: print "--->",pset

def runTtrigValid(run,runselection,trial,input_file,config,runStep=True):

    print "Processing tTrig validation"
    config.runselection = runselection
    #config.userdircaf = 'TTRIGCalibration/Validation/First/Run' + str(run) + '/v' + str(trial)
    config.userdircaf = 'TTRIGCalibration/Run' + str(run) + '/Validation/First/' + 'v' + str(trial)
    
    dtTtrigValid = DTTTrigValid(run,config.valid_dir,input_file,config) 
    dtTtrigValid.writeCfg()

    if runStep:
        project_valid_first = dtTtrigValid.run()

        print "Sent validation jobs with project",project_valid_first

        crabValidFirst = CrabWatch(project_valid_first)
        crabValidFirst.start()
        crabValidFirst.join()

        result_file = config.result_dir + '/DTkFactValidation_%s.root'%run
        if config.stageOutLocal:
            output_dir = project_valid_first + "/res"
            haddLocal(output_dir,result_file)
        elif config.stageOutCAF:
            castor_dir = config.castorpath + "/" + config.userdircaf
            haddInCastor(castor_dir,result_file,'residuals')

        return project_valid_first

    return None

def runTtrigResidualCorr(run,config,runStep=True):

    print "Processing tTrig residual correction"
    dtTtrigResidualCorr = DTTTrigResidualCorr(run,config.run_dir,config.result_dir,config)
    dtTtrigResidualCorr.writeCfg()

    if runStep:  
        dtTtrigResidualCorr.run()

        print "Finished processing:"
        for pset in dtTtrigResidualCorr.configs: print "--->",pset

def runTtrigValidResidCorr(run,runselection,trial,input_file,config,runStep=True):

    print "Processing tTrig final validation"
    config.runselection = runselection
    #config.userdircaf = 'TTRIGCalibration/Validation/ResidCorr/Run' + str(run) + '/v' + str(trial)
    config.userdircaf = 'TTRIGCalibration/Run' + str(run) + '/Validation/ResidCorr/' + 'v' + str(trial)

    dtTtrigValid_ResidCorr = DTTTrigValid(run,config.valid_dir,input_file,config)
    dtTtrigValid_ResidCorr.writeCfg()

    if runStep:
        project_valid_ResidCorr = dtTtrigValid_ResidCorr.run()

        print "Sent validation jobs with project",project_valid_ResidCorr

        crabValidResidCorr = CrabWatch(project_valid_ResidCorr)
        crabValidResidCorr.start()
        crabValidResidCorr.join()

        result_file = config.result_dir + '/DTkFactValidation_ResidCorr_%s.root'%run
        if config.stageOutLocal:
            output_dir = project_valid_ResidCorr + "/res"
            haddLocal(output_dir,result_file)
        elif config.stageOutCAF: 
            castor_dir = config.castorpath + "/" + config.userdircaf
            haddInCastor(castor_dir,result_file,'residuals')

        return project_valid_ResidCorr

    return None

def runTtrigValidSummary(run,input_file,output_file,config,runStep=True):

    print "Processing Validation Summary"
    dtTtrigValidSummary = DTValidSummary(run,config.run_dir,input_file,output_file,config)
    dtTtrigValidSummary.writeCfg()

    if runStep:
        dtTtrigValidSummary.run()
 
        print "...Validation Summary finished"

def runDQMMerge(run,output_dir,config,runStep=True):

    print "Processing DQM Merge"

    if runStep:

        dqm_files = [] 
        if config.stageOutLocal:
            dqm_files = listFilesLocal(output_dir,'DQM')
            dqm_files = ['file:%s' % item for item in dqm_files]
            dtDqmFinal = DTDqm(run,config.run_dir,dqm_files,config.result_dir,config)
            dtDqmFinal.writeCfg()
            dtDqmFinal.run()
        elif config.stageOutCAF:
            dqm_files = listFilesInCastor(output_dir,'DQM')
            dtDqmFinal = DTDqm(run,config.run_dir,dqm_files,config.result_dir,config)
            dtDqmFinal.writeCfg()
            dtDqmFinal.run()

        print "...DQM Merge finished"
    else:
        dqm_files = [] 
        dtDqmFinal = DTDqm(run,config.run_dir,dqm_files,config.result_dir,config)
        dtDqmFinal.writeCfg()
 

if __name__ == '__main__':
    start = time.time()

    """
    inputFields = ('run','runselection','trial','castorpath','datasetpath','globaltag','email','templatepath')
    requiredFields = ('run','castorpath','datasetpath','globaltag','email','templatepath')

    input = parseInput(inputFields,requiredFields)
    """
    
    parser = optparse.OptionParser(usage="usage: %prog [options]")
    parser.add_option("-r","--run",dest="run", help="set reference run number (typically first run in list)")
    parser.add_option("--runselection",dest="runselection", help="run list or range")
    parser.add_option("--trial",dest="trial", help="trial number used to in the naming of output directories")
    parser.add_option("--castorpath",dest="castorpath", help="path to user area at CAF")
    parser.add_option("--datasetpath",dest="datasetpath", help="dataset name to process")
    parser.add_option("--globaltag",dest="globaltag", help="global tag identifier (without the '::All' string)")
    parser.add_option("--email",dest="email", help="user email")
    parser.add_option("--templatepath",dest="templatepath", help="path to dir with template cfg files")
    parser.add_option("--runOnGrid", action="store_true", dest="runOnGrid", default=False, help="workflow will be run on the Grid (instead of the CAF)")
    parser.add_option("--stageOutLocal", action="store_true", dest="stageOutLocal", default=False, help="output will be copied locally (if running on the Grid this will be the default)")
    parser.add_option("--useCRABServer", action="store_true", dest="useserver", default=False, help="will use CRAB server to submit jobs (default = False)")
    parser.add_option("--no_exec", action="store_true", dest="no_exec", default=False, help="script will not execute")
 
    (input, args) = parser.parse_args()

    requiredFields = ('run','datasetpath','globaltag','templatepath')
    for item in requiredFields:
        if not getattr(input,item):
            parser.error('field "%s" needs to be set' % item) 
            #raise RuntimeError,'Need to set "%s"' % item

    run = input.run
    runselection = None
    if hasattr(input,'runselection') and input.runselection: runselection = input.runselection
    else: runselection = run

    trial = None
    if hasattr(input,'trial'): trial = input.trial
    else: trial = 1 

    class config: pass

    if not input.runOnGrid:
        config.scheduler = 'CAF'
        if input.stageOutLocal:
            config.stageOutCAF = False
            config.stageOutLocal = True
        else:
            config.stageOutCAF = True
            config.stageOutLocal = False
    else:
        config.runOnGrid = True
        config.scheduler = 'glite'
        config.stageOutCAF = False
        config.stageOutLocal = True

    config.useserver = input.useserver
    config.datasetpath = input.datasetpath
    config.runselection = runselection
    #config.totalnumberevents = 1000000
    #config.eventsperjob = 50000
    if hasattr(input,'email'): config.email = input.email    

    config.globaltag = input.globaltag + '::All'

    if config.stageOutCAF:
        config.castor_prefix = input.castorpath
        config.castorpath = input.castorpath

    config.template_path = input.templatepath
    config.templatepath =  input.templatepath

    run_dir = 'Run%s/Ttrig/Exec' % run
    if not os.path.exists(run_dir): os.makedirs(run_dir)
    config.run_dir = run_dir

    prod_dir = 'Run%s/Ttrig/Production' % run
    if not os.path.exists(prod_dir): os.makedirs(prod_dir)
    config.prod_dir = prod_dir

    valid_dir = 'Run%s/Ttrig/Validation' % run
    if not os.path.exists(valid_dir): os.makedirs(valid_dir)
    config.valid_dir = valid_dir

    result_dir = 'Run%s/Ttrig/Results' % run
    if not os.path.exists(result_dir): os.makedirs(result_dir)
    config.result_dir = result_dir

    log_dir = 'Run%s/Ttrig/Log' % run
    if not os.path.exists(log_dir): os.makedirs(log_dir)
    config.log_dir = log_dir 

    #logFileName = os.path.abspath('%s/Run_%s_v%s.log' % (log_dir,run,trial))
    #logOut = open(logFileName,'w',1)

    print "DT Calibration starting for Run",run
    print "Using runs",runselection
    print "Running at",run_dir
    print "Results at",result_dir 
    #print "Log file at",logFileName
 
    #stdout_original = sys.stdout
    #sys.stdout = logOut

    from CalibMuon.DTCalibration.Workflow.crabWrap import initCrabEnvironment
    initCrabEnvironment()

    timeBoxes = os.path.abspath(result_dir + '/' + 'DTTimeBoxes_' + run + '.root')
    ttrig_second_db = os.path.abspath(result_dir + '/' + 'ttrig_second_' + run + '.db')
    residualsFirst = os.path.abspath(result_dir + '/' + 'DTkFactValidation_' + run + '.root')
    ttrig_ResidCorr_db = os.path.abspath(result_dir + '/' + 'ttrig_ResidCorr_' + run + '.db')
    residualsResidCorr = os.path.abspath(result_dir + '/' + 'DTkFactValidation_ResidCorr_' + run + '.root')
    summaryResiduals = os.path.abspath(result_dir + '/' + 'SummaryResiduals_' + run + '.root')
    #castorDirResidCorr = config.castor_prefix + 'TTRIGCalibration/Validation/ResidCorr/Run' + str(run) + '/v' + str(trial)
    dqm_output_dir = ''

    if input.no_exec:
        print "Only cfg files will be written"
        runTtrigProd(run,runselection,trial,config,False)
        runTtrigCorrFirst(run,config,False)
        runTtrigValid(run,runselection,trial,ttrig_second_db,config,False)        
        runTtrigResidualCorr(run,config,False)
        runTtrigValidResidCorr(run,runselection,trial,ttrig_ResidCorr_db,config,False)
        runTtrigValidSummary(run,residualsResidCorr,summaryResiduals,config,False)
        runDQMMerge(run,dqm_output_dir,config,False)

        sys.exit(0)

    if not os.path.exists(timeBoxes): runTtrigProd(run,runselection,trial,config)
   
    if not os.path.exists(timeBoxes): raise RuntimeError,'Could not produce %s'%timeBoxes

    if not os.path.exists(ttrig_second_db): runTtrigCorrFirst(run,config)

    if not os.path.exists(ttrig_second_db): raise RuntimeError,'Could not produce %s'%ttrig_second_db

    if not os.path.exists(residualsFirst): runTtrigValid(run,runselection,trial,ttrig_second_db,config)

    if not os.path.exists(residualsFirst): raise RuntimeError,'Could not produce %s'%residualsFirst

    if not os.path.exists(ttrig_ResidCorr_db): runTtrigResidualCorr(run,config)

    if not os.path.exists(ttrig_ResidCorr_db): raise RuntimeError,'Could not produce %s'%ttrig_ResidCorr_db      

    project_valid_ResidCorr = None
    if not os.path.exists(residualsResidCorr):
        project_valid_ResidCorr = runTtrigValidResidCorr(run,runselection,trial,ttrig_ResidCorr_db,config)

    if not os.path.exists(residualsResidCorr): raise RuntimeError,'Could not produce %s'%residualsResidCorr

    if not os.path.exists(summaryResiduals): runTtrigValidSummary(run,residualsResidCorr,summaryResiduals,config)

    if not os.path.exists(summaryResiduals): raise RuntimeError,'Could not produce %s'%summaryResiduals

    if config.stageOutLocal:
        dqm_output_dir = project_valid_ResidCorr + "/res"
    elif config.stageOutCAF:
        dqm_output_dir = config.castorpath + '/TTRIGCalibration/Run' + str(run) + '/Validation/ResidCorr/' + 'v' + str(trial)
    runDQMMerge(run,dqm_output_dir,config)

    #sys.stdout = stdout_original
 
    stop = time.time() 
    print "DT Calibration finished for Run",run
    print "Time elapsed was %.1f seconds"%(stop-start)
