#! /usr/bin/env python

from CalibMuon.DTCalibration.Workflow.DTTTrigProd import DTTTrigProd
from CalibMuon.DTCalibration.Workflow.DTTTrigCorrFirst import DTTTrigCorrFirst
from CalibMuon.DTCalibration.Workflow.DTTTrigValid import DTTTrigValid
from CalibMuon.DTCalibration.Workflow.DTTTrigResidualCorr import DTTTrigResidualCorr
from CalibMuon.DTCalibration.Workflow.DTValidSummary import DTValidSummary
from CalibMuon.DTCalibration.Workflow.DTDqm import DTDqm
from CalibMuon.DTCalibration.Workflow.CrabWatch import CrabWatch
from CalibMuon.DTCalibration.Workflow.tools import listFilesInCastor,haddInCastor,parseInput
import sys,os,time,optparse

def init():
    pythonpathenv = os.environ['PYTHONPATH']
    pythonpathbegin = pythonpathenv.split(':')[0]
    pythonpathend = pythonpathenv.split(':')[-1]

    indexBegin = sys.path.index(pythonpathbegin)
    if os.environ.has_key('CRABPSETPYTHON'): sys.path.insert( indexBegin, os.environ['CRABPSETPYTHON'] )
    if os.environ.has_key('CRABDLSAPIPYTHON'): sys.path.insert( indexBegin, os.environ['CRABDLSAPIPYTHON'] )
    if os.environ.has_key('CRABDBSAPIPYTHON'): sys.path.insert( indexBegin, os.environ['CRABDBSAPIPYTHON'] )

    if os.environ['SCRAM_ARCH'].find('32') != -1 and os.environ.has_key('CRABPYSQLITE'):
        sys.path.insert( indexBegin, os.environ['CRABPYSQLITE'] )
    elif os.environ['SCRAM_ARCH'].find('64') != -1 and os.environ.has_key('CRABPYSQLITE64'):
        sys.path.insert( indexBegin, os.environ['CRABPYSQLITE64'] )

    indexEnd = sys.path.index(pythonpathend) + 1
    if os.environ.has_key('CRABPYTHON'):
        if indexEnd >= len(sys.path): sys.path.append( os.environ['CRABPYTHON'] )
        else: sys.path.insert( indexEnd, os.environ['CRABPYTHON'] )

    #print sys.path

    os.environ['LD_LIBRARY_PATH'] = os.environ['GLITE_LOCATION'] + '/lib' + ':' + os.environ['LD_LIBRARY_PATH']
    os.environ['VOMS_PROXY_INFO_DONT_VERIFY_AC'] = '1'
    #print os.environ['LD_LIBRARY_PATH']
    #print os.environ['VOMS_PROXY_INFO_DONT_VERIFY_AC'] 
    
    """ 
    export LD_LIBRARY_PATH=${GLITE_LOCATION}/lib:${LD_LIBRARY_PATH}
    export VOMS_PROXY_INFO_DONT_VERIFY_AC=1
    """

    ## Get rid of some useless warning
    try:
        import warnings
        warnings.simplefilter("ignore", RuntimeWarning)
        # import socket
        # socket.setdefaulttimeout(15) # Default timeout in seconds
    except ImportError:
        pass # too bad, you'll get the warning

    # Remove libraries which over-ride CRAB libs and DBS_CONFIG setting
    badPaths = []
    if os.environ.has_key('DBSCMD_HOME'): # CMSSW's DBS, remove last bit of path
        badPaths.append('/'.join(os.environ['DBSCMD_HOME'].split('/')[:-1]))
    if os.environ.has_key('DBS_CLIENT_CONFIG'):
        del os.environ['DBS_CLIENT_CONFIG']

    def pathIsGood(checkPath):
        """
        Filter function for badPaths
        """
        for badPath in badPaths:
            if checkPath.find(badPath) != -1:
                return False
        return True

    sys.path = filter(pathIsGood, sys.path)

def runTtrigProd(run,runselection,trial,config):

    config.runselection = runselection
    config.userdircaf = 'TTRIGCalibration/Production/Run' + str(run) + '/v' + str(trial)
    config.digilabel = 'muonDTDigis'
   
    dtTtrigProd = DTTTrigProd(run,config.prod_dir,config) 
    dtTtrigProd.writeCfg()
    project_prod = dtTtrigProd.run()

    print "Sent production jobs with project",project_prod

    crabProd = CrabWatch(project_prod)
    crabProd.start()
    crabProd.join()

    castor_dir = config.castorpath + "/" + config.userdircaf

    result_file = config.result_dir + '/DTTimeBoxes_%s.root'%run
    haddInCastor(castor_dir,result_file)

def runTtrigCorrFirst(run,config):
    dtTtrigCorrFirst = DTTTrigCorrFirst(run,config.pset_opts,config.result_dir,config.template_path)  
    dtTtrigCorrFirst.run()

    print "Finished processing:"
    for pset in dtTtrigCorrFirst.configs: print "--->",pset

def runTtrigValid(run,runselection,trial,input_file,config):
    #ttrig_second_db = os.path.abspath(result_dir + '/' + 'ttrig_second_' + run + '.db')

    config.runselection = runselection
    config.userdircaf = 'TTRIGCalibration/Validation/First/Run' + str(run) + '/v' + str(trial)
    
    dtTtrigValid = DTTTrigValid(run,config.valid_dir,input_file,config) 
    dtTtrigValid.writeCfg()
    project_valid_first = dtTtrigValid.run()

    print "Sent validation jobs with project",project_valid_first

    crabValidFirst = CrabWatch(project_valid_first)
    crabValidFirst.start()
    crabValidFirst.join()

    result_file = config.result_dir + '/DTkFactValidation_%s.root'%run
    castor_dir = config.castorpath + config.userdircaf
    haddInCastor(castor_dir,result_file,'residuals')

def runTtrigResidualCorr(run,config):
    dtTtrigResidualCorr = DTTTrigResidualCorr(run,config.pset_opts,config.result_dir,config.template_path)  
    dtTtrigResidualCorr.run()

    print "Finished processing:"
    for pset in dtTtrigResidualCorr.configs: print "--->",pset

def runTtrigValidResidCorr(run,runselection,trial,input_file,config):
    #ttrig_ResidCorr_db = os.path.abspath(result_dir + '/' + 'ttrig_ResidCorr_' + run + '.db')

    config.runselection = runselection
    config.userdircaf = 'TTRIGCalibration/Validation/ResidCorr/Run' + str(run) + '/v' + str(trial)

    dtTtrigValid_ResidCorr = DTTTrigValid(run,config.valid_dir,input_file,config)
    dtTtrigValid_ResidCorr.writeCfg()
    project_valid_ResidCorr = dtTtrigValid_ResidCorr.run()

    print "Sent validation jobs with project",project_valid_ResidCorr

    crabValidResidCorr = CrabWatch(project_valid_ResidCorr)
    crabValidResidCorr.start()
    crabValidResidCorr.join()

    result_file = config.result_dir + '/DTkFactValidation_ResidCorr_%s.root'%run
    castor_dir = config.castorpath + dtTtrigValid_ResidCorr.crab_opts['USERDIRCAF']
    haddInCastor(castor_dir,result_file,'residuals')

def runTtrigValidSummary(run,input_file,output_file,config):

    print "Processing Validation Summary"
    dtTtrigValidSummary = DTValidSummary(run,config.run_dir,input_file,output_file,config.template_path)
    dtTtrigValidSummary.writeCfg()
    dtTtrigValidSummary.run()
 
    print "...Validation Summary finished"
def runDQMMerge(run,castor_dir,config):

    print "Processing DQM Merge"
    dqm_files = listFilesInCastor(castor_dir,'DQM')
    dtDqmFinal = DTDqm(run,config.run_dir,dqm_files,config.result_dir,config.template_path)
    dtDqmFinal.writeCfg()
    dtDqmFinal.run()

    print "...DQM Merge finished" 

if __name__ == '__main__':
    start = time.time()

    """
    inputFields = ('run','runselection','trial','castorpath','datasetpath','globaltag','email','templatepath')
    requiredFields = ('run','castorpath','datasetpath','globaltag','email','templatepath')

    input = parseInput(inputFields,requiredFields)
    """
    
    parser = optparse.OptionParser(usage="usage: %prog [options]")
    parser.add_option("-r","--run",dest="run", help="set reference run number (typically first run in list)")
    parser.add_option("--runselection",dest="runselection", help="run list or range")
    parser.add_option("--trial",dest="trial", help="trial number used to in the naming of output directories")
    parser.add_option("--castorpath",dest="castorpath", help="path to user area at CAF")
    parser.add_option("--datasetpath",dest="datasetpath", help="dataset name to process")
    parser.add_option("--globaltag",dest="globaltag", help="global tag identifier (without the '::All' string)")
    parser.add_option("--email",dest="email", help="user email")
    parser.add_option("--templatepath",dest="templatepath", help="path to dir with template cfg files")
 
    (input, args) = parser.parse_args()

    requiredFields = ('run','castorpath','datasetpath','globaltag','email','templatepath')
    for item in requiredFields:
        if not getattr(input,item):
            parser.error('field "%s" needs to be set' % item) 
            #raise RuntimeError,'Need to set "%s"' % item

    run = input.run
    runselection = None
    if hasattr(input,'runselection'): runselection = input.runselection
    else: runselection = run

    trial = None
    if hasattr(input,'trial'): trial = input.trial
    else: trial = 1 

    class config: pass

    config.scheduler = 'CAF'
    config.useserver = False
    config.datasetpath = input.datasetpath
    config.runselection = runselection
    #config.totalnumberevents = 1000000
    #config.eventsperjob = 50000
    config.stageOutCAF = True
    config.stageOutLocal = False
    if hasattr(input,'email'): config.email = input.email    

    config.globaltag = input.globaltag + '::All'

    config.castor_prefix = input.castorpath
    config.castorpath = input.castorpath
    config.template_path = input.templatepath
    config.templatepath =  input.templatepath

    run_dir = 'Run%s/Ttrig/Exec' % run
    if not os.path.exists(run_dir): os.makedirs(run_dir)
    config.run_dir = run_dir

    prod_dir = 'Run%s/Ttrig/Production' % run
    if not os.path.exists(prod_dir): os.makedirs(prod_dir)
    config.prod_dir = prod_dir

    valid_dir = 'Run%s/Ttrig/Validation' % run
    if not os.path.exists(valid_dir): os.makedirs(valid_dir)
    config.valid_dir = valid_dir

    result_dir = 'Run%s/Ttrig/Results' % run
    if not os.path.exists(result_dir): os.makedirs(result_dir)
    config.result_dir = result_dir

    log_dir = 'Run%s/Ttrig/Log' % run
    if not os.path.exists(log_dir): os.makedirs(log_dir)
    config.log_dir = log_dir 

    #logFileName = os.path.abspath('%s/Run_%s_v%s.log' % (log_dir,run,trial))
    #logOut = open(logFileName,'w',1)

    print "DT Calibration starting for Run",run
    print "Using runs",runselection
    print "Running at",run_dir
    print "Results at",result_dir 
    #print "Log file at",logFileName
 
    #stdout_original = sys.stdout
    #sys.stdout = logOut

    init()

    timeBoxes = os.path.abspath(result_dir + '/' + 'DTTimeBoxes_' + run + '.root')

    if not os.path.exists(timeBoxes): runTtrigProd(run,runselection,trial,config)
   
    if not os.path.exists(timeBoxes): raise RuntimeError,'Could not produce %s'%timeBoxes

    ttrig_second_db = os.path.abspath(result_dir + '/' + 'ttrig_second_' + run + '.db')

    if not os.path.exists(ttrig_second_db): runTtrigCorrFirst(run,config)

    if not os.path.exists(ttrig_second_db): raise RuntimeError,'Could not produce %s'%ttrig_second_db

    residualsFirst = os.path.abspath(result_dir + '/' + 'DTkFactValidation_' + run + '.root')

    if not os.path.exists(residualsFirst): runTtrigValid(run,runselection,trial,ttrig_second_db,config)

    if not os.path.exists(residualsFirst): raise RuntimeError,'Could not produce %s'%residualsFirst

    ttrig_ResidCorr_db = os.path.abspath(result_dir + '/' + 'ttrig_ResidCorr_' + run + '.db')

    if not os.path.exists(ttrig_ResidCorr_db): runTtrigResidualCorr(run,config)

    if not os.path.exists(ttrig_ResidCorr_db): raise RuntimeError,'Could not produce %s'%ttrig_ResidCorr_db      

    residualsResidCorr = os.path.abspath(result_dir + '/' + 'DTkFactValidation_ResidCorr_' + run + '.root')
    
    if not os.path.exists(residualsResidCorr): runTtrigValidResidCorr(run,runselection,trial,ttrig_ResidCorr_db,config)

    if not os.path.exists(residualsResidCorr): raise RuntimeError,'Could not produce %s'%residualsResidCorr

    summaryResiduals = os.path.abspath(result_dir + '/' + 'SummaryResiduals_' + run + '.root')

    if not os.path.exists(summaryResiduals): runTtrigValidSummary(run,residualsResidCorr,summaryResiduals,config)

    if not os.path.exists(summaryResiduals): raise RuntimeError,'Could not produce %s'%summaryResiduals

    castorDirResidCorr = config.castor_prefix + 'TTRIGCalibration/Validation/ResidCorr/Run' + str(run) + '/v' + str(trial)
    runDQMMerge(run,castorDirResidCorr,config)

    #sys.stdout = stdout_original
 
    stop = time.time() 
    print "DT Calibration finished for Run",run
    print "Time elapsed was %.1f seconds"%(stop-start)
