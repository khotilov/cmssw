
process TEST = {
       source = PoolSource {
                untracked vstring fileNames = {"file:/home/ippolito/globaldaq/00000282_FilterUnitFramework_0_0.root"}
                untracked int32 maxEvents = 2000
     }

# es_source of ideal geometry
# ===========================
# endcap muon only...
   include "Geometry/MuonCommonData/data/muonEndcapIdealGeometryXML.cfi"

# flags for modelling of CSC geometry
# ===================================
   include "Geometry/CSCGeometry/data/cscGeometry.cfi"

# magnetic field (do I need it?)
# ==============================
   include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"


   service = MessageLogger {
      vstring destinations = { "log.txt", "debug.txt", "errors.txt" }
      vstring statistics = { "statistics.txt" }

# Constrain log.txt to LogInfo output...
##      PSet log.txt = { string threshold = "INFO" }

# No constraint on log.txt content...
      PSet log.txt = { string threshold= "INFO"
			int32 lineLength = 132
                       bool noLineBreaks = true
                     }

      PSet debug.txt = { string threshold = "INFO"
                        int32 lineLength = 132
                        bool noLineBreaks = true
                       } 

      PSet errors.txt = { string threshold = "ERROR" }

      PSet statistics.txt = { string threshold = "INFO" }

# turn on the following to get LogDebug output
# ============================================
      vstring debugModules = {  "*"  } 

  }


# block of common parameters for algorithms
# =========================================
   block common_params = {

# Flag to send info _I_ want to LogInfo (other users may not be interested, although they should be!)
# Set false to minimize LogInfo output

     untracked bool verboseInfo = true

     int32 clusterSize = 3
     double clusterChargeCut = 50.
     double clusterProbCut = -1.
     int32 recHitBunchMatching = 2
     bool useAverageErrors = false
     double maxChi2InClusterFit = 15.
     double centroidErrorScaleFactor = 1.4

//     bool doCrosstalkCorrection = true
//     double crosstalkLevel = 0.026

# Sub-algorithm names for finding pulseheight on strips, and for clustering neighbouring strips

     string pulseheightOnStripFinder   = "CSCFixedBinOfSCAPulse"
     string stripClusterPositionFinder = "CSCStripClusterFitter"
   }


# module must be an EDProducer or similar
# =======================================
   module rechitcomp= RecHitComp {

# Name of digi producer module(s)...
     string CSCStripDigiProducer = " "
     string CSCWireDigiProducer  = " "

     int32 no_of_chamber_types = 9

     vstring algo_types = { 
                            "CSCRecHit2DFromStripsAndWires",
                            "CSCRecHit2DFromORedStrips"
                           }

# std::vector<edm::ParameterSet>
     VPSet algo_psets = {
                            {using common_params}, 
                            {using common_params} 
                        }

# std::vector<int>
     vint32 algo_per_chamber_type = { 2, 1, 1, 1, 1, 1, 1, 1, 1 }
   
## Might want to allow different parameters for same algorithm in different chamber types?
## Then the alog_psets should be allocated per chamber type too.
   }


	module cscunpacker = CSCDCCUnpacker {
	        		untracked bool Debug = false
 untracked string theMappingFile = "/home/ippolito/CMSSW_0_6_0/src/RecoLocalMuon/CSCStandAlone/test/csc_slice_test_map.txt"
			     } 
//        module cathode_hits_rechit=cathode_hits_rechit{
//                             }

	module out = PoolOutputModule {
       	untracked string fileName ="digi.root"
	}
//	path p = {cscunpacker}
//        path p = {cathode_hits_rechit}
	path p = {cscunpacker,rechitcomp}
	endpath e = {out}
}
