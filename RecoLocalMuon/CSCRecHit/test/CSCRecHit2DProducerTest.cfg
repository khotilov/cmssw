# Incremental design of configuration file for CSCRecHit2D building
# Tim Cox 06-Mar-2006

process TEST = {

   source = PoolSource {
     		 untracked string fileName = 'cscdigis.root'
     		 untracked int32 maxEvents = -1
     		 untracked uint32 debugVebosity = 10
     		 untracked bool   debugFlag     = true
   }

   es_source = XMLIdealGeometryESSource
   {
      FileInPath GeometryConfiguration="Geometry/CSCSimAlgo/test/testGeoCo.xml"
      string rootNodeName = ""
   }
# modelling flags (for completeness - internal defaults are already sane)
# BUT FOR NOW TURN OFF REAL WIRE GEOM, TO COMPARE WITH ORCA
   es_module = CSCGeometryESModule
   {
      bool useRadialStrips       = true
      bool useRealWireGeometry   = false
      bool useGangedStripsInME1a = true
      bool useOnlyWiresInME1a    = false
   }

   es_source magfield = XMLIdealGeometryESSource {
     FileInPath GeometryConfiguration = "SimG4Core/Application/test/FieldConfiguration.xml"
     string rootNodeName ="MagneticFieldVolumes:MAGF"
   }

   es_module = VolumeBasedMagneticFieldESProducer {
     double findVolumeTolerance = 0.0
     untracked bool cacheLastVolume = true
     untracked bool timerOn = false
   }

# services
 
   service = MessageLogger {
   vstring destinations = { "log.txt", "debug.txt", "errors.txt" }
   vstring statistics = { "statistics.txt" }

   PSet log.txt = { string threshold = "INFO" }
   PSet debug.txt = { string threshold = "DEBUG" } 
   PSet errors.txt = { string threshold = "ERROR" }
   PSet statistics.txt = { string threshold = "INFO" }

   vstring debugModules = {  "*"  } 
  }


# blocks
# Looks like they're accessed just using the specific ParameterSet(s) they're embedded inside

   block common_params = {
     untracked bool verboseDebug = true
     int32 clusterSize = 3
     double clusterChargeCut = 10.
     double clusterProbCut = -1.
     int32 recHitBunchMatching = 2
     bool useAverageErrors = false
     double maxChi2InClusterFit = 15.
     double centroidErrorScaleFactor = 1.4

//     bool doCrosstalkCorrection = true
//     double crosstalkLevel = 0.026

// Sub-algorithm names for finding pulseheight on strips, and for clustering neighbouring strips
     string pulseheightOnStripFinder   = "CSCFixedBinOfSCAPulse"
     string stripClusterPositionFinder = "CSCStripClusterFitter"

   }


# module must be an EDProducer or similar
   module rechitproducer= CSCRecHit2DProducer {

# Name of digi producer module(s)...
     string CSCStripDigiProducer = "muoncscdigi"
     string CSCWireDigiProducer  = "muoncscdigi"

     int32 no_of_chamber_types = 9

     vstring algo_types = { 
                            "CSCRecHit2DFromStripsAndWires",
                            "CSCRecHit2DFromORedStrips"
                           }

# std::vector<edm::ParameterSet>
     VPSet algo_psets = {
                            {using common_params}, 
                            {using common_params} 
                        }

# std::vector<int>
     vint32 algo_per_chamber_type = { 2, 1, 1, 1, 1, 1, 1, 1, 1 }
   
## Might want to allow different parameters for same algorithm in different chamber types?
## Then the alog_psets should be allocated per chamber type too.
   }

 module out = PoolOutputModule {
        	untracked string fileName ="cscrechits.root"
 }

 path p = {rechitproducer}
 endpath ep = {out}

}
