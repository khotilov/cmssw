#!/usr/bin/perl

################################################################################
#
# runParser
# ---------
#
# run the CMSSW release parser and populate a ConfDB.
#
# NOTE: The current subsystem whitelist is also defined here!
#
#             02/22/2008 Philipp Schieferdecker <philipp.schieferdecker@cern.ch>
################################################################################


my $usage =
    "--hltdev|--rcms|--test|--local (Specification of Database)\n" .
    "--dbpwrd <pwrd>                (Database Password)\n" .
    "--dbuser <user>    (optional)  (Database Username)\n" .
    "--release <tag>    (optional)  (Default: \$CMSSW_VERSION)\n" .
    "--relative <tag>   (optional)  (Update w.r.t. this release tag)\n" .
    "--parse            (optional)  (Parse the specified release)\n" .
    "--patch            (optional)  (Apply patches for known problems)\n" .
    "--patchfile <file> (optional)  (Description file for patches)\n" .
    "--all              (optional)  (Disregard whitelist)\n";

if (@ARGV==0) { print $usage . "\n"; exit(0); }


my $dbType;
my $dbHost;
my $dbName;
my $dbUser;
my $dbPwrd;

my $releaseTag;
my $relativeTag;

my $cmssw_base    = get_env_variable("CMSSW_BASE");
my $cmssw_version = get_env_variable("CMSSW_VERSION");

my $parserPath = $cmssw_base . "/src/EventFilter/ConfigDB/parser";
my $parserExe  = $parserPath . "/ConfdbSourceToDB.py";

my $doVerbose = 0;

my $doAll     = 0;
my @whiteList =
    ("CalibCalorimetry",
     "CalibMuon",
     "CalibTracker",
     "Calibration",
     "CondCore",
     "DQM",
     "DQMServices",
     "EventFilter",
     "FWCore",
     "Geometry",
     "GeometryReaders",
     "HLTrigger",
     "IOPool",
     "IORawData",
     "JetMETCorrections",
     "L1Trigger",
     "L1TriggerConfig",
     "MagneticField",
     "PhysicsTools",
     "RecoBTag",
     "RecoBTau",
     "RecoCaloTools",
     "RecoEcal",
     "RecoEgamma",
     "RecoJets",
     "RecoLocalCalo",
     "RecoLocalMuon",
     "RecoLocalTracker",
     "RecoLuminosity",
     "RecoMET",
     "RecoMuon",
     "RecoPixelVertexing",
     "RecoTauTag",
     "RecoTracker",
     "RecoVertex",
     "SimCalorimetry",
     "SimGeneral",
     "TrackPropagation",
     "TrackingTools"
     );

my $doParse   = 0;
my $doPatch   = 0;
my $patchFile = $parserPath . "/problems.txt";
my $patchExe;


#
# parameters
#
foreach $param (@ARGV)
{
    if ($param eq "--help") {
	print $usage . "\n";
	exit(0);
    }
    elsif ($param eq "--local") {
	$dbType   = "MySQL";
	$dbHost   = "localhost";
	$dbName   = "hltdb";
	$dbUser   = "schiefer";
	$patchExe = $parserPath . "/AddProblemModulesAndParametersMySQL.py";
    }
    elsif ($param eq "--test9r") {
	$dbType   = "Oracle";
	$dbHost   = "CMS_ORCOFF_INT9R";
	$dbUser   = "CMS_HLT";
	$patchExe = $parserPath . "/AddProblemModulesAndParametersOracle.py";
    }
    elsif ($param eq "--test2r") {
	$dbType   = "Oracle";
	$dbHost   = "CMS_ORCOFF_INT2R";
	$dbUser   = "CMS_HLT";
	$patchExe = $parserPath . "/AddProblemModulesAndParametersOracle.py";
    }
    elsif ($param eq "--test") {
	$dbType   = "Oracle";
	$dbHost   = "CMS_ORCOFF_INT2R";
	$dbUser   = "CMS_HLT_TEST";
	$patchExe = $parserPath . "/AddProblemModulesAndParametersOracle.py";
    }
    elsif ($param eq "--hltdev") {
	$dbType   = "Oracle";
	$dbHost   = "CMS_ORCOFF_PROD";
	$dbUser   = "CMS_HLTDEV_ADMIN";
	$patchExe = $parserPath . "/AddProblemModulesAndParametersOracle.py";
    }
    elsif ($param eq "--rcms") {
	$dbType   = "Oracle";
	$dbHost   = "CMS_RCMS_SSH";
	$dbUser   = "CMS_HLT";
	$patchExe = $parserPath . "/AddProblemModulesAndParametersOracle.py";
    }
    elsif ($dbPwrd      eq "fillme")     { $dbPwrd      = $param;   }
    elsif ($param       eq "--dbpwrd")   { $dbPwrd      = "fillme"; }
    elsif ($dbUser      eq "fillme")     { $dbUser      = $param;   }
    elsif ($param       eq "--dbuser")   { $dbUser      = "fillme"; }
    elsif ($releaseTag  eq "fillme")     { $releaseTag  = $param;   }
    elsif ($param       eq "--release")  { $releaseTag  = "fillme"; }
    elsif ($relativeTag eq "fillme")     { $relativeTag = $param;   }
    elsif ($param       eq "--relative") { $relativeTag = "fillme"; }
    elsif ($patchFile   eq "fillme")     { $patchFile   = $param; $doPatch=1; }
    elsif ($param       eq "--patchfile"){ $patchFile   = "fillme"; }
    elsif ($param       eq "--parse")    { $doParse     = 1;        }
    elsif ($param       eq "--patch")    { $doPatch     = 1;        }
    elsif ($param       eq "--all")      { $doAll       = 1;        }
    elsif ($param       eq "--verbose")  { $doVerbose   = 1;        }
    else { die "Unknown option $param"; }
}

if ($releaseTag  eq "") { $releaseTag = $cmssw_version; }


die "No scram project area setup!\n" if ($cmssw_base eq "");
die "$parserExe doesn't exist!"      if (!(-e $parserExe));
die "--dbpwrd MUST be specified!"    if ($dbPwrd eq "");
die "No valid DB specified: --offline|--online|--test|--local" if ($dbHost eq "");
die "$patchFile doesn't exist!" if ($doPatch && ! -e $patchFile);

my $parserCmd = $parserExe . " -t $dbType -o $dbHost -u $dbUser -s $dbPwrd ";

if ($dbType eq "MySQL")  { $parserCmd = $parserCmd . "-d $dbName "; }


my $releaseName = $releaseTag;
my $tmp = validate_release($releaseTag);
# release+tags
if (!$tmp eq "")
{
    $releaseName = $releaseTag;
    $parserCmd   = $parserCmd . "-a $releaseTag ";
    $releaseTag = $tmp;

}
# unauthorized user
elsif ($dbUser eq "CMS_HLT_ADMIN")
{
    die "user $dbUser should only parse 'release+tags'!\n";
}
# if *NOT* release+tags, allow --relative option
elsif (!$relativeTag eq "")
{
    $parserCmd = $parserCmd . "-m $relativeTag ";
}

$parserCmd = $parserCmd . "-r $releaseTag ";

if (!$doAll)
{
    $first = 1;
    $parserCmd = $parserCmd . "-w ";
    foreach (@whiteList) {
	if ($first) { $first = 0; }
	else { $parserCmd = $parserCmd . ","; }
	$parserCmd = $parserCmd . $_;
    }
}
if ($doVerbose) { $parserCmd = $parserCmd . " -v 3" }



#
# parse release
#
if ($doParse)
{
    print
	"\n--------------------------------------------------\n" .
	"execute parser\n" .
	"--------------------------------------------------\n" .
	"$parserCmd\n\n";
    
    my $parserLog = "parser" . "." . $dbHost . "." . $releaseName . ".log";
    system("rm -f $parserLog; $parserCmd > $parserLog");
    print "DONE! (see $parserLog for details)\n\n"; 
}


#
# patch release
#
if ($doPatch)
{
    $patchCmd = $patchExe .
	" -o $dbHost -u $dbUser -s $dbPwrd -r $releaseName -z $patchFile";
    if ($dbType eq "MySQL") { $patchCmd = $patchCmd . " -d $dbName"; }
    if ($doVerbose) { $patchCmd = $patchCmd . " -v 3" }
    print 
	"\n--------------------------------------------------\n" .
	"patch release $releaseName\n" .
	"--------------------------------------------------\n" .
	"$patchCmd\n\n";
    
    my $patchLog = "patch" . "." . $dbHost . "." . $releaseName . ".log";
    system("rm -f $patchLog; $patchCmd > $patchLog");
    print "DONE! (see $patchLog for details)\n\n"; 
}


#-------------------------------------------------------------------------------
# subroutines
#-------------------------------------------------------------------------------

#_______________________________________________________________________________
sub get_env_variable
{
    my ($varname) = @_;
    my $result;
    if (defined $ENV{$varname}) 
    {
	$result = $ENV{$varname};
	print "\$" . $varname . " = $result\n";
    }
    else { print ("WARNING: \$" . $varname . " undefined!\n"); }
    return $result;
}

#_______________________________________________________________________________
sub validate_release
{
    my ($input) = @_;
    
    my $prefix;
    my $suffix;
    my $result = "";
    
    if ($input =~m/CMSSW_([\d]*)_([\d]*)_X_([\d]{4})-([\d]{2})-([\d]{2})-([\d]{4})/)
    {
	print "\$input = $input\n";
    }
    elsif ($input =~ m/CMSSW_([\d]*)_([\d]*)_([\d]*)_pre([\d]*)([\S]*)/)
    {
	$prefix = "CMSSW_" . $1 . "_" . $2 . "_" . $3 . "_pre" . $4;
	$suffix = $5;
    }
    elsif ($input =~ m/CMSSW_([\d]*)_([\d]*)_([\d]*)([\S]*)/)
    {
	$prefix = "CMSSW_" . $1 . "_" . $2 . "_" . $3;
	$suffix = $4; 
    } 
    else {
	die "invalid release '$input'!";
    }
    
    if ($suffix =~ m/_HLT([\d])/) {
	$count = $1-1;
	if ($count>=0) { $result = $prefix; }
	else { die "invalid release '$input'!"; }
    }
    
    return $result;
}
