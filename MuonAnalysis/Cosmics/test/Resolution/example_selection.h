#ifndef example_selection_h
#define example_selection_h

#include <algorithm>
#include <cmath>
#include "MuonAnalysis/Cosmics/plugins/CosmicSplittingResolutionNtuple.h"

struct selection {
  const CosmicSplittingResolutionNtuple* nt;
  unsigned short min_pixel_layers;
  unsigned short min_strip_layers;
  bool no_csc_allowed;
  bool no_shared_hits;
  double max_dxy;
  double max_dz;
  bool only_2011;

  selection(const CosmicSplittingResolutionNtuple* nt_) : nt(nt_) {
    min_pixel_layers = 1;
    min_strip_layers = 8;
    no_csc_allowed = true;
    no_shared_hits = true;
    max_dxy = 1e99;
    max_dz = 1e99;
    only_2011 = false;
  }

  bool cut() const;
};

bool selection::cut() const {
  if (no_csc_allowed && nt->hit_csc)
    return true;

  if (no_shared_hits) {
    for (int i = 0; i < n_tracks; ++i) {
      if (nt->shared_hits[i] > 0)
	return true;
    }
  }

  // run list produced from runs.py:get_run_list(run_types=['cosmics'], muon_subdet='dtonly', require_pixels=True)
  static const unsigned num_runs = 664;
  static const unsigned run_list[num_runs] = {127476, 127517, 127540, 127541, 127557, 127576, 127667, 127668, 127691, 127698, 127708, 127713, 127715, 127716, 127729, 127740, 127752, 127755, 127756, 128711, 128712, 128713, 128715, 128730, 128732, 128734, 128736, 128739, 128740, 128741, 128743, 128744, 128745, 128746, 128747, 128749, 128750, 128752, 128753, 128755, 128757, 128764, 128765, 128766, 128891, 129035, 129037, 130201, 130209, 130258, 130263, 130269, 130277, 130278, 130747, 130751, 130765, 130767, 130768, 130771, 130772, 130777, 130787, 130792, 131065, 131101, 131115, 131124, 131173, 131185, 131186, 131188, 131297, 131300, 131420, 131626, 131697, 131700, 131705, 132202, 132224, 132226, 132348, 132349, 132361, 132362, 132365, 132366, 132467, 132562, 132563, 132589, 132592, 132916, 132917, 132918, 132919, 132920, 132921, 132922, 133016, 133017, 133441, 133442, 133477, 133487, 133908, 133919, 134574, 134931, 134933, 135050, 135051, 135176, 135454, 135944, 135949, 135955, 135960, 135966, 135978, 135983, 135993, 136083, 136899, 136902, 136909, 136911, 138159, 138185, 138186, 138188, 138767, 138791, 138802, 138803, 138810, 138825, 139667, 139994, 140342, 140343, 142089, 142114, 142118, 142159, 142516, 142560, 147592, 147593, 147594, 147595, 147596, 147599, 147642, 147643, 147644, 147645, 147648, 152649, 152866, 152889, 157953, 157956, 157957, 157989, 158028, 158033, 158037, 158038, 158039, 158040, 158041, 158046, 158067, 158068, 158076, 158084, 158090, 158095, 158097, 158164, 158197, 158199, 158225, 158270, 158326, 158335, 158383, 160071, 160077, 160789, 160844, 160960, 160961, 161314, 161318, 162816, 162817, 162884, 162905, 162911, 162913, 162935, 162937, 162944, 162945, 162947, 162951, 162972, 162978, 162985, 163082, 163089, 163103, 163155, 163240, 163263, 163291, 163343, 163347, 163360, 163392, 163404, 163407, 163469, 163486, 163526, 163527, 163601, 163610, 163709, 163743, 163744, 163745, 163767, 163768, 163769, 163782, 163798, 163800, 163801, 163819, 163822, 163823, 163829, 163834, 163837, 163845, 163847, 163849, 163850, 163851, 163852, 163853, 163873, 163877, 163887, 163892, 164953, 164954, 164961, 164964, 164965, 164966, 165066, 165078, 165113, 165366, 165374, 165377, 165380, 165404, 165408, 165449, 165452, 165490, 165498, 165508, 165516, 165561, 165576, 165586, 165590, 165623, 165625, 165740, 165747, 165808, 165873, 165972, 165982, 165986, 166001, 166013, 166023, 166043, 166152, 166166, 166232, 166247, 166256, 166396, 166464, 166488, 166495, 166504, 166516, 166532, 166533, 166655, 166657, 166666, 166688, 166690, 166703, 166758, 166770, 166789, 166790, 166813, 166832, 166846, 166847, 166854, 166866, 166867, 166868, 166869, 166881, 166898, 166900, 166902, 166913, 166925, 166926, 166933, 166973, 167019, 167021, 167046, 167154, 167155, 167156, 167163, 167164, 167167, 167168, 167169, 167189, 167194, 167205, 167207, 167208, 167221, 167222, 167225, 167227, 167230, 167236, 167239, 167240, 167242, 167247, 167260, 167463, 167536, 167537, 167583, 167591, 167634, 167678, 167679, 167692, 167698, 167720, 167742, 167748, 167756, 167788, 167791, 167792, 167856, 167943, 167961, 167964, 169611, 169612, 170204, 170217, 170265, 170313, 170322, 170325, 170359, 170410, 170531, 170547, 170555, 170571, 170575, 170728, 170776, 170778, 170807, 170950, 170979, 171007, 171127, 171195, 171227, 171251, 171292, 171342, 171373, 171390, 171423, 171469, 171525, 171652, 171737, 171823, 171903, 171939, 172054, 172093, 172179, 172180, 172181, 172187, 172188, 172189, 172213, 172222, 172228, 172257, 172288, 172289, 172304, 172308, 172318, 172321, 172322, 172391, 172405, 172622, 172659, 172751, 172755, 172780, 172805, 172806, 172826, 172849, 172854, 172855, 172856, 172918, 172923, 173043, 173186, 173200, 173247, 173249, 173252, 173313, 173361, 173383, 173410, 173420, 173433, 173442, 173568, 173585, 173619, 173620, 173626, 173628, 173630, 173633, 173634, 173635, 173636, 173672, 173732, 173735, 175117, 175260, 175263, 175264, 175265, 175266, 175360, 175365, 175366, 175868, 175891, 175898, 175914, 175963, 175964, 175978, 175980, 175992, 175994, 176014, 176034, 176037, 176051, 176057, 176088, 176095, 176096, 176182, 176291, 176296, 176299, 176376, 176378, 176379, 176382, 176386, 176473, 176554, 176560, 176576, 176578, 176642, 176643, 176644, 176651, 176652, 176654, 176655, 176656, 176659, 176673, 176675, 176678, 176689, 176690, 176704, 176708, 176767, 176774, 176786, 176871, 176879, 176939, 176985, 177055, 177056, 177058, 177059, 177077, 177091, 177098, 177099, 177112, 177124, 177133, 177143, 177209, 177211, 177212, 177224, 177299, 177308, 177456, 177460, 177471, 177478, 177479, 177480, 177486, 177546, 177547, 177696, 177724, 177725, 177733, 177737, 177738, 177739, 177747, 177756, 177759, 177778, 177884, 177885, 177895, 178082, 178124, 178133, 178140, 178153, 178166, 178213, 178225, 178230, 178231, 178234, 178236, 178267, 178288, 178353, 178356, 178357, 178468, 178680, 178690, 178751, 178791, 178815, 178819, 178886, 178889, 178893, 178895, 178897, 179308, 179358, 179366, 179379, 179403, 179487, 179508, 179595, 179961, 179971, 179979, 179991, 180030, 180039, 180106, 180197, 180199, 180203, 180207, 180258, 180259, 180266, 181614, 181618, 181619, 181621, 181622, 181623, 181624, 181625, 181626, 181702, 181784, 181977, 182148, 182159, 182165, 182677, 182678, 182686, 182687, 182711, 182713, 182720};
  static const unsigned* run_list_end = run_list + num_runs;

  if (nt->id == 0 && ((only_2011 && nt->run < 157866) || std::find(run_list, run_list + num_runs, nt->run) == run_list_end))
    return true;

  for (int i = 0; i < n_tracks; ++i) {
    if (i == tk_stalone)
      continue;
    
    for (int j = 0; j < 2; ++j) {
      if (nt->pixel_layers[i][j] < min_pixel_layers)
	return true;
      if (nt->strip_layers[i][j] < min_strip_layers)
	return true;
      if (fabs(nt->unprop_dxy[i][j]) > max_dxy)
	return true;
      if (fabs(nt->unprop_dz[i][j]) > max_dz)
	return true;
    }
  }
  
  return false;
}

#endif
