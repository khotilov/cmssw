#!/usr/bin/env python

import sys
import os
import commands
import getopt
import shlex, subprocess

globalTag = {
  '8E29': 'auto:startup',
  'GRun': 'auto:startup',
  'data': 'auto:hltonline',
  '1E31': 'auto:startup',
  'HIon': 'auto:startup',
  None:   'auto:startup',      # use as default
}

def usage():
    print 'Usage:'
    print '  hltGetConfiguration [--process <Name>] [--type <Type>]'
    print '                      [--globaltag <GlobalTag::All>] [--unprescale] [--l1 <L1_MENU_vX>]'
    print '                      [--data|--mc] [--cff|--full [--online|--offline [--dataset <DATASET>]]]'
    print '                      <HLT menu from ConfDB>'
    print
    print 'Options:'
    print '  --process          Override the process name [default is "HLT"]'
    print '  --type             Set global options acording to a specific HLT luminosity and type (GRun, 8E29, 1E31, HIon)'
    print '                     The default is to use the "GRun" settings, for rerunning an online-like menu on data and MC'
    print
    print '  --globaltag        Override the GlobalTag in the HLT menu:'
    print '                     when running on data, the default behaviour is to not override the GobalTag in the HLT menu'
    print '                     when running on MC, the default comes from the "type" and the current PyRelVal configuration'
    print '                     To run on data with a different release than the menu was designed for, try "auto:hltonline"'
    print '  --unprescale       Remove any HLT prescales'
    print '  --l1               Override the L1 menu, using the payload "L1GtTriggerMenu_<L1_MENU_vX>_mc" from the database'
    print
    print '  --data             Prepare a menu for running on data (RAW in "source") [this is the default]'
    print '  --mc               Prepare a menu for running on MC (RAW in "rawDataCollector")'
    print '  --cff              Generate a stripped down configuration file fragment, for inclusion by e.g. cmsDriver.py'
    print '  --full             Generate a full configuration file, with minimal modifications [this is the default]'
    print '  --online           Take the online compliant connection string and GlobalTag from the menu [only valid in "full" mode]'
    print '  --offline          Override the connection string and GlobalTag with offline values [only valid in "full" mode, this is the default]'
    print '  --dataset          Take the input files from the specified DATASET [only valid for "offline" mode]'
    print
    print 'Notes:'
    print '     using "--online" and "--mc" together is not supported (there is no online compliant GlobalTag for MC)'
    print '     using "--online/--offline" is meaingful only in conjunction with "--full"'
    print '     using "--dataset" is meaingful only in conjunction with "--offline" '


processName     = 'HLT'
processType     = ''
doCff           = False
runOnData       = True
runOnline       = False
menuL1Override  = ''
menuL1Connect   = ''
menuGlobalTag   = ''
menuConfig      = ''
menuConfigDB    = ''
menuConfigName  = ''
menuConfigRun   = ''
menuDataset     = ''
menuUnprescale  = False

def pipe(cmdline, input = None):
  args = shlex.split(cmdline)
  if input is not None:
    command = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=None)
  else:
    command = subprocess.Popen(args, stdin=None, stdout=subprocess.PIPE, stderr=None)
  (out, err) = command.communicate(input)
  return out


def build_query(db, menu, run):
  if run:
    return '--runNumber %s' % run
  else:
    return '--%s --configName %s' % (db, menu)

def build_source(src):
  if src is None:
    return '--noedsources'
  else:
    return '--input ' + src

def build_options(opts):
  return ' '.join(['--%s %s' % (key, ','.join(vals)) for key, vals in opts.iteritems() if vals])

def build_cmdline(db, menu, run, src, opts, full = True):
  if full:
    return 'edmConfigFromDB %s %s %s'       % (build_query(db, menu, run), build_source(src), build_options(opts))
  else:
    return 'edmConfigFromDB --cff %s %s %s' % (build_query(db, menu, run), build_source(src), build_options(opts))


def parse_options(args):
  # global variables
  global processName
  global processType
  global doCff
  global runOnData
  global runOnline
  global menuL1Override
  global menuL1Connect
  global menuGlobalTag
  global menuConfig
  global menuConfigDB
  global menuConfigName
  global menuConfigRun
  global menuDataset
  global menuUnprescale

  # valid options
  options = ( 'process=', 'l1=', 'globaltag=', 'type=', 'data', 'mc', 'online', 'offline', 'full', 'cff', 'dataset=', 'unprescale' )

  try:
    (opts, args) = getopt.gnu_getopt(args, 'f', options)
  except getopt.error, error:
    print 'Error:', error.msg
    print
    usage()
    sys.exit(1)

  for (opt, value) in opts:
    # set the process name
    if opt == '--process':
      processName = value
    elif opt == '--type':
      processType = value
    # generate a cff fragment
    elif opt == '--cff':
      doCff = True
    # generate a full configuration file
    elif opt == '--full':
      doCff = False
    # specify L1 menu and force L1 override
    elif opt == '--l1':
      if ':' in value:
        menuL1Override = "L1GtTriggerMenu_%s_mc" % value.rsplit(':', 1)[1]
        menuL1Connect  = '"%s"' % value.rsplit(':', 1)[0]
      else:
        menuL1Override = "L1GtTriggerMenu_%s_mc" % value
    # specify GlobalTag
    elif opt == '--globaltag':
      menuGlobalTag = value
    # run on data (RAW in 'source')
    elif opt == '--data':
      runOnData = True
    # run on MC (RAW in 'rawDataCollector')
    elif opt == '--mc':
      runOnData = False
    # run online (keep online compliant GlobalTag from the menu)
    elif opt == '--online':
      runOnline = True
    # run offline(overrithe the GlobalTag from the menu with an offline one)
    elif opt == '--offline':
      runOnline = False
    # set input files from a dataset through DBS
    elif opt == '--dataset':
      menuDataset = value
    elif opt == '--unprescale':
      menuUnprescale = True
    else:
      print 'Invalid option: %s', opt
      usage()
      sys.exit(1)

  # look for the required arguments
  try:
      menuConfig  = args[0]
  except:
      usage()
      sys.exit(1)

  # extract the database and configuration name
  if ':' in menuConfig:
    (db, name) = menuConfig.split(':')
    if db == 'run':
      menuConfigDB   = ''
      menuConfigName = ''
      menuConfigRun  = name
    elif db in ('hltdev', 'orcoff'):
      menuConfigDB   = db
      menuConfigName = name
      menuConfigRun  = ''
    else:
      print 'Unknown ConfDB database "%s", valid values are "hltdev" (default) and "orcoff")' % menuConfigDB
      sys.exit(1)
  else:
    menuConfigDB   = 'hltdev'
    menuConfigName = menuConfig
    menuConfigRun  = ''

# parse command line arguments and options
parse_options(sys.argv[1:])

# Initialize everything
menuConfigOptions = {
    'essources' : [],
    'esmodules' : [],
    'modules'   : [],
    'services'  : [],
    'paths'     : [],
    'psets'     : [],
}

menuConfigSource = None

if doCff:
    menuConfigOptions['essources'].append( "-GlobalTag" )
    menuConfigOptions['essources'].append( "-Level1MenuOverride" )
    menuConfigOptions['essources'].append( "-HepPDTESSource" )
    menuConfigOptions['essources'].append( "-XMLIdealGeometryESSource" )
    menuConfigOptions['essources'].append( "-eegeom" )
    menuConfigOptions['essources'].append( "-es_hardcode" )
    menuConfigOptions['essources'].append( "-magfield" )

    menuConfigOptions['esmodules'].append( "-AutoMagneticFieldESProducer" )
    menuConfigOptions['esmodules'].append( "-SlaveField0" )
    menuConfigOptions['esmodules'].append( "-SlaveField20" )
    menuConfigOptions['esmodules'].append( "-SlaveField30" )
    menuConfigOptions['esmodules'].append( "-SlaveField35" )
    menuConfigOptions['esmodules'].append( "-SlaveField38" )
    menuConfigOptions['esmodules'].append( "-SlaveField40" )
    menuConfigOptions['esmodules'].append( "-VBF0" )
    menuConfigOptions['esmodules'].append( "-VBF20" )
    menuConfigOptions['esmodules'].append( "-VBF30" )
    menuConfigOptions['esmodules'].append( "-VBF35" )
    menuConfigOptions['esmodules'].append( "-VBF38" )
    menuConfigOptions['esmodules'].append( "-VBF40" )
    menuConfigOptions['esmodules'].append( "-CSCGeometryESModule" )
    menuConfigOptions['esmodules'].append( "-CaloGeometryBuilder" )
    menuConfigOptions['esmodules'].append( "-CaloTowerGeometryFromDBEP" )
    menuConfigOptions['esmodules'].append( "-CaloTowerHardcodeGeometryEP" )
    menuConfigOptions['esmodules'].append( "-CastorGeometryFromDBEP" )
    menuConfigOptions['esmodules'].append( "-CastorHardcodeGeometryEP" )
    menuConfigOptions['esmodules'].append( "-DTGeometryESModule" )
    menuConfigOptions['esmodules'].append( "-EcalBarrelGeometryEP" )
    menuConfigOptions['esmodules'].append( "-EcalBarrelGeometryFromDBEP" )
    menuConfigOptions['esmodules'].append( "-EcalElectronicsMappingBuilder" )
    menuConfigOptions['esmodules'].append( "-EcalEndcapGeometryEP" )
    menuConfigOptions['esmodules'].append( "-EcalEndcapGeometryFromDBEP" )
    menuConfigOptions['esmodules'].append( "-EcalLaserCorrectionService" )
    menuConfigOptions['esmodules'].append( "-EcalPreshowerGeometryEP" )
    menuConfigOptions['esmodules'].append( "-EcalPreshowerGeometryFromDBEP" )
    menuConfigOptions['esmodules'].append( "-HcalGeometryFromDBEP" )
    menuConfigOptions['esmodules'].append( "-HcalHardcodeGeometryEP" )
    menuConfigOptions['esmodules'].append( "-HcalTopologyIdealEP" )
    menuConfigOptions['esmodules'].append( "-MuonNumberingInitialization" )
    menuConfigOptions['esmodules'].append( "-ParametrizedMagneticFieldProducer" )
    menuConfigOptions['esmodules'].append( "-RPCGeometryESModule" )
    menuConfigOptions['esmodules'].append( "-SiStripGainESProducer" )
    menuConfigOptions['esmodules'].append( "-SiStripRecHitMatcherESProducer" )
    menuConfigOptions['esmodules'].append( "-SiStripQualityESProducer" )
    menuConfigOptions['esmodules'].append( "-StripCPEfromTrackAngleESProducer" )
    menuConfigOptions['esmodules'].append( "-TrackerDigiGeometryESModule" )
    menuConfigOptions['esmodules'].append( "-TrackerGeometricDetESModule" )
    menuConfigOptions['esmodules'].append( "-VolumeBasedMagneticFieldESProducer" )
    menuConfigOptions['esmodules'].append( "-XMLFromDBSource" )
    menuConfigOptions['esmodules'].append( "-ZdcGeometryFromDBEP" )
    menuConfigOptions['esmodules'].append( "-ZdcHardcodeGeometryEP" )
    menuConfigOptions['esmodules'].append( "-hcal_db_producer" )
    menuConfigOptions['esmodules'].append( "-l1GtTriggerMenuXml" )
    menuConfigOptions['esmodules'].append( "-L1GtTriggerMaskAlgoTrigTrivialProducer" )
    menuConfigOptions['esmodules'].append( "-L1GtTriggerMaskTechTrigTrivialProducer" )
    menuConfigOptions['esmodules'].append( "-sistripconn" )

    menuConfigOptions['services'].append( "-PrescaleService" )
    menuConfigOptions['services'].append( "-MessageLogger" )
    menuConfigOptions['services'].append( "-DQM" )
    menuConfigOptions['services'].append( "-DQMStore" )
    menuConfigOptions['services'].append( "-FUShmDQMOutputService" )
    menuConfigOptions['services'].append( "-MicroStateService" )
    menuConfigOptions['services'].append( "-ModuleWebRegistry" )
    menuConfigOptions['services'].append( "-TimeProfilerService" )

    menuConfigOptions['paths'].append( "-HLTOutput" )
    menuConfigOptions['paths'].append( "-HLTHIOutput" )
    menuConfigOptions['paths'].append( "-ExpressOutput" )
    menuConfigOptions['paths'].append( "-EventDisplayOutput" )
    menuConfigOptions['paths'].append( "-AlCaOutput" )
    menuConfigOptions['paths'].append( "-DQMOutput" )
    menuConfigOptions['paths'].append( "-HLTDQMOutput" )
    menuConfigOptions['paths'].append( "-HLTDQMResultsOutput" )
    menuConfigOptions['paths'].append( "-HLTMONOutput" )
    menuConfigOptions['paths'].append( "-NanoDSTOutput" )
    menuConfigOptions['paths'].append( "-OfflineOutput" )

    menuConfigOptions['psets'].append( "-maxEvents" )
    menuConfigOptions['psets'].append( "-options" )

    cmdline = build_cmdline(menuConfigDB, menuConfigName, menuConfigRun, menuConfigSource, menuConfigOptions, False)
    data = pipe(cmdline)

    if 'Exhausted Resultset' in data or 'CONFIG_NOT_FOUND' in data:
      raise ImportError('%s is not a valid HLT menu' % menuConfig)

    if not runOnData:
      # FIXME - this should be done looking into the python objects, not working on the text representation
      data = pipe("sed -e 's/cms.InputTag( \"source\" )/cms.InputTag( \"rawDataCollector\" )/'", data)
      data = pipe("sed -e 's/cms.string( \"source\" )/cms.string( \"rawDataCollector\" )/'", data)

    if processType in ('1E31', 'HIon'):
      # FIXME - should have a proper L1 MC/DESIGN/1E31 menue
      data = pipe("sed -e 's/\<L1_DoubleEG2\>/L1_DoubleEG1/'", data)

    # override the preshower baseline setting for MC - needed for 3.5.x (x >= 7) and 3.6.x
    if not runOnData:
      data = data + """
# override the preshower baseline setting for MC
if 'ESUnpackerWorkerESProducer' in locals():
    ESUnpackerWorkerESProducer.RHAlgo.ESBaseline = 1000
"""

    # if required, remove the HLT prescales
    if menuUnprescale:
      data = data + """
# remove the HLT prescales
if 'PrescaleService' in locals():
    PrescaleService.lvl1DefaultLabel = cms.untracked.string( '0' )
    PrescaleService.lvl1Labels = cms.vstring( '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' )
    PrescaleService.prescaleTable = cms.VPSet( )
"""

    # if requested, override the L1 menu from the GlobalTag (using the same connect as the GlobalTag itself)
    if menuL1Override:
      if not menuL1Connect:
        menuL1Connect = "GlobalTag.connect.value().replace('CMS_COND_31X_GLOBALTAG', 'CMS_COND_31X_L1T')"
      data = data + """
# override the L1 menu (requires the GlobalTag to be defined)
if 'GlobalTag' in locals():
    GlobalTag.toGet.append(
        cms.PSet(  
            record  = cms.string( "L1GtTriggerMenuRcd" ),
            tag     = cms.string( "%s" ),
            connect = cms.untracked.string( %s )
        )
    )
""" % (menuL1Override, menuL1Connect)

else:
    if runOnline:
      # online we always run on data
      menuConfigSource =  "file:/tmp/InputCollection.root"
    else:
      # offline we can run on data, on mc, or on a user-specified dataset
      if menuDataset:
        # query DBS and extract the files for the specified dataset
        files = pipe("dbsql 'find file where dataset like %s'" % menuDataset)
        files = [ f for f in files.split('\n') if 'store' in f ][0:10]
        menuConfigSource = ','.join(files)
      elif runOnData:
        menuConfigSource = "/store/data/Run2010A/MinimumBias/RAW/v1/000/144/011/140DA3FD-AAB1-DF11-8932-001617E30E28.root"
      else:
        menuConfigSource =  "file:RelVal_DigiL1Raw_%s.root" % processType

    if not runOnData or menuL1Override:
      # remove any eventual L1 override from the table
      menuConfigOptions['essources'].append( "-Level1MenuOverride" )
      menuConfigOptions['esmodules'].append( "-l1GtTriggerMenuXml" )

    menuConfigOptions['services'].append( "-FUShmDQMOutputService" )
    menuConfigOptions['paths'].append( "-OfflineOutput" )

    cmdline = build_cmdline(menuConfigDB, menuConfigName, menuConfigRun, menuConfigSource, menuConfigOptions)
    data = pipe(cmdline)

    if 'Exhausted Resultset' in data or 'CONFIG_NOT_FOUND' in data:
      raise ImportError('%s is not a valid HLT menu' % menuConfig)

    if not runOnData:
      # FIXME - this should be done looking into the python objects, not working on the text representation
      data = pipe("sed -e 's/cms.InputTag( \"source\" )/cms.InputTag( \"rawDataCollector\" )/'", data)
      data = pipe("sed -e 's/cms.string( \"source\" )/cms.string( \"rawDataCollector\" )/'", data)

    if processType in ('1E31', 'HIon'):
      # FIXME - should have a proper L1 MC/DESIGN/1E31 menue
      data = pipe("sed -e 's/\<L1_DoubleEG2\>/L1_DoubleEG1/'", data)

    # FIXME - find a better way to override the output modules
    data = pipe("sed -e's/process\.hltOutput\(\w\+\) *= *cms\.OutputModule( *\"ShmStreamConsumer\" *,/process.hltOutput\\1 = cms.OutputModule( \"PoolOutputModule\",\\n    fileName = cms.untracked.string( \"output\\1.root\" ),/' ", data)

    # override the preshower baseline setting for MC - needed for 3.5.x (x >= 7) and 3.6.x
    if not runOnData:
      data = data + """
# override the preshower baseline setting for MC
if 'ESUnpackerWorkerESProducer' in process.__dict__:
    process.ESUnpackerWorkerESProducer.RHAlgo.ESBaseline = 1000
"""

    # if required, remove the HLT prescales
    if menuUnprescale:
      data = data + """
# remove HLT prescales
if 'PrescaleService' in process.__dict__:
    process.PrescaleService.lvl1DefaultLabel = cms.untracked.string( '0' )
    process.PrescaleService.lvl1Labels = cms.vstring( '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' )
    process.PrescaleService.prescaleTable = cms.VPSet( )
"""

    data = data + """
# set process name
process.setName_('%s')

# add global options
process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32( 100 )
)
process.options = cms.untracked.PSet(
    wantSummary = cms.untracked.bool( True )
)
""" % processName

    # overwrite GlobalTag
    # the logic is:
    #   - for running online, do nothing, unless a globaltag has been specified on the command line
    #   - for running offline on data, only add the pfnPrefix
    #   - for running offline on mc, take the GT from the command line of the processType
    #      - if the GT is "auto:...", insert the code to read it from Configuration.PyReleaseValidation.autoCond

    if runOnline:
      if menuGlobalTag:
        data = data + """
# override the GlobalTag 
if 'GlobalTag' in process.__dict__:
    process.GlobalTag.globaltag = '%s'
""" % menuGlobalTag

    else:
      data = data + """
# override the GlobalTag connection string and pfnPrefix
if 'GlobalTag' in process.__dict__:
"""

      # override the GlobalTag connection string and pfnPrefix
      data = data + "    process.GlobalTag.connect   = 'frontier://FrontierProd/CMS_COND_31X_GLOBALTAG'\n"
      data = data + "    process.GlobalTag.pfnPrefix = cms.untracked.string('frontier://FrontierProd/')\n"
      if runOnData:
        # do not override the GlobalTag unless one was specified on the command line 
        pass
      else:
        # check if a specific GlobalTag was specified on the command line, or choose one from the processType
        if not menuGlobalTag:
          if processType in globalTag:
            menuGlobalTag = globalTag[processType]
          else:
            menuGlobalTag = globalTag[None]

      # check if the GlobalTag is an autoCond or an explicit tag
      if not menuGlobalTag:
        # when running on data, do not override the GlobalTag unless one was specified on the command line
        pass
      elif menuGlobalTag[0:5] == 'auto:':
        data = data + "    from Configuration.PyReleaseValidation.autoCond import autoCond\n"
        data = data + "    process.GlobalTag.globaltag = autoCond['%s']\n" % menuGlobalTag[5:]
      else:
        data = data + "    process.GlobalTag.globaltag = '%s'\n" % menuGlobalTag

    # if requested, override the L1 menu from the GlobalTag (using the same connect as the GlobalTag itself)
    if menuL1Override:
      if not menuL1Connect:
        menuL1Connect = "process.GlobalTag.connect.value().replace('CMS_COND_31X_GLOBALTAG', 'CMS_COND_31X_L1T')"
      data = data + """
# override the L1 menu
if 'GlobalTag' in process.__dict__:
    process.GlobalTag.toGet.append(
        cms.PSet(  
            record  = cms.string( "L1GtTriggerMenuRcd" ),
            tag     = cms.string( "%s" ),
            connect = cms.untracked.string( %s )
        )
    )
""" % (menuL1Override, menuL1Connect)

    # the following is stolen from HLTrigger.Configuration.customL1THLT_Options
    data = data + """
# adapt HLT modules to the correct process name
if 'hltTrigReport' in process.__dict__:
    process.hltTrigReport.HLTriggerResults       = cms.InputTag( 'TriggerResults','',process.name_() )

if 'hltDQMHLTScalers' in process.__dict__:
    process.hltDQMHLTScalers.triggerResults      = cms.InputTag( 'TriggerResults','',process.name_() )

if 'hltPreExpressSmart' in process.__dict__:
    process.hltPreExpressSmart.TriggerResultsTag = cms.InputTag( 'TriggerResults','',process.name_() )

if 'hltPreHLTMONSmart' in process.__dict__:
    process.hltPreHLTMONSmart.TriggerResultsTag  = cms.InputTag( 'TriggerResults','',process.name_() )

if 'hltPreDQMSmart' in process.__dict__:
    process.hltPreDQMSmart.TriggerResultsTag     = cms.InputTag( 'TriggerResults','',process.name_() )

if 'hltDQML1SeedLogicScalers' in process.__dict__:
    process.hltDQML1SeedLogicScalers.processname = process.name_()

process.MessageLogger.categories.append('TriggerSummaryProducerAOD')
process.MessageLogger.categories.append('L1GtTrigReport')
process.MessageLogger.categories.append('HLTrigReport')
"""


# dump the final configuration
print data

