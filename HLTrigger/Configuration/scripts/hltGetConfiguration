#!/usr/bin/env python

import sys
import os
import re
import commands
import getopt
import shlex, subprocess
import argparse, textwrap


# available "type"s and relative global tags
globalTag = {
  'FULL': 'auto:startup',
  '8E29': 'auto:startup',
  'GRun': 'auto:startup',       # use as default
  'data': 'auto:hltonline',
  '1E31': 'auto:startup',
  'HIon': 'auto:startup',
}


# define a class to store all options and arguments
class Configuration(object):
  pass

configuration = Configuration()


# argparse's formatters remove newlines from comand descriptions, so we define a new one
class HelpFormatterRespectNewlines(argparse.HelpFormatter):
    """Help message formatter which retains line breaks in argument descriptions.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    """

    def _split_lines(self, text, width):
        lines = []
        for line in text.splitlines():
          line = self._whitespace_matcher.sub(' ', line).strip()
          lines.extend( textwrap.wrap(line, width) )
        return lines

# argparse's formatters are not really able to discover the terminale size, so we override them
def FixedWidthFormatter(formatter, width):
  def f(*args, **keywords):
    # add or replace the "width" parameter
    keywords['width'] = width
    return formatter(*args, **keywords)

  return f

textwidth = int( os.popen("stty size", "r").read().split()[1] )
formatter = FixedWidthFormatter( HelpFormatterRespectNewlines, width = textwidth )


# type used to store a reference to an L1 menu
class MenuL1(object):
  def __init__(self, value):
    self.override = None
    self.connect  = None

    # extract the connection string and configuration name
    if value:
      if ':' in value:
        self.override = "L1GtTriggerMenu_%s_mc" % value.rsplit(':', 1)[1]
        self.connect  = '"%s"' % value.rsplit(':', 1)[0]
      else:
        self.override = "L1GtTriggerMenu_%s_mc" % value
        self.connect  = None


# type used to store a reference to an HLT configuration
class MenuHLT(object):
  def __init__(self, value):
    self.value  = value
    self.db     = None
    self.name   = None
    self.run    = None

    # extract the database and configuration name
    if value:
      if ':' in self.value:
        (db, name) = self.value.split(':')
        if db == 'run':
          self.run  = name
        elif db in ('hltdev', 'orcoff'):
          self.db   = db
          self.name = name
        else:
          print 'Unknown ConfDB database "%s", valid values are "hltdev" (default) and "orcoff")' % db
          sys.exit(1)
      else:
        self.db   = 'hltdev'
        self.name = self.value


# define an argparse parser to parse our options
parser = argparse.ArgumentParser(
  description       = 'Extract an HLT configuration (or fragment thereof) from the ConfDB database.''',
  epilog            = 'Note: using "--online", overriding the GlobalTag or the L1 menu  is meaingful only in a full, self-contained dump. A cff file does not provide the modules to be overriden.''', 
  argument_default  = argparse.SUPPRESS,
  formatter_class   = formatter,
  add_help          = False )

# required argument
parser.add_argument('menuConfig',
                    action  = 'store', 
                    type    = MenuHLT,
                    metavar = 'MENU', 
                    help    = 'HLT menu to dump from the database. Supported formats are:\n- [hltdev:]/path/to/configuration[/Vn]\n- orcoff:/path/to/configuration[/Vn]\n- run:runnumber\nThe possible databases are "hltdev" (default, used for offline development) and "orcoff:" (ued for online menus). If no version is specified, the latest one is automatically used.\nIf "run:" is used instead, the actual HLT menu for thegiven run number is looked up and used.' )

# options
parser.add_argument('--process', 
                    dest    = 'processName', 
                    action  = 'store', 
                    default = 'HLT', 
                    metavar = 'PROCESS', 
                    help    = 'Override the process name (the default is %(default)s)' )
parser.add_argument('--type', 
                    dest    = 'processType', 
                    action  = 'store', 
                    metavar = 'TYPE', 
                    choices = globalTag, 
                    default = None,
                    help    = 'Set global options acording to a specific HLT luminosity and type (%(choices)s).' )
parser.add_argument('--globaltag', 
                    dest    = 'menuGlobalTag', 
                    action  = 'store', 
                    metavar = 'TAG', 
                    default = None,
                    help    = 'Override the GlobalTag in the HLT menu:\n- when running on data, the default behaviour is to not override the GobalTag in the HLT menu;\n- when running on MC, the default behaviour is to use the GlobalTag from "type" and the current PyRelVal configuration.\nTo run on data with a different release than the menu was designed for, try "auto:hltonline"' )
parser.add_argument('--l1', 
                    dest    = 'menuL1', 
                    action  = 'store',
                    type    = MenuL1,
                    default = MenuL1(None),
                    metavar = 'MENU', 
                    help    = 'Override the L1 menu, using the payload "L1GtTriggerMenu_<%(metavar)s>_mc" from the database.\nThe default behaviour is to run with the L1 menu from the GlobalTag' )
parser.add_argument('--unprescale', 
                    dest    = 'menuUnprescale', 
                    action  = 'store_true', 
                    default = False, 
                    help    = 'Run without any HLT prescales' )
parser.add_argument('--dataset', 
                    dest    = 'menuDataset', 
                    action  = 'store', 
                    metavar = 'DATASET',
                    default = None,
                    help    = 'Take the input files from the specified %(metavar)s' )

group = parser.add_mutually_exclusive_group()
group.add_argument('--data', 
                    dest    = 'runOnData', 
                    action  = 'store_true', 
                    default = True, 
                    help    = 'Prepare a menu for running on data (raw events in "source") (default)' )
group.add_argument('--mc', 
                    dest    = 'runOnData', 
                    action  = 'store_false', 
                    help    = 'Prepare a menu for running on MC (raw events in "rawDataCollector")' )

group = parser.add_mutually_exclusive_group()
group.add_argument('--full', 
                    dest    = 'doCff', 
                    action  = 'store_false', 
                    default = False, 
                    help    = 'Generate a full configuration file, with minimal modifications (default)' )
group.add_argument('--cff', 
                    dest    = 'doCff', 
                    action  = 'store_true', 
                    help    = 'Generate a stripped down configuration file fragment, for inclusion by e.g. cmsDriver.py' )

group = parser.add_mutually_exclusive_group()
group.add_argument('--online', 
                    dest    = 'runOnline', 
                    action  = 'store_true', 
                    help    = 'Generate a configuration file suitable for running online (use the online compliant connection string)' )
group.add_argument('--offline', 
                    dest    = 'runOnline', 
                    action  = 'store_false', 
                    default = False, 
                    help    = 'Generate a configuration file suitable for running offline (override the connection string) (default)' )

# redefine "--help" to be the last option, and use a customized message 
parser.add_argument('--help', 
                    action  = 'help', 
                    help    = 'Show this help message and exit' )



# wrapper around subprocess to simplify te interface
def pipe(cmdline, input = None):
  args = shlex.split(cmdline)
  if input is not None:
    command = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=None)
  else:
    command = subprocess.Popen(args, stdin=None, stdout=subprocess.PIPE, stderr=None)
  (out, err) = command.communicate(input)
  return out


def build_query(config):
  if config.run:
    return '--runNumber %s' % config.run
  else:
    return '--%s --configName %s' % (config.db, config.name)

def build_source(src):
  if src is None:
    return '--noedsources'
  else:
    return '--input ' + src

def build_options(opts):
  return ' '.join(['--%s %s' % (key, ','.join(vals)) for key, vals in opts.iteritems() if vals])

def build_cmdline(config, src, opts, fragment):
  if not fragment:
    return 'edmConfigFromDB %s %s %s'       % (build_query(config), build_source(src), build_options(opts))
  else:
    return 'edmConfigFromDB --cff %s %s %s' % (build_query(config), build_source(src), build_options(opts))

def get_raw_hlt_configuration_from_db(config, src, opts, fragment):
  cmdline = build_cmdline(configuration.menuConfig, confdbSource, confdbOptions, fragment)
  data = pipe(cmdline)
  
  if 'Exhausted Resultset' in data or 'CONFIG_NOT_FOUND' in data:
    raise ImportError('%s is not a valid HLT menu' % configuration.menuConfig.value)

  return data


# parse command line arguments and options
args = parser.parse_args( namespace = configuration )

# Initialize everything
confdbOptions = {
    'essources' : [],
    'esmodules' : [],
    'modules'   : [],
    'services'  : [],
    'paths'     : [],
    'psets'     : [],
}

confdbSource = None

if configuration.doCff:
    confdbOptions['essources'].append( "-GlobalTag" )
    confdbOptions['essources'].append( "-Level1MenuOverride" )
    confdbOptions['essources'].append( "-HepPDTESSource" )
    confdbOptions['essources'].append( "-XMLIdealGeometryESSource" )
    confdbOptions['essources'].append( "-eegeom" )
    confdbOptions['essources'].append( "-es_hardcode" )
    confdbOptions['essources'].append( "-magfield" )

    confdbOptions['esmodules'].append( "-AutoMagneticFieldESProducer" )
    confdbOptions['esmodules'].append( "-SlaveField0" )
    confdbOptions['esmodules'].append( "-SlaveField20" )
    confdbOptions['esmodules'].append( "-SlaveField30" )
    confdbOptions['esmodules'].append( "-SlaveField35" )
    confdbOptions['esmodules'].append( "-SlaveField38" )
    confdbOptions['esmodules'].append( "-SlaveField40" )
    confdbOptions['esmodules'].append( "-VBF0" )
    confdbOptions['esmodules'].append( "-VBF20" )
    confdbOptions['esmodules'].append( "-VBF30" )
    confdbOptions['esmodules'].append( "-VBF35" )
    confdbOptions['esmodules'].append( "-VBF38" )
    confdbOptions['esmodules'].append( "-VBF40" )
    confdbOptions['esmodules'].append( "-CSCGeometryESModule" )
    confdbOptions['esmodules'].append( "-CaloGeometryBuilder" )
    confdbOptions['esmodules'].append( "-CaloTowerGeometryFromDBEP" )
    confdbOptions['esmodules'].append( "-CaloTowerHardcodeGeometryEP" )
    confdbOptions['esmodules'].append( "-CastorGeometryFromDBEP" )
    confdbOptions['esmodules'].append( "-CastorHardcodeGeometryEP" )
    confdbOptions['esmodules'].append( "-DTGeometryESModule" )
    confdbOptions['esmodules'].append( "-EcalBarrelGeometryEP" )
    confdbOptions['esmodules'].append( "-EcalBarrelGeometryFromDBEP" )
    confdbOptions['esmodules'].append( "-EcalElectronicsMappingBuilder" )
    confdbOptions['esmodules'].append( "-EcalEndcapGeometryEP" )
    confdbOptions['esmodules'].append( "-EcalEndcapGeometryFromDBEP" )
    confdbOptions['esmodules'].append( "-EcalLaserCorrectionService" )
    confdbOptions['esmodules'].append( "-EcalPreshowerGeometryEP" )
    confdbOptions['esmodules'].append( "-EcalPreshowerGeometryFromDBEP" )
    confdbOptions['esmodules'].append( "-HcalGeometryFromDBEP" )
    confdbOptions['esmodules'].append( "-HcalHardcodeGeometryEP" )
    confdbOptions['esmodules'].append( "-HcalTopologyIdealEP" )
    confdbOptions['esmodules'].append( "-MuonNumberingInitialization" )
    confdbOptions['esmodules'].append( "-ParametrizedMagneticFieldProducer" )
    confdbOptions['esmodules'].append( "-RPCGeometryESModule" )
    confdbOptions['esmodules'].append( "-SiStripGainESProducer" )
    confdbOptions['esmodules'].append( "-SiStripRecHitMatcherESProducer" )
    confdbOptions['esmodules'].append( "-SiStripQualityESProducer" )
    confdbOptions['esmodules'].append( "-StripCPEfromTrackAngleESProducer" )
    confdbOptions['esmodules'].append( "-TrackerDigiGeometryESModule" )
    confdbOptions['esmodules'].append( "-TrackerGeometricDetESModule" )
    confdbOptions['esmodules'].append( "-VolumeBasedMagneticFieldESProducer" )
    confdbOptions['esmodules'].append( "-XMLFromDBSource" )
    confdbOptions['esmodules'].append( "-ZdcGeometryFromDBEP" )
    confdbOptions['esmodules'].append( "-ZdcHardcodeGeometryEP" )
    confdbOptions['esmodules'].append( "-hcal_db_producer" )
    confdbOptions['esmodules'].append( "-l1GtTriggerMenuXml" )
    confdbOptions['esmodules'].append( "-L1GtTriggerMaskAlgoTrigTrivialProducer" )
    confdbOptions['esmodules'].append( "-L1GtTriggerMaskTechTrigTrivialProducer" )
    confdbOptions['esmodules'].append( "-sistripconn" )

    confdbOptions['services'].append( "-PrescaleService" )
    confdbOptions['services'].append( "-MessageLogger" )
    confdbOptions['services'].append( "-DQM" )
    confdbOptions['services'].append( "-DQMStore" )
    confdbOptions['services'].append( "-FUShmDQMOutputService" )
    confdbOptions['services'].append( "-MicroStateService" )
    confdbOptions['services'].append( "-ModuleWebRegistry" )
    confdbOptions['services'].append( "-TimeProfilerService" )

    confdbOptions['paths'].append( "-HLTOutput" )
    confdbOptions['paths'].append( "-ExpressOutput" )
    confdbOptions['paths'].append( "-EventDisplayOutput" )
    confdbOptions['paths'].append( "-AlCaOutput" )
    confdbOptions['paths'].append( "-AlCaPPOutput" )
    confdbOptions['paths'].append( "-AlCaHIOutput" )
    confdbOptions['paths'].append( "-DQMOutput" )
    confdbOptions['paths'].append( "-HLTDQMOutput" )
    confdbOptions['paths'].append( "-HLTDQMResultsOutput" )
    confdbOptions['paths'].append( "-HLTMONOutput" )
    confdbOptions['paths'].append( "-NanoDSTOutput" )
    confdbOptions['paths'].append( "-OfflineOutput" )

    confdbOptions['psets'].append( "-maxEvents" )
    confdbOptions['psets'].append( "-options" )

    data = get_raw_hlt_configuration_from_db(configuration.menuConfig, confdbSource, confdbOptions, configuration.doCff)

    if not configuration.runOnData:
      # FIXME - this should be done looking into the python objects, not working on the text representation
      data = re.sub( r'cms\.InputTag\( "source" \)',            r'cms.InputTag( "rawDataCollector" )',           data)
      data = re.sub( r'cms\.untracked\.InputTag\( "source" \)', r'cms.untracked.InputTag( "rawDataCollector" )', data)
      data = re.sub( r'cms\.string\( "source" \)',              r'cms.string( "rawDataCollector" )',             data)

#   if configuration.processType in ('1E31', 'HIon'):
#     # FIXME - should have a proper L1 MC/DESIGN/1E31 menue
#     data = re.sub( r'\bL1_DoubleEG2\b', r'L1_DoubleEG1', data)

    # override the preshower baseline setting for MC - needed for 3.5.x (x >= 7) and 3.6.x
    if not configuration.runOnData:
      data = data + """
# override the preshower baseline setting for MC
if 'ESUnpackerWorkerESProducer' in locals():
    ESUnpackerWorkerESProducer.RHAlgo.ESBaseline = 1000
"""

    # if required, remove the HLT prescales
    if configuration.menuUnprescale:
      data = data + """
# remove the HLT prescales
if 'PrescaleService' in locals():
    PrescaleService.lvl1DefaultLabel = cms.untracked.string( '0' )
    PrescaleService.lvl1Labels = cms.vstring( '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' )
    PrescaleService.prescaleTable = cms.VPSet( )
"""

    # if requested, override the L1 menu from the GlobalTag (using the same connect as the GlobalTag itself)
    if configuration.menuL1.override:
      if not configuration.menuL1.connect:
        configuration.menuL1.connect = "GlobalTag.connect.value().replace('CMS_COND_31X_GLOBALTAG', 'CMS_COND_31X_L1T')"
      data = data + """
# override the L1 menu (requires the GlobalTag to be defined)
if 'GlobalTag' in locals():
    GlobalTag.toGet.append(
        cms.PSet(  
            record  = cms.string( "L1GtTriggerMenuRcd" ),
            tag     = cms.string( "%s" ),
            connect = cms.untracked.string( %s )
        )
    )
""" % (configuration.menuL1.override, configuration.menuL1.connect)

else:
    if configuration.runOnline:
      # online we always run on data
      confdbSource =  "file:/tmp/InputCollection.root"
    else:
      # offline we can run on data, on mc, or on a user-specified dataset
      if configuration.menuDataset:
        # query DBS and extract the files for the specified dataset
        files = pipe("dbsql 'find file where dataset like %s'" % configuration.menuDataset)
        files = [ f for f in files.split('\n') if 'store' in f ][0:10]
        confdbSource = ','.join(files)
      elif configuration.runOnData:
        confdbSource = "/store/data/Run2010A/MinimumBias/RAW/v1/000/144/011/140DA3FD-AAB1-DF11-8932-001617E30E28.root"
      else:
        confdbSource =  "file:RelVal_DigiL1Raw_%s.root" % configuration.processType

    if not configuration.runOnData or configuration.menuL1.override:
      # remove any eventual L1 override from the table
      confdbOptions['essources'].append( "-Level1MenuOverride" )
      confdbOptions['esmodules'].append( "-l1GtTriggerMenuXml" )

    confdbOptions['services'].append( "-FUShmDQMOutputService" )
    confdbOptions['paths'].append( "-OfflineOutput" )

    data = get_raw_hlt_configuration_from_db(configuration.menuConfig, confdbSource, confdbOptions, configuration.doCff)

    if not configuration.runOnData:
      # FIXME - this should be done looking into the python objects, not working on the text representation
      data = re.sub( r'cms\.InputTag\( "source" \)',            r'cms.InputTag( "rawDataCollector" )',              data)
      data = re.sub( r'cms\.untracked\.InputTag\( "source" \)', r'cms.untracked.InputTag( "rawDataCollector" )',    data)
      data = re.sub( r'cms\.string\( "source" \)',              r'cms.string( "rawDataCollector" )',                data)

    if configuration.processType in ('1E31', 'HIon'):
#     # FIXME - should have a proper L1 MC/DESIGN/1E31 menue
#     data = re.sub( r'\bL1_DoubleEG2\b', r'L1_DoubleEG1', data)
      data = data + """
# HIon paths in smart prescalers
if 'hltPreHLTDQMSmart' in process.__dict__:
    process.hltPreHLTDQMSmart.throw = cms.bool( False )
if 'hltPreHLTMONSmart' in process.__dict__:
    process.hltPreHLTMONSmart.throw = cms.bool( False )
if 'hltPreExpressSmart' in process.__dict__:
    process.hltPreExpressSmart.throw = cms.bool( False )
if 'hltPreDQMSmart' in process.__dict__:
    process.hltPreDQMSmart.throw = cms.bool( False )
"""        
    # FIXME - find a better way to override the output modules
    data = re.sub( 
      r'process.hltOutput(\w+) *= *cms\.OutputModule\( *"ShmStreamConsumer" *,',
      r'process.hltOutput\1 = cms.OutputModule( "PoolOutputModule",\n    fileName = cms.untracked.string( "output\1.root" ),\n    fastCloning = cms.untracked.bool( False ),', 
      data
    )

    # override the preshower baseline setting for MC - needed for 3.5.x (x >= 7) and 3.6.x
    if not configuration.runOnData:
      data = data + """
# override the preshower baseline setting for MC
if 'ESUnpackerWorkerESProducer' in process.__dict__:
    process.ESUnpackerWorkerESProducer.RHAlgo.ESBaseline = 1000
"""

    # if required, remove the HLT prescales
    if configuration.menuUnprescale:
      data = data + """
# remove HLT prescales
if 'PrescaleService' in process.__dict__:
    process.PrescaleService.lvl1DefaultLabel = cms.untracked.string( '0' )
    process.PrescaleService.lvl1Labels = cms.vstring( '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' )
    process.PrescaleService.prescaleTable = cms.VPSet( )
"""

    data = data + """
# set process name
process.setName_('%s')

# add global options
process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32( 100 )
)
process.options = cms.untracked.PSet(
    wantSummary = cms.untracked.bool( True )
)
""" % configuration.processName

    # overwrite GlobalTag
    # the logic is:
    #   - for running online, do nothing, unless a globaltag has been specified on the command line
    #   - for running offline on data, only add the pfnPrefix
    #   - for running offline on mc, take the GT from the command line of the configuration.processType
    #      - if the GT is "auto:...", insert the code to read it from Configuration.PyReleaseValidation.autoCond

    if configuration.runOnline:
      if configuration.menuGlobalTag:
        data = data + """
# override the GlobalTag 
if 'GlobalTag' in process.__dict__:
    process.GlobalTag.globaltag = '%s'
""" % configuration.menuGlobalTag

    else:
      data = data + """
# override the GlobalTag connection string and pfnPrefix
if 'GlobalTag' in process.__dict__:
"""

      # override the GlobalTag connection string and pfnPrefix
      data = data + "    process.GlobalTag.connect   = 'frontier://FrontierProd/CMS_COND_31X_GLOBALTAG'\n"
      data = data + "    process.GlobalTag.pfnPrefix = cms.untracked.string('frontier://FrontierProd/')\n"
      if configuration.runOnData:
        # do not override the GlobalTag unless one was specified on the command line 
        pass
      else:
        # check if a specific GlobalTag was specified on the command line, or choose one from the configuration.processType
        if not configuration.menuGlobalTag:
          if configuration.processType in globalTag:
            configuration.menuGlobalTag = globalTag[configuration.processType]
          else:
            configuration.menuGlobalTag = globalTag['GRun']

      # check if the GlobalTag is an autoCond or an explicit tag
      if not configuration.menuGlobalTag:
        # when running on data, do not override the GlobalTag unless one was specified on the command line
        pass
      elif configuration.menuGlobalTag[0:5] == 'auto:':
        data = data + "    from Configuration.PyReleaseValidation.autoCond import autoCond\n"
        data = data + "    process.GlobalTag.globaltag = autoCond['%s']\n" % configuration.menuGlobalTag[5:]
      else:
        data = data + "    process.GlobalTag.globaltag = '%s'\n" % configuration.menuGlobalTag

    # if requested, override the L1 menu from the GlobalTag (using the same connect as the GlobalTag itself)
    if configuration.menuL1.override:
      if not configuration.menuL1.connect:
        configuration.menuL1.connect = "process.GlobalTag.connect.value().replace('CMS_COND_31X_GLOBALTAG', 'CMS_COND_31X_L1T')"
      data = data + """
# override the L1 menu
if 'GlobalTag' in process.__dict__:
    process.GlobalTag.toGet.append(
        cms.PSet(  
            record  = cms.string( "L1GtTriggerMenuRcd" ),
            tag     = cms.string( "%s" ),
            connect = cms.untracked.string( %s )
        )
    )
""" % (configuration.menuL1.override, configuration.menuL1.connect)

    # the following is stolen from HLTrigger.Configuration.customL1THLT_Options
    data = data + """
# adapt HLT modules to the correct process name
if 'hltTrigReport' in process.__dict__:
    process.hltTrigReport.HLTriggerResults       = cms.InputTag( 'TriggerResults','',process.name_() )

if 'hltDQMHLTScalers' in process.__dict__:
    process.hltDQMHLTScalers.triggerResults      = cms.InputTag( 'TriggerResults','',process.name_() )

if 'hltPreExpressSmart' in process.__dict__:
    process.hltPreExpressSmart.TriggerResultsTag = cms.InputTag( 'TriggerResults','',process.name_() )

if 'hltPreHLTMONSmart' in process.__dict__:
    process.hltPreHLTMONSmart.TriggerResultsTag  = cms.InputTag( 'TriggerResults','',process.name_() )

if 'hltPreDQMSmart' in process.__dict__:
    process.hltPreDQMSmart.TriggerResultsTag     = cms.InputTag( 'TriggerResults','',process.name_() )

if 'hltDQML1SeedLogicScalers' in process.__dict__:
    process.hltDQML1SeedLogicScalers.processname = process.name_()

process.MessageLogger.categories.append('TriggerSummaryProducerAOD')
process.MessageLogger.categories.append('L1GtTrigReport')
process.MessageLogger.categories.append('HLTrigReport')
"""


# dump the final configuration
print data

