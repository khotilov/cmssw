#ifndef EcalSimAlgos_EcalTDigitizer_icc
#define EcalSimAlgos_EcalTDigitizer_icc

#include "SimCalorimetry/CaloSimAlgos/interface/CaloHitResponse.h"
#include "SimCalorimetry/EcalSimAlgos/interface/EcalTDigitizer.h"

template <class Traits>
EcalTDigitizer<Traits>::EcalTDigitizer( CaloHitResponse* hitResponse    ,
					ElectronicsSim*  electronicsSim ,
					bool             addNoise         ) :
   theHitResponse    ( hitResponse    ) ,
   theElectronicsSim ( electronicsSim ) ,
   theDetIds         ( 0              ) ,
   addNoise_         ( addNoise       )
{
}

template <class Traits>
EcalTDigitizer<Traits>::~EcalTDigitizer()
{
}

template <class Traits>
void 
EcalTDigitizer<Traits>::setDetIds( const std::vector<DetId>& detIds )
{
   theDetIds = &detIds ;
}

template <class Traits>
void 
EcalTDigitizer<Traits>::run( MixCollection<PCaloHit>& input ,
			     DigiCollection&          output  )
{
   assert(theDetIds->size() != 0);

   theHitResponse->run(input);

   theElectronicsSim->newEvent();
    
   // reserve space for how many digis we expect
   int nDigisExpected = addNoise_ ? theDetIds->size() : theHitResponse->nSignals();
   output.reserve(nDigisExpected);

   // make a raw digi for evey cell
   for(std::vector<DetId>::const_iterator idItr = theDetIds->begin();
       idItr != theDetIds->end(); ++idItr)
   {
      CaloSamples * analogSignal = theHitResponse->findSignal(*idItr);
      bool needToDeleteSignal = false;
      // don't bother digitizing if no signal and no noise
      if(analogSignal == 0 && 
	 addNoise_            )
      {
	 // I guess we need to make a blank signal for this cell.
         // Don't bother storing it anywhere.
         analogSignal = new CaloSamples(theHitResponse->makeBlankSignal(*idItr));
         needToDeleteSignal = true;
      }
      if( 0 != analogSignal ) 
      { 
	 output.push_back(*idItr);
	 Digi digi(output.back());
         theElectronicsSim->analogToDigital(*analogSignal , digi);
         if(needToDeleteSignal) delete analogSignal;
      }
   }

   // free up some memory
   theHitResponse->clear();
}

#endif

