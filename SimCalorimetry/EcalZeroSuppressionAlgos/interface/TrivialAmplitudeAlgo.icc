template <class C> TrivialAmplitudeAlgo<C>::TrivialAmplitudeAlgo() 
{ 

  // 3+1 set of trivial weights

  theWeights.reserve(10);
  for (int sample = 0 ; sample < 10 ; ++sample)
    {
      if (sample<3) { theWeights[sample] = -1./3.; }
      else if (sample==4) { theWeights[sample] = 1.; }
      else { theWeights[sample] = 0.; }
    }

  // nominal gain factors

  theGainFactors.reserve(3);
  theGainFactors[0] = 12.;
  theGainFactors[1] = 2.;
  theGainFactors[2] = 1.;

}


template <class C> double TrivialAmplitudeAlgo<C>::energy(const C & frame) 
{

  double Erec = 0. ;

  // Simple energy computation with the weight method
  // using the weigths method with fixed weigths -1/3, -1/3, -1/3, 0, 1, 0...

  for (int sample = 0 ; sample < frame.size () ; ++sample)
    {
      int gain = (frame.sample (sample).gainId());
      if (gain >= 0 || gain <=2 ) {
        Erec = Erec+theWeights[sample]*(frame.sample (sample).adc ())*theGainFactors[gain];
      }
      else {
        edm::LogWarning("EcalAmplitudeError") << "Wrong gain in frame " << sample << " \n" << frame;
      }
    }

  return Erec;

}


template <class C> double TrivialAmplitudeAlgo<C>::pedestal(const C & frame) 
{

  double PrePed = 0. ;

  // Simple predestal from 3 first samples
  // using the weigths method with fixed weigths -1/3, -1/3, -1/3, 0, 1, 0...

  for (int sample = 0 ; sample < 3 ; ++sample)
    {
      int gain = (frame.sample (sample).gainId());
      if (gain >= 0 || gain <=2 ) {
        PrePed = PrePed+theWeights[sample]*(frame.sample (sample).adc ())*theGainFactor[gain];
      }
      else {
        edm::LogWarning("EcalAmplitudeError") << "Wrong gain in frame " << sample << " \n" << frame;
      }
    }

  return -1.*PrePed;

}

