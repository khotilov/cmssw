<lcgdict>
<selection>
  <class name="reco::Particle">
    <field name="p4_" iotype="ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >" /> 
    <field name="vertex_" iotype="ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t> >" />
  </class>
  <class name="reco::Candidate">
    <field name="mothers_" transient="true"/>
  </class>
  <class name="reco::LeafCandidate" />
  <class name="reco::CompositeCandidate"/>
  <class name="reco::CompositeRefCandidate" />
  <class name="reco::CompositeRefBaseCandidate" />
  <class name="reco::ShallowCloneCandidate" />
  <class name="reco::candidate::iterator" />
  <class name="reco::candidate::const_iterator" />
  <class name="std::vector<reco::Candidate *>" />
  <class name="edm::OwnVector<reco::Candidate, edm::ClonePolicy<reco::Candidate> >" />
  <class name="std::vector<reco::Particle>" />
  <class name="edm::Wrapper<edm::OwnVector<reco::Candidate, edm::ClonePolicy<reco::Candidate> > >" />
  <class name="edm::Wrapper<std::vector<reco::Particle> >" />
  <class name="edm::Ref<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate,edm::refhelper::FindUsingAdvance<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate> >"/>
  <class name="edm::RefProd<edm::OwnVector<reco::Candidate, edm::ClonePolicy<reco::Candidate> > >"/>
  <class name="edm::RefVector<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate,edm::refhelper::FindUsingAdvance<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate> >"/>
  <class name="edm::Wrapper<edm::RefVector<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate,edm::refhelper::FindUsingAdvance<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate> > >"/>
  <class name="edm::reftobase::RefHolder<edm::Ref<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate,edm::refhelper::FindUsingAdvance<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate> >>"/>

  <class name="edm::RefToBase<reco::Candidate>" />
  <class name="std::vector<edm::RefToBase<reco::Candidate> >" />
  <class name="edm::Wrapper<std::vector<edm::RefToBase<reco::Candidate> > >" />
  <class name="edm::reftobase::BaseHolder<reco::Candidate>" />
  <class name="edm::reftobase::Holder<reco::Candidate,edm::Ref<edm::OwnVector<reco::Candidate, edm::ClonePolicy<reco::Candidate> >,reco::Candidate,edm::refhelper::FindUsingAdvance<edm::OwnVector<reco::Candidate, edm::ClonePolicy<reco::Candidate> >,reco::Candidate> > >" />

  <class name="edm::RefToBaseVector<reco::Candidate>" />
  <class name="edm::Wrapper<edm::RefToBaseVector<reco::Candidate> >" />
  <class name="edm::reftobase::BaseVectorHolder<reco::Candidate>" />
  <class name="edm::reftobase::VectorHolder<reco::Candidate, edm::RefVector<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate,edm::refhelper::FindUsingAdvance<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate> > >" />
  <class name="edm::reftobase::VectorHolder<reco::Candidate, edm::RefVector<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate,edm::refhelper::FindUsingAdvance<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate> > >::const_iterator_imp_specific" />
  <class name="edm::reftobase::BaseVectorHolder<reco::Candidate>::const_iterator_imp" />
  <class name="edm::reftobase::BaseVectorHolder<reco::Candidate>::const_iterator" />
  <class pattern="edm::AssociationVector<*>">
    <field name="transientVector_" transient="true"/>
    <field name="fixed_" transient="true"/>
  </class>
  <class name="edm::reftobase::IndirectHolder<reco::Candidate>"/>
  <class pattern="edm::Wrapper<edm::AssociationVector<*>"/>
  <class name="edm::helpers::KeyVal<edm::Ref<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate,edm::refhelper::FindUsingAdvance<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate> >,edm::Ref<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate,edm::refhelper::FindUsingAdvance<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,reco::Candidate> > >" /> 
  <class name="edm::helpers::KeyVal<edm::RefProd<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> > >,edm::RefProd<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> > > >" />
  <class name="edm::AssociationMap<edm::OneToOne<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,unsigned int> >">
    <field name="transientMap_" transient="true" />
  </class>
  <class name="edm::AssociationMap<edm::OneToOne<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,unsigned int> >::const_iterator" />
  <class name="edm::Wrapper<edm::AssociationMap<edm::OneToOne<edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,unsigned int> > >" />
  <class name="std::map<const reco::Candidate *, const reco::Candidate *>" />
  <class name="std::vector<const reco::Candidate *>" />
  <class name="edm::AssociationMap<edm::OneToManyWithQuality< edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,double,unsigned int> >">
    <field name="transientMap_" transient="true" />
  </class>
  <class name="edm::Wrapper<edm::AssociationMap<edm::OneToManyWithQuality< edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,edm::OwnVector<reco::Candidate,edm::ClonePolicy<reco::Candidate> >,double,unsigned int> > >" />
</selection>
<exclusion>
  <class name="edm::OwnVector<reco::Candidate, edm::ClonePolicy<reco::Candidate> >">
    <method name="sort" />
  </class>
</exclusion>
</lcgdict>
