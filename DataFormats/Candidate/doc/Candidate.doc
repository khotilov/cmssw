/*!
\page DataFormats_Candidate Package DataFormats/Candidate
<center>
<small>
<a href=http://cmsdoc.cern.ch/swdev/viewcvs/viewcvs.cgi/CMSSW/DataFormats/Candidate/?cvsroot=CMSSW>CVS head for this package</a> - 
<a href=http://cmsdoc.cern.ch/swdev/viewcvs/viewcvs.cgi/CMSSW/DataFormats/Candidate/.admin/developers?rev=HEAD&cvsroot=CMSSW&content-type=text/vnd.viewcvs-markup>Administrative privileges</a>
</small>
</center>

\section desc Description
Classes defining particle candidate. The class reco::Candidate is 
intended to be a common class for many Physics Analysis tools.

\subsection interface Public interface
- reco::ParticleKinematics: a reconstructed particle with momentum 4-vector
- reco::ParticleWithCharge: a reconstructed particle with momentum 4-vector and electric charge
- reco::Particle: a reconstructed particle with momentum 4-vector, a vertex and an electric charge. 
- reco::Candidate: a generic reconstructed particle candidates. It adds
to reco::Particle interface for navigation among constituents.
- reco::LeafCandidate: a reco::Candidate with no component nor daughters. 
Suitable to store just 4-vector, vertex and electric charge.
- reco::CompositeCandidate: a reco::Candidate composed of daughters. The daughters
are owned by the composite candidate.
- reco::CompositeRefCandidate: a reco::Candidate composed of daughters. The daughters
has persistent references (edm::RefVector <b><...></b>) to reco::Candidate stored in 
a separate collection.
- reco::Candidate::setup: base class for other helper classes that can modify
  a Candidate kinematics (momentum, vertex, charge). An object of a reco::Candidate::setup subclass can be
  passed to the Candidate method reco::Candidate::set( setup & ) to modify
  that Candidate's kinematics.
\htmlonly
<pre>
  Candidate::setup * s = new MySetup();
  Candidate * c = ...;
  c->set( s );
</pre>
\endhtmlonly
  Different setup subclasses are provided in different packages; users can also
  create their own setup class if special features are required.
- OverlapChecker: helper class to check overlap between two candidates. 
Recursively scans a decay chain, if necessary.
  Example of usage is below:
\htmlonly
<pre>
  OverlapChecker overlap;
  const Candidate & c1 = ..., & c2 = ...;
  if ( overlap( c1, c2 ) ) { /* .... */ }
</pre>
\endhtmlonly
- reco::component <b>&lt;T, Tag=DefaultComponentTag&gt;</b>: utility to extrack components from a reco::Candidate
  avoiding explicit <tt>dynamic_cast</tt>. A tag struct can be used as optional second template parameter to
  disambiguate between more components in a Candidate of the same type.
  The following example shows how to extract references to a reco::Track or reco::Muon.
  The following syntaxes are all equivalent:
\htmlonly
<pre>
  const Candidate & cand = ...;
  TrackRef track1 = c.get&lt;TrackRef&gt;( c );
  TrackRef track2 = get&lt;TrackRef&gt;( c );
  TrackRef track3 = component&lt;TrackRef&gt;::get( c );
</pre>
\endhtmlonly
  It is possible to access different types of components, 
  but you have to get sure to <tt>#include</tt> the 
  header files of the concrete candidate subclass in order
  to define the proper template specialization.
\htmlonly
<pre>
  const Candidate & c = ...;
  TrackRef track = c.get&lt;TrackRef&gt;();
  SuperClusterRef cluster = c.get&lt;SuperClusterRef&gt;();

  const Candidate & g = ...;
  const HepMC::GenParticle * gen = g.get&lt;const HepMC::GenParticle *&gt;();
</pre>
\endhtmlonly
  In case of multiple components of the same type, it is possible to specify an extra
  "tag" to disentangle the ambiguity. For instance:
\htmlonly
<pre>
  const Candidate & muon = ...;
  // tracker fit: default
  TrackRef trackerFit = muon.get&lt;TrackRef&gt;();
  // stand alone muon fit
  TrackRef standAloneMuFit = muon.get&lt;TrackRef, StandAloneMuonTag&gt;();
  // combined muon + tracker fit
  TrackRef combinedFit = muon.get&lt;TrackRef, CombinedMuonTag&gt;();
</pre>
\endhtmlonly

\subsection typedefs 
- reco::CandidateCollection: collection of reco::Candidate objects
- reco::CandidateRef: persistent reference to a reco::Candidate object
- reco::CandidateRefProd: reference to a reco::Candidate collection
- reco::CandidateRefVector: vector of references to reco::Candidate objects in the same collection
- reco::candidate_iterator: iterator over a vector of references to reco::Candidate objects in the same collection

\subsection modules Modules
None.

\subsection tests Unit tests and examples
- <b>testParticle</b>: test reco::Particle class
- <b>testCompositeCandidate</b>: test reco::CompositeCandidate class
- <b>testSetup</b>: test reco::Setup mechanism

\section status Status and planned development
Complete.

<hr>
Last updated: @DATE@ L. Lista
*/
