
/** Math.ii contains the routines that either
    a)  I wanted to inline, or
    b)  are templated                         */

inline double Math::distanceBetweenPoints(const std::vector<double> & a, const std::vector<double> & b)
{
  double ans=0.;
  for(unsigned int i=0; i<a.size(); i++)
    ans+=(a[i]-b[i])*(a[i]-b[i]);
  ans=sqrt(ans);
  return(ans);
}

inline double Math::distanceBetweenPoints(const std::vector<double> & a, const std::vector<double> & b, matrix & covarianceMatrixInv)
{
  double ans=0.;
  unsigned int d = a.size();
  assert(a.size()==b.size());
  assert(a.size()==covarianceMatrixInv.nrows());
  assert(a.size()==covarianceMatrixInv.ncols());
  for(unsigned int i=0; i<d; i++)
    for(unsigned int j=0; j<d; j++)
      ans += (a[i]-b[i])*covarianceMatrixInv[i][j]*(a[j]-b[j]);
  ans = sqrt(ans);
  return(ans);
}

inline double Math::distanceSqdBetweenPoints(const double * a, const double * b, int n)
{
  double ans=0.;
  for(int i=0; i<n; i++)
    ans+=(a[i]-b[i])*(a[i]-b[i]);
  return(ans);
}

inline double Math::min(double a, double b)
{
  if(a<b) return a;
  return b;
}

inline double Math::max(double a, double b)
{
  if(a>b) return a;
  return b;
}

template<class T1, class T2> void Math::parallelBubbleSort(std::vector<T1>& x, std::vector<T2>& y)
{
  assert(x.size()==y.size());
  for(size_t i=0; i<x.size(); i++)
    for(size_t j=i+1; j<x.size(); j++)
      if(x[i]>x[j])
        {
          swap(x[i],x[j]);
          swap(y[i],y[j]);
        }
  return;
}

template<class T1, class T2> void Math::parallelReverseSort(std::vector<T1>& x, std::vector<T2>& y)
{
  assert(x.size()==y.size());
  for(size_t i=0; i<x.size(); i++)
    for(size_t j=i+1; j<x.size(); j++)
      if(x[i]<x[j])
        {
          swap(x[i],x[j]);
          swap(y[i],y[j]);
        }
  return;
}

template<class T1, class T2> void Math::parallelQuickSort(std::vector<T1>& x, std::vector<T2>& y)
{
  assert(x.size()==y.size());
  size_t n = x.size();
  std::vector<std::vector<double> > a(n);
  for(size_t i=0; i<n; i++)
    {
      a[i] = std::vector<double>(2);
      a[i][0] = x[i];
      a[i][1] = y[i];
    }
  sort(a.begin(),a.end());
  for(size_t i=0; i<n; i++)
    {
      x[i] = a[i][0];
      y[i] = a[i][1];
    }
  return;
}

