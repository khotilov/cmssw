// Authors: F. Ambroglini, L. Fano'


#include <iostream>

#include "Validation/Generator/test/MinBiasAnalyzer.h"
 
#include "DataFormats/Common/interface/Ref.h" 
#include "DataFormats/JetReco/interface/Jet.h"
#include "DataFormats/JetReco/interface/CaloJetCollection.h"
#include "DataFormats/JetReco/interface/GenJet.h"
// #include "DataFormats/JetReco/interface/GenJetfwd.h"
#include "DataFormats/JetReco/interface/GenJetCollection.h"
#include "DataFormats/Candidate/interface/Candidate.h"
#include "SimDataFormats/HepMCProduct/interface/HepMCProduct.h"

#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/Event.h"
#include "DataFormats/Common/interface/Handle.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/Framework/interface/MakerMacros.h"
 
#include "TFile.h"
#include "TH1.h"

 
using namespace edm;
using namespace std;
using namespace reco;

class GreaterPt{
public:
  bool operator()( const HepMC::FourVector& a, const HepMC::FourVector& b) {
    return a.perp() > b.perp();
  }
};

class JetSort{
public:
  bool operator()(const GenJet& a, const GenJet& b) {
    return a.pt() > b.pt();
  }
};
 
MinBiasAnalyzer::MinBiasAnalyzer( const ParameterSet& pset )
   : fOutputFileName( pset.getUntrackedParameter<string>("HistOutFile",std::string("TestHiggsMass.root")) ),
     fOutputFile(0), fHistPtDist(0), fHistEtaDist(0), fHistPhiDist(0), fHistChgDist(0), 
     fHistChgSimm(0),pdN_vs_dphi(0),pdPt_vs_dphi(0), temp1(0), temp2(0), fHistPtDistJetChg(0),
     fHistEtaDistJetChg(0), fHistPhiDistJetChg(0)
{
}

void MinBiasAnalyzer::beginJob( const EventSetup& )
{
 
   fOutputFile   = new TFile( fOutputFileName.c_str(), "RECREATE" ) ;
   fHistPtDist   = new TH1D(  "HistPtDist"  , "Pt Spectra", 100,  0., 4. ) ;
   fHistEtaDist  = new TH1D(  "HistEtaDist" , "#eta Spectra", 100, -5., 5. ) ;
   fHistPhiDist  = new TH1D(  "HistPhiDist" , "#phi Spectra", 100, -4., 4. ) ;    
   fHistChgDist  = new TH1D(  "HistChgDist" , "N chg particles per event",   125, 0., 250. ) ;    
   fHistChgSimm  = new TH1D(  "HistChgSimm" , "Charge simmetry",   11, -5., 5. ) ;    

   fHistVtxZ     = new TH1D(  "HistVtxZ"    ,"Z of Vertex",   100,-1., 1. ) ;    
   fHistVtxTrasv = new TH1D(  "HistVtxTrasv","Transverse position of Vertex" ,100,0., 1. ) ;    

   pdN_vs_dphi   = new TProfile("dN_vs_dphi","dN vs dphi",100,-180.,180.,0,100);
   pdPt_vs_dphi  = new TProfile("dPt_vs_dphi","dPt vs dphi",100,-180.,180.,0,100);
   pdN_vs_eta   = new TProfile("dN_vs_eta","dN vs eta",20,0.,5.);
   pdN_vs_pt   = new TProfile("dN_vs_pt","dN vs PT",20,0.,10.);


   temp1 = new TH1D("temp1","temp",100,-180.,180.);
   temp2 = new TH1D("temp2","temp",100,-180.,180.);
   temp3 = new TH1D("temp3","temp",20,0.,5.);
   temp4 = new TH1D("temp4","temp",20,0.,10.);



   fHistPtDistJetChg   = new TH1D(  "HistPtDistJetChg", "Pt fisrt charged jet Spectra", 100,  0., 100. ) ;
   fHistEtaDistJetChg  = new TH1D(  "HistEtaDistJetChg", "#eta fisrt charged jet Spectra", 100, -5., 5. ) ;
   fHistPhiDistJetChg  = new TH1D(  "HistPhiDistJetChg", "#phi fisrt charged jet Spectra", 100, -4., 4. ) ;




   return ;
}


void MinBiasAnalyzer::analyze( const Event& e, const EventSetup& ){

  Handle< HepMCProduct > EvtHandle ;
  e.getByLabel( "source", EvtHandle );

  Handle< GenJetCollection > JetsHandle ;
  e.getByLabel( "iterativeCone5GenJets", JetsHandle );


  std::vector<GenJet> tmpJet;
  tmpJet.clear();

  if(JetsHandle->size()){ 
    for(GenJetCollection::const_iterator it=JetsHandle->begin();it!=JetsHandle->end();it++) 
      tmpJet.push_back(*it);
    std::stable_sort(tmpJet.begin(),tmpJet.end(),JetSort());
  }
  

  const HepMC::GenEvent* Evt = EvtHandle->GetEvent();
  
  std::vector<HepMC::FourVector> particles4Jet;
  particles4Jet.clear();
  
  int nchg = 0;
  
  float_t piG=acos(-1.);
  
  for ( HepMC::GenEvent::particle_const_iterator pout = Evt->particles_begin();
	pout != Evt->particles_end(); pout++ ) {
    if((*pout)->status()==1){
      HepMC::FourVector mom = (*pout)->momentum();
      fHistPtDist->Fill(mom.perp());
      fHistEtaDist->Fill(mom.eta());
      fHistPhiDist->Fill(mom.phi());
      int chg = charge((*pout)->pdg_id());
      if(chg!=0){

	temp3->Fill(fabs(mom.eta()));
	temp4->Fill(fabs(mom.perp()));

	if(mom.perp()>=0.5 && fabs(mom.eta())<1) particles4Jet.push_back(mom); // for UE and MB Observables, particles are selected to be central and with PT>500 MeV  

	fHistChgSimm->Fill(chg/3.);
	nchg++;
      }
    }
  }


   for(int i=0;i<20;i++)
     {
       pdN_vs_eta->Fill((i*0.25)+0.125,temp3->GetBinContent(i+1)/0.5,1); // 0.5 normalized to 0.25 bin in abs(eta) (2 times) -> 0.5
       pdN_vs_pt->Fill((i*0.5)+0.25,temp4->GetBinContent(i+1)/0.5,1); // 0.5 normalized to 0.5 bin in pt -> 0.5
     }
   
   temp3->Reset();
   temp4->Reset();
   
  
  fHistChgDist->Fill(nchg);
  
  for ( HepMC::GenEvent::vertex_const_iterator v = Evt->vertices_begin();
	v != Evt->vertices_end(); ++v ) {
    HepMC::FourVector pos=(*v)->position();
    fHistVtxZ->Fill(pos.z());
    fHistVtxTrasv->Fill(sqrt(pos.x()*pos.x()+pos.y()*pos.x()));
  }
  
  std::stable_sort(particles4Jet.begin(),particles4Jet.end(),GreaterPt());
  

  if(tmpJet.size()){
    GenJet pJ = tmpJet.front();

      fHistPtDistJetChg->Fill(pJ.pt());
      fHistEtaDistJetChg->Fill(pJ.eta());
      fHistPhiDistJetChg->Fill(pJ.phi());

    if(fabs(pJ.eta())<1&&pJ.pt()>1){

      if(particles4Jet.size()){
	
	float_t conv = 180/piG;
      
	for (std::vector<HepMC::FourVector>::const_iterator par = particles4Jet.begin();
	     par != particles4Jet.end(); par++ ){
	  
	  float_t tmpphitrk_mc=conv*(par->phi());
	  
	  float_t Dphi_mc=pJ.phi()-tmpphitrk_mc;
	  
	  temp1->Fill(Dphi_mc);
	  temp2->Fill(Dphi_mc,par->perp());
	  
	}
	
	for(int i=0;i<100;i++){
	  float_t bincont1_mc=temp1->GetBinContent(i+1);
	  pdN_vs_dphi->Fill(-180.+i*3.6+1.8,bincont1_mc/(2.*piG/50.),1);
	  float_t bincont2_mc=temp2->GetBinContent(i+1);
	  pdPt_vs_dphi->Fill(-180.+i*3.6+1.8,bincont2_mc/(2.*piG/50.),1);
	}
	
	temp1->Reset();
	temp2->Reset();
      }
    }
  }
    
  return ;
  
}

void MinBiasAnalyzer::endJob(){
  
  fOutputFile->Write() ;
  fOutputFile->Close() ;
  
  return ;
  
}

int MinBiasAnalyzer::charge(const int& Id){
  
  //...Purpose: to give three times the charge for a particle/parton.

  //      ID     = particle ID
  //      hepchg = particle charge times 3

  int kqa,kq1,kq2,kq3,kqj,irt,kqx,kqn;
  int hepchg;


  int ichg[109]={-1,2,-1,2,-1,2,-1,2,0,0,-3,0,-3,0,-3,0,
		 -3,0,0,0,0,0,0,3,0,0,0,0,0,0,3,0,3,6,0,0,3,6,0,0,-1,2,-1,2,-1,2,0,0,0,0,
		 -3,0,-3,0,-3,0,0,0,0,0,-1,2,-1,2,-1,2,0,0,0,0,
		 -3,0,-3,0,-3,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


  //...Initial values. Simple case of direct readout.
  hepchg=0;
  kqa=abs(Id);
  kqn=kqa/1000000000%10;
  kqx=kqa/1000000%10;
  kq3=kqa/1000%10;
  kq2=kqa/100%10;
  kq1=kqa/10%10;
  kqj=kqa%10;
  irt=kqa%10000;

  //...illegal or ion
  //...set ion charge to zero - not enough information
  if(kqa==0 || kqa >= 10000000) {

    if(kqn==1) {hepchg=0;}
  }
  //... direct translation
  else if(kqa<=100) {hepchg = ichg[kqa-1];}
  //... KS and KL (and undefined)
  else if(kqj == 0) {hepchg = 0;}
  //C... direct translation
  else if(kqx>0 && irt<100)
    {
      hepchg = ichg[irt-1];
      if(kqa==1000017 || kqa==1000018) {hepchg = 0;}
      if(kqa==1000034 || kqa==1000052) {hepchg = 0;}
      if(kqa==1000053 || kqa==1000054) {hepchg = 0;}
      if(kqa==5100061 || kqa==5100062) {hepchg = 6;}
    }
  //...Construction from quark content for heavy meson, diquark, baryon.
  //...Mesons.
  else if(kq3==0)
    {
      hepchg = ichg[kq2-1]-ichg[kq1-1];
      //...Strange or beauty mesons.
      if((kq2==3) || (kq2==5)) {hepchg = ichg[kq1-1]-ichg[kq2-1];}
    }
  else if(kq1 == 0) {
    //...Diquarks.
    hepchg = ichg[kq3-1] + ichg[kq2-1];
  }

  else{
    //...Baryons
    hepchg = ichg[kq3-1]+ichg[kq2-1]+ichg[kq1-1];
  }

  //... fix sign of charge
  if(Id<0 && hepchg!=0) {hepchg = -1*hepchg;}

  // cout << hepchg<< endl;
  return hepchg;


}


float_t MinBiasAnalyzer::delR(const float_t& eta1,const float_t& eta2,const float_t& phi1,const float_t& phi2)
{

  float cono = sqrt((eta1-eta2)*(eta1-eta2)+(phi1-phi2)*(phi1-phi2));

  return cono;

}

 
DEFINE_FWK_MODULE(MinBiasAnalyzer);
