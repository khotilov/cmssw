#! /usr/bin/env python

import string
import threading
import Queue
import socket
import pickle
#import CMSInterface
import TempGeneratorValidator
import ErrorManager
import Configuration
import Publisher
import time 

from optparse import OptionParser

# Parsing command line option
parser = OptionParser()
parser.add_option("-p", "--port", type="int", dest="port", default=Configuration.variables["PortNumber"], help="port used by the server")
parser.add_option("-n", "--threads", type="int", dest="nthreads", default=10, help="port used by the server")
(options, args) = parser.parse_args()

# Create main status queue.
pool = {}

# Create main Queue.
queue = Queue.Queue (0)

## Our thread class
class ClientThread ( threading.Thread, TempGeneratorValidator.JobManager):
# Define the lock for this class
  lock = threading.Lock()

  ## Override Thread's __init__ method to accept the parameters needed:
  def __init__ ( self ):
    self.__scratch = None 
    threading.Thread.__init__( self )
    self.__JobType = ""
    self.__GridJob = ""

  ## Define the basic send function
  def send ( self, string ):
    # Acquire lock
    ClientThread.lock.acquire()
    # Connect to the server:
    client = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )        
    client.connect ( ( 'localhost', options.port ) )
    # Send a message
    client.send( string )
    # Close the connection
    client.close()
    # Release the lock
    ClientThread.lock.release()
  
  def run ( self ):
    # Have our thread serve "forever"
    while True:
       # Get a client out of the queue
       client = queue.get()
       #print client
       
       # Check if we actually have an actual client in the client variable:
       if client != None:
         print 'received client'
         if client.has_key('normaljob'):
           run = client['normaljob']['Run']
           #if client.has_key['normaljob']['Grid']:
           #  Grid = True
           #else:
           #  Grid = False
           process = client['normaljob']['Process']
           compare = client['normaljob']['Compare']
           release = client['normaljob']['Release']
           self.__JobType = client['normaljob']['JobType']
           site = client['normaljob']['Site']
	   self.__GridJob = client['normaljob']['Grid']
           # To run Config files on local node, uncomment next two lines
           if self.__JobType.upper() != "BATCH" and self.__JobType.upper() != "CRAB":
             self.config_run(run, process, compare) ## Local Node!!
	     if self.__GridJob.upper() == "TRUE":
		self.Crab_run(run, process)
           elif self.__JobType.upper() == "BATCH":
             self.batch_run(run, process, compare, site) ## Condor Batch Jobs!!
	     if self.__GridJob.upper() == "TRUE":
	        self.Crab_run(run, process)
           elif self.__JobType.upper() == "CRAB":
             self.Crab_run(run, process)
           self.NewPublisher(run, process, compare, release, self.__JobType, site, self.__GridJob)
           message = {}
           message['Matrix'] = {"Status" : "Start"}
           self.send(pickle.dumps(message))
         if client.has_key("Matrix"):
           print "MatrixCreator Started"
           self.MatrixCreator(self.__JobType)
           print "Starting emailer" 
           Publisher.StaticWeb().email(threading.Lock)
           
           

       

# Check for a number of threads > than 0.
if options.nthreads < 0 :
  raise ErrorManager.ServerError, 'Negative number of threads.'

# Check for a port number > 5000.
if options.port < 5000 :
  raise ErrorManager.ServerError, 'Port number must by > 5000.'

for x in xrange ( options.nthreads ) :
  client = ClientThread()
  client.start()

# Set up the server:
server = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
server.bind ( ( '', options.port ) )
server.listen ( 5 )

status = {}
Matrix_run = 0
processes = 0
begin = 0
done = 0
temp = {}
comparelist = []
processlist = []
runlist = []
releaselist = []
jobs = []
# Have the server serve "forever":
while True:
  channel, details = server.accept()
  #message = channel.recv( 1024 ).split(); 
  message = pickle.loads( channel.recv( 2048 ) )
  if message.has_key('Matrix'):
    Matrix_run = Matrix_run + 1
    print Matrix_run, "processes done"
    if Matrix_run == processes:
      print processes, Matrix_run
      queue.put(message)
  elif message.has_key("normaljob"):
    processes = processes + 1
    print processes, "Process"
    queue.put ( message  )
  
      
      
      
      
        
      
    
  
