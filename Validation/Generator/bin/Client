#! /usr/bin/env python

import pickle
import socket
import os
import shutil
import Publisher
import commands
import threading 

import Configuration

from optparse import OptionParser

##  Idea is to run standard processes and compare Herwig and Pythia.  On occassion, test new release with old ones....   

usage = "usage: %prog [options] arg1 arg2"
parser = OptionParser()
parser.add_option("-p", "--process", dest="process", default="ALL", help="Process to be validated.  To list available processes, type '-l'")
parser.add_option("-r", "--run", dest="run", default="ALL", help="Which process to run, pythia, or herwig")
parser.add_option("-c", "--compare", dest="compare", default='all',  help="Which processes to compare run to, opposite, same, all")
parser.add_option("-l", "--list", action="store_true", dest="list", default=False, help="List all process available ")
parser.add_option("-v", "--vista", action="store_true", dest="vista", default=False, help="List all process available ")
parser.add_option("-a", "--allreleases", action="store_true", dest="all", default=False, help="Enables comparison of all releasess of generators")
parser.add_option("-o", "--port", type="int", dest="port", default=Configuration.variables["PortNumber"], help="port used by the server")
parser.add_option("-t", "--howto", dest="howto", action="store_true", default=False, help="Prints a 'howto'")
parser.add_option("-d", "--data", dest="data", action="store_true", default=False, help="Compares to data.  Overrides all comparison steps")
parser.add_option("-b", "--batch", dest="batch", action="store_false", default=True, help="Decides whether batch (true) or local (false).  Default is true")
parser.add_option("-s", "--site", dest="site", action="store_true", default=False, help="For which batch system false for FNAL, true for CERN")

(options, args) = parser.parse_args()

if options.batch == True:# and options.site == False:
    Batch = "BATCH"
if options.batch == False:
    Batch = "LOCAL"
if options.site == False:
    Site = "FNAL"
if options.site == True:
    Site = "CERN"
    
datajob = ""

if options.run != None and options.howto == False and options.list == False:
    List = os.listdir(Configuration.variables["HomeDirectory"]+'data/')
    Processes = []
    for file in List:
        if options.vista == False and 'VISTA' in file.upper():
            continue
        if options.run.upper() != "ALL":
            if file.split('.')[0].split('__')[1].upper() != options.run.upper():
                continue
        if options.process.upper() == "ALL":
            if file.split('.')[0].split('__')[0] not in Processes:
                Processes.append(file.split('.')[0].split('__')[0])
        else: # options.process.upper() != "ALL":
            if file.split('.')[0].split('__')[0] not in Processes and options.process.upper() == file.split('.')[0].split('__')[0].upper():
                Processes.append(file.split('.')[0].split('__')[0])
        
    #print Processes
    for job in Processes:
        client = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
        client.connect ( ( 'localhost', options.port ) )
        message = {}
        message['normaljob'] = {'Run' : options.run, 'Process' : job, 'Compare' : options.compare, 'Release' : str(options.all), "JobType" : Batch, "Vista" : str(options.vista), "Site" : Site}
        print message
        client.send ( pickle.dumps(message))
        client.close()
    if len(Processes) == 0 and options.vista == True:
        client = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
        client.connect ( ( 'localhost', options.port ) )
        message = {}
        message['normaljob'] = {'Run' : options.run, 'Process' : "Vista", 'Compare' : options.compare, 'Release' : str(options.all), "JobType" : Batch, "Vista" : str(options.vista), "Site" : Site}
        print message
        client.send ( pickle.dumps(message))
        client.close()


#if options.run != None and options.data == True and options.process != "ALL":
#   client = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )
#   client.connect ( ( 'localhost', options.port ) )
#   message = {}
#   message['datajob'] = {'Run' : options.run, 'Process' : options.process}
#   client.send ( pickle.dumps(message))
#   client.close() 
    

if options.run == None and options.list == False and options.howto == False:
    print "You must enter a process to run, either pythia, herwig, or both."

if options.howto != False:
    print_out = """\n
    ====================================================================================== \n\
    You must run: ' ./Server & '  before this will work
    ====================================================================================== \n\
    \n\
    --run=<generator> runs generator, default is ALL \n\
    \n\
    --compare=<generator> compares this generator to the one in --run default is opposite \n\
      choices are --compare=opposite, same or all.  Where opposite/same refers to --run \n\
      value \n\
    \n\
    --process=<process> runs only this process, default is all.  For list see -l \n\
    \n\
    -a compares all available --compare files in data directory to --run generator        \n\
    \n\
    -l lists all available processes, and how to type them \n\
    \n\
    -v runs any 'vista' files that exist. To run just vista type ./Client --process=none -v\n   
    \n\
    -b turns batch jobs off.  Default runs on condor, if you want to run locally type -b\n\
    \n\
    To run:
    You need to name which generator you want to run, and which you wish to compare it to. \n\
    It's the same to run pythia and compare to herwig, or run herwig and compare to pythia \n\
    To run pythia type: --run=pythia, to compare to herwig type: --compare=opposite.       \n\
    You can compare pythia to all herwig samples available by typing -a.  Otherwise it only\n\
    compares to the version of the current environment.  A sample command line would be:   \n\
    \n\
    ./Client --process=MinBias --run=pythia --compare=opposite -a \n\
    \n\
    This would run any pythia (--run=pythia) MinBias (--process=MinBias) cfg files in the  \n\
    GeneratorValidation/cfg directory and then run any herwig (--compare=opposite) MinBias\n\
    cfg files.  It would compare the two. It will also compare the newest pythia release to\n\
    ALL(-a) of the herwig MinBias samples kept in the data directory. If you were to change\n\
    compare to pythia, it would then compare the current version of pythia to any that you \n\
    have in the data directory.  If you change compare to both, it compare to all herwig   \n\
    and all pythia releases available including the current herwig version.  \n\
    \n\
    If you just want to run the current versions of all generators that you have a cfg file\n\
    for, and compare the releases to each other, then type: \n\
    \n\
    ./Client
    \n\
    This will run all of your processes located in the cfg directory in batch jobs.
    \n\
    

    """
    print print_out

if options.list != False:
    process_List = []
    for file in os.listdir(Configuration.variables['HomeDirectory']+'data/'):
        if file.split('__')[0] not in process_List:
            process_List.append(file.split('__')[0])
    string = ''
    for process in process_List:
        string = string + '    '+process + '\n'
    if string == '':
        string = "None"
    print """
    ========================== 
          Process List 
    ==========================
    \n"""+string
        
