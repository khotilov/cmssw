#! /usr/bin/env python

import pickle
import socket
import os
import shutil
import Publisher
import commands
import threading
import SingleGenVal

import Configuration

from optparse import OptionParser

##  Idea is to run standard processes and compare Herwig and Pythia.  On occassion, test new release with old ones....   

usage = "usage: %prog [options] arg1 arg2"
parser = OptionParser()
parser.add_option("-p", "--py", dest="py", default=None, help="Python file to be ran")
parser.add_option("-r", "--run", dest="run", default="ALL", help="Which process to run, pythia, or herwig")
parser.add_option("-c", "--compare", dest="compare", default='all',  help="Which processes to compare run to, opposite, same, all")
parser.add_option("-l", "--list", action="store_true", dest="list", default=False, help="List all process available ")
parser.add_option("-a", "--allreleases", action="store_true", dest="all", default=False, help="Enables comparison of all releasess of generators")
parser.add_option("-g", "--grid", action="store_true", dest="grid", default=False, help="Option for grid jobs!")
parser.add_option("-j", "--job", action="store_true", dest="job", default=False, help="Option to run ONLY crab jobs")
parser.add_option("-o", "--port", type="int", dest="port", default=Configuration.variables["PortNumber"], help="port used by the server")
parser.add_option("-t", "--howto", dest="howto", action="store_true", default=False, help="Prints a 'howto'")
parser.add_option("-d", "--data", dest="data", action="store_true", default=False, help="Compares to data.  Overrides all comparison steps")
parser.add_option("-i", "--interactive", dest="interactive", action="store_false", default=True, help="Decides whether batch (true) or local (false).  Default is true")
parser.add_option("-s", "--site", dest="site", action="store_true", default=False, help="Activate if running at CERN, otherwise, leave False")
(options, args) = parser.parse_args()

JobID = ''
if options.site == False:
    Site = "FNAL"
if options.site == True:
    Site = "CERN"
if options.py == None and options.howto == False:
    print "You must enter a valid .py file (-p)"
    
if options.py != None and options.howto == False:
    if options.grid == True:
        Grid = "True"
        Job = "Grid"
        if os.path.isfile(Configuration.variables["HomeDirectory"]+'Crab/'+py) == False:
            print "File must be valid, in Crab directory"
        else:
            JobID = SingleGenVal.JobManager().Crab_run(options.run, options.py)
    else:
        Grid = "False"
        if options.interactive == True:
            Job = "Batch"
            if os.path.isfile(Configuration.variables["HomeDirectory"]+'test/'+options.py) == False:
                print "File must be valid, in test directory"
            else:
                JobID = SingleGenVal.JobManager().batch_run(options.run, options.py, options.compare, Site)
                print "Jobid", JobID
        else:
            Job = "Local"
            JobID = 'local'
            if os.path.isfile(Configuration.variables["HomeDirectory"]+'test/'+options.py) == False:
                print "File must be valid, in test directory"
            else:
                SingleGenVal.JobManager().config_run(options.run, options.py, options.compare) ## Local Node!!
    if JobID != None:
        SingleGenVal.JobManager().NewPublisher(options.run, options.py, options.compare, options.all, Job, Site, Grid, JobID)
        SingleGenVal.JobManager().MatrixCreator(Job)
    else:
        print "Job wasn't submitted properly; no job ID given"



    

if options.run == None and options.list == False and options.howto == False:
    print "You must enter a process to run, either pythia, herwig, or both."

if options.howto != False:
    print_out = """\n
    ====================================================================================== \n\
    This is for the one analyzer mode only.
    ====================================================================================== \n\
    To run:
    You need to name which generator you want to run, and which you wish to compare it to. \n\
    It's the same to run pythia and compare to herwig, or run herwig and compare to pythia \n\
    To run pythia type: --run=pythia, to compare to herwig type: --compare=opposite.       \n\
    You can compare pythia to all herwig samples available by typing -a.  Otherwise it only\n\
    compares to the version of the current environment.  A sample command line would be:   \n\
    \n\
    ./Client --process=HZZ --run=pythia6 --compare=opposite -a \n\
    \n\
    This would run any pythia (--run=pythia6) HZZ (--process=HZZ) cfg files in the  \n\
    GeneratorValidation/test directory and then run any non-pythia6 (--compare=opposite) HZZ\n\
    cfg files.  It would compare the two. It will also compare the newest pythia release to\n\
    ALL(-a) of the non-pythia6 HZZ samples kept in the data directory. If you were to change\n\
    compare to pythia, it would then compare the current version of pythia to any that you \n\
    have in the data directory.  If you change compare to all, it compare to non-pythia \n\
    and all pythia releases available.  \n\
    \n\
    If you just want to run the current versions of all generators that you have a cfg file\n\
    for, and compare the releases to each other, then type: \n\
    \n\
    ./Client 
    \n\
    This will run all of your processes located in the test directory in batch jobs.\n\
    \n\
    \n\
    --run=<generator> runs generator, default is ALL \n\
    \n\
    --compare=<generator> compares this generator to the one in --run default is opposite \n\
      choices are --compare=opposite, same or all.  Where opposite/same refers to --run \n\
      value \n\
    \n\
    --process=<process> runs only this process, default is all.  For list see -l \n\
    \n\
    -a compares all available --compare files in data directory to --run generator        \n\
    \n\
    -l lists all available processes, and how to type them \n\
    \n\
    -d runs all processes that have a corresponding 'data' cfg file.  For special cases   \n\
      to run -d only type process, run and -d \n\
    \n\
    -i turns batch jobs off.  Default runs on condor, if you want to run locally type -i\n\
    \n\
    -s is to be activated when running at CERN. \n\
    \n\
    To run interactively add '-i' to any command \n\
    \n\
    To run in a batch job, with bsub (at CERN) type:\n\
    ./Client -s \n\
    \n\
    Any combination of these options will work.  e.g. I usually run the following at CERN: \n\
    ./Client -s -a \n\
    \n\
    This runs all of my processes through bsub and compares them to possible reference combinations \n\
    """
    print print_out

#if options.list != False:
#    pythia_List = []
#    herwig_List = []
#    both_List = []
#    pythia_String = '============\nJust Pythia \n============\n'
#    herwig_String = '============\nJust Herwig \n============\n'
#    both_String = '============\nIn Both \n============\n'
#    for file in os.listdir(Configuration.variables['HomeDirectory']+'test/'):
#        if 'PYTHIA' in file.upper() and file.split('__')[0] not in pythia_List and "DATA" not in file.upper():
#            pythia_List.append(file.split('__')[0])
#        if 'HERWIG' in file.upper() and file.split('__')[0] not in herwig_List and "DATA" not in file.upper():
#            pythia_List.append(file.split('__')[0])
#    for probe in pythia_List:
#        for probe1 in herwig_List:
#            if probe1 == probe:
#                both_List.append(probe)
#                herwig_List.remove(probe1)
#                pythia_List.remove(probe)
#                continue
#    for blist in both_List:
#        both_String = both_String + blist + '\n'
#    for hlist in herwig_List:
#        herwig_String = herwig_String + hlist + '\n'
#    for plist in pythia_List:
#        pythia_String = pythia_String + plist + '\n'
#    if pythia_String == '============\nJust Pythia \n============\n' :
#        pythia_String = pythia_String + 'None' + '\n'
#    if herwig_String == '============\nJust Herwig \n============\n' :
#        herwig_String = herwig_String + 'None' +'\n'
#    if both_String == '============\nIn Both \n============\n' :
#        both_String = both_String + 'None' + '\n'
#    print pythia_String, herwig_String, both_String
