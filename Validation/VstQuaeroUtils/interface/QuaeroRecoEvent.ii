/**************************
QuaeroRecoEvent.ii defines the methods of the QuaeroRecoEvent class
Bruce Knuteson 2003
**************************/


#include "Validation/VstQuaeroUtils/interface/QuaeroRecoObject.hh"
#include "Validation/VstMathUtils/interface/Math.hh"
#include <algorithm>
#include <cassert>
using namespace std;

/*********  Constructors  *********/

template<class T>
QuaeroRecoEvent<T>::QuaeroRecoEvent(string _eventType, string _runNumber, double _wt, 
					const std::vector<T>& _objects, string _collisionType, double _rootS, double _zVtx, double _generatedSumPt, string _fullString, bool keepAllObjects): 
		QuaeroItem<T>(_eventType, _runNumber, _wt, _objects)
{
  if(!((_collisionType=="")||
        (_collisionType=="e+e-")||
	(_collisionType=="e+p")||
	(_collisionType=="e-p")||
	(_collisionType=="ppbar")||
	(_collisionType=="pp")))
   {
     cout << _eventType << "  " << _runNumber << "  " << _wt << "  " << flush;
     cout << "_collisionType == " << _collisionType << endl;
     exit(1);
   }
  collisionType = _collisionType;
  rootS = _rootS;
  zVtx = _zVtx;
  generatedSumPt = _generatedSumPt;
  fullString = _fullString;
  if((_rootS==1960)||
     (_collisionType=="e+p")||
     (_collisionType=="e-p"))
    keepAllObjects = true;
  setObjects(_objects,keepAllObjects);
  return;
}

template<class T>
void QuaeroRecoEvent<T>::setObjects(const std::vector<T>& _objects, bool keepAllObjects)
{
  this->components = _objects;

  // smallestObjectPtHadronMachine = 4; // units are GeV // SHOULD NOT BE SET HERE
  smallestObjectPtHadronMachine = 10; // units are GeV // SHOULD NOT BE SET HERE
  smallestObjectEnergyLeptonMachine = 5; // units are GeV

  double Emin=0;
  if(hadronMachine())
    Emin = smallestObjectPtHadronMachine;
  if(leptonMachine())
    Emin = smallestObjectEnergyLeptonMachine;
  if((!keepAllObjects)&&
     (rootS!=1960)&&
     (collisionType!="e+p")&&
     (collisionType!="e-p"))
    for(size_t i=0; i<this->components.size(); i++)
      if((hadronMachine()&&(this->components[i].getFourVector().perp()<Emin-0.01)) ||
         (leptonMachine()&&(this->components[i].getFourVector().e()<Emin-0.01)) ||
         (this->components[i].getObjectType()=="uncl"))
        { this->components.erase(this->components.begin()+i); i--; }    

   // standard quaero object order
  for(size_t i=0; i<this->components.size(); i++)
    for(size_t j=i+1; j<this->components.size(); j++)
      if(this->components[i].getFourVector().perp() < this->components[j].getFourVector().perp())
	  {
	    T tmp = this->components[i];
	    this->components[i] = this->components[j];
	    this->components[j] = tmp;
	  }
  mergeObjectsOfThisType("uncl");
  return;
}



/*********  Accessors  *********/

template<class T>
T* QuaeroRecoEvent<T>::getThisObject(std::string objectType, int orderNumber)
{
  return(this->getThisComponent(objectType,orderNumber));
}

template<class T>
const T* QuaeroRecoEvent<T>::getThisObject(std::string objectType, int orderNumber) const
{
  return(this->getThisComponent(objectType,orderNumber));
}


template<class T>
std::vector<T> QuaeroRecoEvent<T>::getObjects() const
{
  return(this->getComponents());
}

template<class T>
int QuaeroRecoEvent<T>::numberOfObjects(double Emin, double maxAbsEtaTheta) const
{
  if(Emin<0)
    {
      if(hadronMachine())
	Emin = smallestObjectPtHadronMachine;
      else
	Emin = smallestObjectEnergyLeptonMachine;
    }
  if(maxAbsEtaTheta<0)
    {
      if(hadronMachine())
	maxAbsEtaTheta = 5; // units are pseudorapidity
      else
	maxAbsEtaTheta = 1; // units are cos(theta)
    }
  int ans = 0;
  for(size_t i=0; i<this->components.size(); i++)
    if(
       (
	leptonMachine() &&
	(this->components[i].getFourVector().e() > Emin) &&
	(fabs(this->components[i].getFourVector().cosTheta()) < maxAbsEtaTheta)
	) ||
       (
	hadronMachine() &&
	(this->components[i].getFourVector().perp() > Emin) &&
	(fabs(Math::theta2eta(this->components[i].getFourVector().theta())) < maxAbsEtaTheta)	  
	) ||
       ((this->components[i].getObjectType()=="w+")||
        (this->components[i].getObjectType()=="w-")||
        (this->components[i].getObjectType()=="z")))
      ans++;
  return(ans);
}


template<class T>
int QuaeroRecoEvent<T>::numberOfObjects(string objectType, double Emin, double maxAbsEtaTheta) const
{
  if(objectType=="e")
    return(numberOfObjects("e+",Emin,maxAbsEtaTheta)+numberOfObjects("e-",Emin,maxAbsEtaTheta));
  if(objectType=="mu")
    return(numberOfObjects("mu+",Emin,maxAbsEtaTheta)+numberOfObjects("mu-",Emin,maxAbsEtaTheta));
  if(objectType=="tau")
    return(numberOfObjects("tau+",Emin,maxAbsEtaTheta)+numberOfObjects("tau-",Emin,maxAbsEtaTheta));
  if(objectType=="jtau")
    return(numberOfObjects("jtau+",Emin,maxAbsEtaTheta)+numberOfObjects("jtau-",Emin,maxAbsEtaTheta));
  if(objectType=="w")
    return(numberOfObjects("w+",Emin,maxAbsEtaTheta)+numberOfObjects("w-",Emin,maxAbsEtaTheta));

  if(Emin<0)
    {
      if(hadronMachine())
	Emin = smallestObjectPtHadronMachine;
      if(leptonMachine())
	Emin = smallestObjectEnergyLeptonMachine;
    }	
  if(maxAbsEtaTheta<0)
    {
      if(hadronMachine())
	maxAbsEtaTheta = 5; // units are pseudorapidity
      if(leptonMachine())
	maxAbsEtaTheta = 1; // units are cos(theta)
    }

  if(objectType=="pmiss")
    {
      if((leptonMachine()&&(getPmiss().e() > Emin)) ||
	 (hadronMachine()&&(getPmiss().perp() > Emin)))	
	return(1);
      else
	return(0);      
    }
  int ans = 0;
  for(size_t i=0; i<this->components.size(); i++)
    if(this->components[i].getObjectType()==objectType)
      {
        double eta1 = 0;
        if(hadronMachine())
          {
            eta1 = fabs(Math::theta2eta(this->components[i].getFourVector().theta()));
            // if(rootS==1960) eta1 = QuaeroRecoObject::getDetectorEta("cdf", objectType, eta1, zVtx);
	  }
	if(
	   (
	    leptonMachine() &&
	    (this->components[i].getFourVector().e() > Emin) &&
	    (fabs(this->components[i].getFourVector().cosTheta()) < maxAbsEtaTheta)
	    ) ||
	   (
	    hadronMachine() && 
	    (this->components[i].getFourVector().perp() > Emin) &&
	    (eta1 < maxAbsEtaTheta) ) ||
	   ((objectType=="w+")||(objectType=="w-")||(objectType=="z")))
	  ans++;
      }
  return(ans);
}

template<class T>
std::string QuaeroRecoEvent<T>::getEventType() const
{
  return(this->getItemType());
}


template<class T>
std::string QuaeroRecoEvent<T>::getCollisionType() const
{
  return(collisionType);
}

template<class T>
double QuaeroRecoEvent<T>::getRootS() const
{
  return(rootS);
}

template<class T>
double QuaeroRecoEvent<T>::getZVtx() const
{
  return(zVtx);
}

template<class T>
string QuaeroRecoEvent<T>::getRunNumber() const
{
  return(this->getIdentifier());
}

template<class T>
double QuaeroRecoEvent<T>::getGeneratedSumPt() const
{
  return(generatedSumPt);
}

template<class T>
std::string QuaeroRecoEvent<T>::collider() const
{
  std::string ans = "";
  if((collisionType=="e+e-")&&((90<rootS)&&(rootS<92)))
    ans = "lep1";
  else if((collisionType=="e+e-")&&((180<rootS)&&(rootS<210)))
    ans = "lep2";
  else if(((collisionType=="e+p")||(collisionType=="e-p"))&&
	  ((300<rootS)&&(rootS<320)))
    ans = "hera";
  else if((collisionType=="ppbar")&&(Math::MPEquality(rootS,1800,0.1)))
    ans = "tev1";
  else if((collisionType=="pp")&&(Math::MPEquality(rootS,1960,0.2)))
    ans = "tev2";
  else if((collisionType=="ppbar")&&(Math::MPEquality(rootS,1960,0.2)))
    ans = "tev2";
  else if((collisionType=="pp")&&(Math::MPEquality(rootS,14000,0.1)))
    ans = "lhc";
  else if((collisionType=="pp")&&(Math::MPEquality(rootS,10000,0.1)))
    ans = "lhc";
  else if((collisionType=="pp")&&(Math::MPEquality(rootS,7000,0.1)))
    ans = "lhc";
  else
    {
    cout << "collisionType = " << collisionType << endl;
    cout << "rootS = " << rootS << endl;
    }
  assert(ans!="");
  return(ans);
}


template<class T>
bool QuaeroRecoEvent<T>::hadronMachine() const
{
  bool ans = false;
  if((collisionType=="e+p")||
     (collisionType=="e-p")||
     (collisionType=="ppbar")||
     (collisionType=="pp")||
     (rootS > 250))
    ans = true;
  return(ans);
}

template<class T>
bool QuaeroRecoEvent<T>::leptonMachine() const
{
  bool ans = false;
  if((collisionType=="e+e-")||
     (collisionType=="mu+mu-")||
     (rootS < 250))
    ans = true;
  return(ans);
}

/*********  Modifiers  *********/

template<class T>
void QuaeroRecoEvent<T>::reVertex(double _zVtx)
{
  zVtx = _zVtx;
  return;
}

/*********   Methods   *********/

template<class T>
CLHEP:: HepLorentzVector QuaeroRecoEvent<T>::getPmiss() const
{
  CLHEP::HepLorentzVector pmiss = CLHEP::HepLorentzVector(rootS, CLHEP::Hep3Vector(0,0,0));
  for(size_t i=0; i<this->components.size(); i++)
    if((this->components[i].getComponentType()!="jf")&&
       (this->components[i].getComponentType()!="jb")&&
       (this->components[i].getComponentType()!="jtau+")&&
       (this->components[i].getComponentType()!="jtau-")&&
       (this->components[i].getComponentType()!="g")&&
       (this->components[i].getComponentType()!="q")&&	
       (this->components[i].getComponentType()!="q+")&&	
       (this->components[i].getComponentType()!="q-")&&	
       (this->components[i].getComponentType()!="quds")&&
       (this->components[i].getComponentType()!="quds+")&&
       (this->components[i].getComponentType()!="quds-")&&
       (this->components[i].getComponentType()!="qc")&&	
       (this->components[i].getComponentType()!="qb")&&
       (this->components[i].getComponentType()!="qb"))
      pmiss -= this->components[i].getFourVector();
  if(hadronMachine())
    pmiss = CLHEP::HepLorentzVector(Math::addInQuadrature(pmiss.px(),pmiss.py()),CLHEP::Hep3Vector(pmiss.px(),pmiss.py(),0.));
  if(pmiss.e()<0)
    pmiss = CLHEP::HepLorentzVector(0,CLHEP::Hep3Vector(0,0,0));
  if(pmiss.m()<0)
    {
      pmiss = CLHEP::HepLorentzVector(Math::addInQuadrature(pmiss.perp(),pmiss.pz()),
                               CLHEP::Hep3Vector(pmiss.px(),pmiss.py(),pmiss.pz()));
    }
  return(pmiss);
}

template<class T>
double QuaeroRecoEvent<T>::sumPt() const
{
  double ans = 0.;
  for(size_t i=0; i<this->components.size(); i++)
    {
      ans += this->components[i].getFourVector().perp();
    }
  ans += getPmiss().perp();
  return(ans);
}

template<class T>
double QuaeroRecoEvent<T>::parseSystematicallyAffectedNumber(const std::string& wtString) const
{
  for(std::string::size_type i=0; i<wtString.length(); i++)
    if(wtString[i]=='{')
      return(atof(wtString.substr(0,i).c_str()));
  return(atof(wtString.c_str()));
}

template<class T>
string QuaeroRecoEvent<T>::print() const
{
  string ans = this->itemType+"  ";
  ans += this->identifier+"  ";
  ans += Math::ftoa(this->wt)+"  "+collisionType+"  "+Math::ftoa(rootS)+"  ";
  if((collisionType=="ppbar")||
     (collisionType=="pp")||
     (collisionType=="e+p")||
     (collisionType=="e-p"))	
    ans += Math::ftoa(generatedSumPt)+"  ";
  if(hadronMachine())
    ans += Math::ftoa(zVtx)+"  ";
  std::vector<T> _objects = getObjects();
  sort(_objects.begin(), _objects.end()); 
  for(size_t i=0; i<_objects.size(); i++)
    {
      if(leptonMachine())
	ans = ans + _objects[i].print("(m)-e-costheta-phi(rad)");
      if(hadronMachine())
	ans = ans + _objects[i].print("(m)-pt-eta-phi(deg)");
    }
  ans = ans + " ; ";
  return(ans);
}

template<class T>
istream &operator>>(istream& fin, QuaeroRecoEvent<T> & event)
{
  streampos startOfLine = fin.tellg(); //bookmark where we start this event from.
  
  string eventType = "";
  if(!(fin >> eventType))
    return(fin);
  string runNumber = "0";
  fin >> runNumber;
  string wtString;
  fin >> wtString;
  double wt = event.parseSystematicallyAffectedNumber(wtString);
  string collisionType;
  fin >> collisionType;
  double rootS, zVtx=0;
  fin >> rootS;
  double generatedSumPt=0;
  if((collisionType=="ppbar")||  // Tevatron
     (collisionType=="pp")||     // LHC
     (collisionType=="e+p")||    // HERA
     (collisionType=="e-p"))  
    fin >> generatedSumPt;
  if((collisionType=="ppbar")||
     (collisionType=="pp")||
     (collisionType=="e+p")||
     (collisionType=="e-p"))
    fin >> zVtx;

  T object;
  vector<T> objects;
  if(rootS>250)
    while(object.read(fin,"(m)-pt-eta-phi(deg)"))
      objects.push_back(object);
  else
    while(object.read(fin,"(m)-e-costheta-phi(rad)"))
      objects.push_back(object);

  streampos endOfLine = fin.tellg();
  string theFullString = "";
  if(endOfLine != startOfLine) {
    //then we don't have to do with std::cin, in which case both start and end are equal to -1.
    fin.seekg(startOfLine);
    getline(fin,theFullString);
  }
  event = QuaeroRecoEvent<T>(eventType,runNumber,wt,objects,collisionType,rootS,zVtx,generatedSumPt,theFullString);
  return(fin);
}

template<class T>
ostream &operator<<(ostream& fout, const QuaeroRecoEvent<T> & event)
{
  fout << event.print();
  return(fout);
}

template<class T>
bool QuaeroRecoEvent<T>::operator==(const QuaeroRecoEvent<T> & rhs) const
{
  bool ans =
    (rootS == rhs.rootS) &&
    (zVtx == rhs.zVtx) &&
    (fullString == rhs.fullString) &&
    ((QuaeroItem<T>)(*this)==(QuaeroItem<T>)(rhs));
  return(ans);
}

template<class T>
bool QuaeroRecoEvent<T>::approximatelyEqualTo(const QuaeroRecoEvent<T>& rhs, double tol)
{
  bool ans = true;
  vector<string> objectList;
  objectList.push_back("e+");
  objectList.push_back("e-");
  objectList.push_back("mu+");
  objectList.push_back("mu-");
  objectList.push_back("ph");
  objectList.push_back("j");
 
  string theProblem = "";
  for(int i=0; i<objectList.size(); i++)
    {
      int n1 = numberOfObjects(objectList[i]);
      int n2 = rhs.numberOfObjects(objectList[i]);
      if(n1==n2)
	{
	  for(int j=1; j<=n1; j++)
	    {
	      bool sameObject = (getThisObject(objectList[i],j)->approximatelyEqualTo(*(rhs.getThisObject(objectList[i],j)),tol));
	      if(!sameObject)
		{
		  ans = false;
		  theProblem += objectList[i]+Math::ftoa(j)+" ";
		}
	    }
	}
      else
	{
	  ans = false;
	  theProblem += objectList[i]+Math::ftoa(n1)+"-"+Math::ftoa(n2)+" ";
	}
    }
  if(ans==false)
    {
      cout << " ** " << theProblem << endl;
    }
  return(ans);
}


template<class T>
void QuaeroRecoEvent<T>::mergeObjectsOfThisType(std::string objectType)
{
  CLHEP::HepLorentzVector v = CLHEP::HepLorentzVector();
  for(size_t i=0; i<this->components.size(); i++)
    if(this->components[i].getObjectType()==objectType)
      {
	v += this->components[i].getFourVector();
	this->components.erase(this->components.begin()+i);
	i--;
      }
  if(v!=CLHEP::HepLorentzVector())
    this->components.push_back(T(objectType,v));
  return;
}

