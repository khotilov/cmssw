/**********************
QuaeroItem is a templated class, so its method definitions are contained in this .ii file.
Bruce Knuteson 2003
**********************/


#include "Validation/VstMathUtils/interface/Math.hh"

template<class T1>
std::istream& operator>>(std::istream& fin, QuaeroItem<T1>& item)
{
  std::string itemType = "";
  if(!(fin >> itemType))
    return(fin);
  std::string identifier = "";
  fin >> identifier;
  double wt;
  fin >> wt;
  T1 component;
  std::vector<T1> components;
  try
    {
      while(true)  // read in components until an exception is thrown
	{
	  component.read(fin);
	  components.push_back(component);
	}
    }
  catch(int)
    {
      ;
    }
  item = QuaeroItem<T1>(itemType,identifier,wt,components);
  return(fin);
}

template<class T1>
std::ostream& operator<<(std::ostream& fout, const QuaeroItem<T1>& item)
{
  fout << item.print();
  return(fout);
}


/********  Constructor  ********/
	
template<class T>
QuaeroItem<T>::QuaeroItem(std::string _itemType, std::string _identifier, double _wt, const std::vector<T>& _components): 
	itemType(_itemType), identifier(_identifier), wt(_wt), components(_components)
{
}

  
/********   Accessors   ********/

template<class T>
std::string QuaeroItem<T>::getItemType() const
{
  return(itemType);
}

template<class T>
std::string QuaeroItem<T>::getIdentifier() const
{
  return(identifier);
}

template<class T>
double QuaeroItem<T>::getWeight() const
{
  return(wt);
}

template<class T>
int QuaeroItem<T>::numberOfComponents(std::string componentType) const
{
  if(componentType=="*")
    return(components.size());
  int n=0;
  for(size_t i=0; i<components.size(); i++)
    if((componentType==components[i].getComponentType()))
      n++;
  return(n);
}
      
template<class T>
std::vector<T> QuaeroItem<T>::getComponents() const
{
  return(components);
}

template<class T>
T* QuaeroItem<T>::getThisComponent(std::string componentType, int orderNumber) 
{
  assert(orderNumber>0);
  T* theDesiredComponent=0;
  int n=0;
  for(size_t i=0; i<components.size(); i++)
    if((components[i].getComponentType()==componentType))
       {
	 n++;
	 if(n==orderNumber)
	     theDesiredComponent = &components[i];
       }
  return(theDesiredComponent);
}

template<class T>
const T* QuaeroItem<T>::getThisComponent(std::string componentType, int orderNumber) const
{
  assert(orderNumber>0);
  const T* theDesiredComponent=0;
  int n=0;
  for(size_t i=0; i<components.size(); i++)
    if((components[i].getComponentType()==componentType))
       {
	 n++;
	 if(n==orderNumber)
	     theDesiredComponent = &components[i];
       }
  return(theDesiredComponent);
}


/********   Modifiers   ********/

template<class T>
void QuaeroItem<T>::reWeight(double _wt)
{
  assert(_wt>=0.);
  wt = _wt;
}

template<class T>
void QuaeroItem<T>::reType(std::string _itemType)
{
  itemType = _itemType;
  return;
}

template<class T>
void QuaeroItem<T>::changeComponents(const std::vector<T>& _components)
{
  components = _components;
  return;
}


/********   Methods   ********/

template<class T>
std::string QuaeroItem<T>::print() const
{
  std::string ans = "";
  ans += itemType+" ";
  for(size_t i=0; i<components.size(); i++)
    ans += components[i].print()+" ";
  return(ans);
}

template<class T>
bool QuaeroItem<T>::operator==(const QuaeroItem<T> & rhs) const
{
  bool ans =
  	(components == rhs.components) &&
	(itemType == rhs.itemType) &&
	(wt == rhs.wt) &&
  	(identifier == rhs.identifier);
  return(ans);
}


template<class T>
double effectiveNumberOfItems(const std::vector<QuaeroItem<T> > & items)
{
  std::vector<double> weights;
  for(size_t i=0; i<items.size(); i++)
    weights.push_back(items[i].getWeight());
  return(Math::effectiveNumberOfEvents(weights));
}

