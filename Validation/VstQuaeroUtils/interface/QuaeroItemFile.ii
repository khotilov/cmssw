/*******************
QuaeroItemFile.ii contains the definitions of member functions of this templated class
Bruce Knuteson 2003
*******************/

#include <iostream>
#include <string>
#include <cassert>
#include <cstdlib>


/*****  Constructors  *****/

template<class T>
QuaeroItemFile<T>::QuaeroItemFile(std::string _filename)
{
  daughterQuaeroItemFile=NULL;
  filename = _filename;
  if(filename=="-")
    inStream = &std::cin;
  else
    inStream = new std::ifstream(filename.c_str());
  setUpIStream();
}

template<class T>
QuaeroItemFile<T>::QuaeroItemFile(std::istream& _inStream)
{
  daughterQuaeroItemFile=NULL;
  filename = "";
  inStream = &_inStream;
  setUpIStream();
}

template<class T>
void QuaeroItemFile<T>::setUpIStream()
{
  if(*inStream)
    {
      char c = inStream->get();
      if(c=='*')
        {
	  std::string daughterFileName;
	  (*inStream) >> daughterFileName;
	  daughterQuaeroItemFile = new QuaeroItemFile(daughterFileName);
	}
      else
        inStream->putback(c);	  
    }
  return;
}


/*****  Destructor  *****/

template<class T>
QuaeroItemFile<T>::~QuaeroItemFile()
{
  if((filename!="")&&(filename!="-"))
    delete inStream;
  return;
}


/*****  Methods  *****/

/// Grab the next event from the file

template<class T>
bool QuaeroItemFile<T>::nextEvent(T& event)
{
  bool ans = false;
  if(daughterQuaeroItemFile==NULL)
    ans = ((*inStream)&&((*inStream) >> event));
  else
    {
      ans = daughterQuaeroItemFile->nextEvent(event);
      while(!ans)
        {
          delete daughterQuaeroItemFile;
	  daughterQuaeroItemFile=NULL;
	  std::string daughterFileName="";
	  if((*inStream)&&((*inStream) >> daughterFileName))
	    {
	      daughterQuaeroItemFile = new QuaeroItemFile<T>(daughterFileName);
	      ans = daughterQuaeroItemFile->nextEvent(event);
            }
          else
            break;
         }
     }
  return(ans);
}

/// Load all of the events from the file
/// Leave out some, or only include some, according to this method's arguments

template<class T>
std::vector<T> QuaeroItemFile<T>::loadEvents(std::vector<std::string> specialEventTypes, std::string opt)
{
  assert((opt=="leaveOut")||(opt=="onlyInclude"));
  std::vector<T> events;
  T event;
  while(nextEvent(event))
    {
	std::string eventType = event.getItemType();
	bool leftOut = (opt=="onlyInclude");

	// Note that <eventType> matches <eventType>_*
	// e.g., "pyth_jj" matches "pyth_jj_020-025", "pyth_jj_025-050", etc. 
	for(size_t i=0; i<specialEventTypes.size(); i++)
	  if((specialEventTypes[i]==eventType)||
             ( (specialEventTypes[i].length()<eventType.length()) &&
	       (specialEventTypes[i]+"_"==eventType.substr(0,specialEventTypes[i].size()+1)) ))
	    { 
               leftOut = !leftOut;
               break;
            }
        if(!leftOut)
	  if(event.getWeight()>0)
	    events.push_back(event);
    }
  return(events);
}

/// Normalize the weights of the events in this file to desiredWeight

template<class T>
void normalizeWeight(std::string sigFilename, double desiredWeight)
{
  QuaeroItemFile<T> itemFile(sigFilename);
  std::vector<T> sigEvents = itemFile.loadEvents();

  double totalWeight = 0.;
  for(int i=0; i<sigEvents.size(); i++)
    totalWeight += sigEvents[i].getWeight();
  for(int i=0; i<sigEvents.size(); i++)
    sigEvents[i].reWeight(sigEvents[i].getWeight()*desiredWeight/totalWeight);
  system(("rm "+sigFilename).c_str());
  std::ofstream fout(sigFilename.c_str());
  for(int i=0; i<sigEvents.size(); i++)
    fout << sigEvents[i] << std::endl;
  fout.close();
  return;
}

