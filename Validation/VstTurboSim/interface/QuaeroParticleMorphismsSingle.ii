#include "Validation/VstTurboSim/interface/QuaeroParticleMorphismsSingle.hh"
#include "Validation/VstMathUtils/interface/Math.hh"

template<class T1, class T2>
QuaeroParticleMorphismsSingle<T1,T2>::
QuaeroParticleMorphismsSingle() {

   string particleTypeList;
   size_t i;
   string tmpParticle;
   double periodicity;
       
   // load dependencies
   if ( getenv("TurboSimPhiDependent") ) {
      cout << "Phi Dependent Particles: " << flush;
      particleTypeList = getenv("TurboSimPhiDependent");
      i = 0;
      while ( i < particleTypeList.length() ) {
	 tmpParticle = "";
	 while ( i < particleTypeList.length() &&
		 particleTypeList[ i ] != ' ' ) {
	    tmpParticle += particleTypeList[ i++ ];
	 }
         if ( tmpParticle != "" ) {
	    cout << tmpParticle << " " << flush;
	    phiDependencies[ tmpParticle ] = 
	       pair<int,double>( DEPENDENT, 0.0 );
	 }
	 i++;
      }
      cout << endl;
   }

   if ( getenv("TurboSimPhiIndependent") ) {
      cout << "Phi Independent Particles: " << flush;
      particleTypeList = getenv("TurboSimPhiIndependent");
      i = 0;
      while ( i < particleTypeList.length() ) {
	 tmpParticle = "";
	 while ( i < particleTypeList.length() &&
		 particleTypeList[ i ] != ' ' ) {
	    tmpParticle += particleTypeList[ i++ ];
	 }
         if ( tmpParticle != "" ) {
	    cout << tmpParticle << " " << flush;
	    phiDependencies[ tmpParticle ] = 
	       pair<int,double>( INDEPENDENT, 0.0 );
	 }
	 i++;
      }
      cout << endl;
   }
   
   if ( getenv("TurboSimPhiPeriodic") ) {
      cout << "Phi Periodic Particles: " << flush;
      particleTypeList = getenv("TurboSimPhiPeriodic");
      i = 0;
      while ( i < particleTypeList.length() ) {
	 // particle typ	 
	 tmpParticle = "";
	 while ( i < particleTypeList.length() &&
		 particleTypeList[ i ] != ' ' ) {
	    tmpParticle += particleTypeList[ i++ ];
	 }
	 i++;
	 // periodicity
	 string tmp;
	 while ( i < particleTypeList.length() &&
		 particleTypeList[ i ] != ' ' ) {
	    tmp += particleTypeList[ i++ ];
	 }
	 if ( tmp == "" ) {
	    cerr << "No periodicity given for phi periodic particle: "
		 << tmpParticle;
	    break;
	 }
	 //	 atox x( tmp );
	 periodicity = atof( tmp.c_str() );
         if ( tmpParticle != "" ) {
	    cout << tmpParticle << "(" 
		 << periodicity << ") " << flush;
	    phiDependencies[ tmpParticle ] = 
	       pair<int,double>( PERIODIC, periodicity );
	 }
	 i++;
      }
      cout << endl;
   }

}

template<class T1, class T2>
void QuaeroParticleMorphismsSingle<T1,T2>::
Add( const T1& key, 
     const std::vector<T2>& value, 
     double zvtx, 
     std::string comment ) {

   vector<double> tmp = getKey(key, zvtx);
   Node node;
   node.particles = value;
   node.comment = comment;
   
   for(size_t i=0; i<value.size(); i++)
      node.particles[i] = 
	 T2( value[i].getObjectType(),
	     QuaeroRecoObject::
	     setLorentzVectorMPtEtaPhi( value[i].getFourVector().m(),
					value[i].getFourVector().perp(),
					QuaeroRecoObject::
					getDetectorEta( "cms",
							value[i].getObjectTypeSansSign(),
							Math::
							theta2eta( value[i].getFourVector().theta() ),
							zvtx ),
					value[i].getFourVector().phi() ) );
   
   forest.Add( key.getObjectType(), 
	       getKey( key, zvtx ), 
	       node );
}


template<class T1, class T2>
std::vector<T2> QuaeroParticleMorphismsSingle<T1,T2>::
findClosest( const T1& particleTargetKey, 
	     double zvtx, 
	     std::string& comment ) {
   std::vector<double> targetKey = getKey( particleTargetKey, 
					   zvtx );
   std::vector<double> closestKey = targetKey;
   Node node = forest.findClosest( particleTargetKey.getObjectType(), 
				   closestKey );
   comment = node.comment;
   //for ( int i = 0; i < node.particles.size(); i++ )
   //   shimmy ( node.particles[i], 
   //	       targetKey, 
   //       closestKey, 
   //       zvtx );
   return node.particles;
}


template<class T1, class T2>
std::vector<T2> QuaeroParticleMorphismsSingle<T1,T2>::
findClosest( const T1& particleTargetKey, 
	     double zvtx, 
	     std::string &comment,
	     std::string &searchTrace ) {
   std::vector<double> targetKey = getKey( particleTargetKey, 
					   zvtx );
   std::vector<double> closestKey = targetKey;
   Node node = forest.findClosest( particleTargetKey.getObjectType(), 
				   closestKey,
				   searchTrace );
   comment = node.comment;
   for ( size_t i = 0; i < node.particles.size(); i++ )
      shimmy ( node.particles[i], 
   	       targetKey, 
             closestKey, 
             zvtx );
   return node.particles;
}

template<class T1, class T2>
std::vector<double> QuaeroParticleMorphismsSingle<T1,T2>::
getKey( const T1& quaeroParticle, double zvtx ) {

   // number of dimensions specified in tree constructor!

   int dimensions;
   int dependence;
   double periodicity=0;
   string particleType = quaeroParticle.getObjectTypeSansSign();
   map< string, pair< int, double > >::const_iterator dependenceI =
      phiDependencies.find( particleType );

   // default behavior: phi dependence
   if ( dependenceI == phiDependencies.end() )
      dependence = DEPENDENT;
   else {
      dependence = dependenceI->second.first;
      if ( dependence == PERIODIC )
	 periodicity = dependenceI->second.second;
   }

   if ( dependence == INDEPENDENT )
      dimensions = 2;
   else
      dimensions = 3;

    std::vector< double > targetKey = 
      std::vector< double >( dimensions );
   targetKey[0] = quaeroParticle.getFourVector().perp();
   targetKey[1] = QuaeroRecoObject::getDetectorEta( "cms", 
						    quaeroParticle.getObjectTypeSansSign(), 
						    Math::theta2eta( quaeroParticle.getFourVector().theta() ), 
						    zvtx );

   if ( dependence == DEPENDENT )
      targetKey[2] = quaeroParticle.getFourVector().phi();
   if ( dependence == PERIODIC ) 
      targetKey[2] = fmod( quaeroParticle.getFourVector().phi(),
			   periodicity );

   return targetKey;
}

template<class T1, class T2>
void QuaeroParticleMorphismsSingle<T1,T2>::
shimmy( T2& quaeroParticle, 
	const std::vector<double>& targetKey, 
	const std::vector<double>& closestKey, 
	double zvtx ) {

   quaeroParticle = T2( quaeroParticle.getObjectType(), 
		        QuaeroRecoObject::
			setLorentzVectorMPtEtaPhi( quaeroParticle.getFourVector().m(),
						   max( 0., 
							quaeroParticle.getFourVector().perp() +
							targetKey[0] -
							closestKey[0] + 
							0.4 * ( targetKey[0] - quaeroParticle.getFourVector().perp() )
							* ( fabs( targetKey[0] - quaeroParticle.getFourVector().perp() ) < 
							    0.4 * ( targetKey[0] + quaeroParticle.getFourVector().perp() ) / 2 ) ),
						   QuaeroRecoObject::
						   getEventEta( "cms",
								quaeroParticle.getObjectTypeSansSign(),
								Math::theta2eta(quaeroParticle.getFourVector().theta()),
								zvtx) +
						   ( QuaeroRecoObject::getEventEta( "cms",
										    quaeroParticle.getObjectTypeSansSign(),
										    targetKey[1],
										    zvtx ) - 
						     QuaeroRecoObject::getEventEta( "cms",
										    quaeroParticle.getObjectTypeSansSign(),
										    closestKey[1],
										    zvtx) ),
						   quaeroParticle.getFourVector().phi() + 
						   ( targetKey[2] - closestKey[2] ) ) );
   return;
}

template<class T1, class T2>
void QuaeroParticleMorphismsSingle<T1,T2>::clear() {
//MRENNA
   forest.clear();
}


template<class T1, class T2>
double QuaeroParticleMorphismsSingle<T1,T2>::
bushiness( const T1& particleTargetKey ) {
   return forest.bushiness( particleTargetKey.getObjectType() );
}
