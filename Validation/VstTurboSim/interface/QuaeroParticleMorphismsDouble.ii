
#include "Validation/VstTurboSim/interface/QuaeroParticleMorphismsDouble.hh"

template<class T1, class T2>
QuaeroParticleMorphismsDouble<T1,T2>::QuaeroParticleMorphismsDouble()
{
}

template<class T1, class T2>
void QuaeroParticleMorphismsDouble<T1,T2>::Add(const T1& key1, const T1& key2, const std::vector<T2>& value, double zvtx, std::string comment)
{
  Node node;
  std::vector<T2> _value = value;
  for(size_t i=0; i<_value.size(); i++)
    _value[i] = T2(value[i].getObjectType(),
		      QuaeroRecoObject::setLorentzVectorMPtEtaPhi(value[i].getFourVector().m(),
						value[i].getFourVector().perp(),
						QuaeroRecoObject::getDetectorEta("cdf",value[i].getObjectTypeSansSign(),Math::theta2eta(value[i].getFourVector().theta()),zvtx),
						value[i].getFourVector().phi()
						));
  node.particles = _value;
  node.key1 = key1;
  node.key2 = key2;
  node.comment = comment;
  forest.Add(getTreeName(key1,key2), getKey(key1, key2, zvtx), node);
}


template<class T1, class T2>
std::vector<T2> QuaeroParticleMorphismsDouble<T1,T2>::findClosest(const T1& key1, const T1& key2, double zvtx, std::string& comment)
{
  std::vector<double> targetKey = getKey(key1, key2, zvtx);
  std::vector<double> closestKey = targetKey;
  Node node = forest.findClosest(getTreeName(key1,key2), closestKey);
  shimmy(node.particles, key1, key2, node.key1, node.key2, zvtx);
  comment = node.comment;
  return(node.particles);
}


template<class T1, class T2>
std::vector<std::string> QuaeroParticleMorphismsDouble<T1,T2>::getTreeName(const T1& particle1, const T2& particle2)
{
  std::vector<std::string> treeName;
  if(particle1.getFourVector().perp()>particle2.getFourVector().perp())
    {
      treeName.push_back(particle1.getObjectType());
      treeName.push_back(particle2.getObjectType());
    }
  else
   {
      treeName.push_back(particle2.getObjectType());
      treeName.push_back(particle1.getObjectType());
   }
  sort(treeName.begin(), treeName.end());
  return(treeName);
}

template<class T1, class T2>
std::vector<double> QuaeroParticleMorphismsDouble<T1,T2>::getKey(const T1& particle1, const T1& particle2, double zvtx)
{
  std::vector<double> targetKey(4);
  targetKey[0] = Math::theta2eta((particle1.getFourVector()+particle2.getFourVector()).theta());
  targetKey[1] = (particle1.getFourVector()+particle2.getFourVector()).phi();
  targetKey[2] = particle1.getFourVector().perp()/(particle1.getFourVector().perp()+particle2.getFourVector().perp());
  targetKey[3] = Math::deltaR(particle1.getFourVector().phi(),Math::theta2eta(particle1.getFourVector().theta()),particle2.getFourVector().phi(),Math::theta2eta(particle2.getFourVector().theta()));
  return(targetKey);
}


template<class T1, class T2>
void QuaeroParticleMorphismsDouble<T1,T2>::shimmy(vector<T2>& result, const T1& targetKey1, const T1& targetKey2, const T1& closestKey1, const T1& closestKey2, double zvtx)
{
  std::vector<double> targetKey = getKey(targetKey1, targetKey2, zvtx);
  std::vector<double> closestKey = getKey(closestKey1, closestKey2, zvtx);
  HepLorentzVector net;
  for(size_t i=0; i<result.size(); i++)
    net += result[i].getFourVector();
  for(size_t i=0; i<result.size(); i++)
    {
      T1 nearbyTargetKey, nearbyClosestKey;
      //double ptShimmy;	
      if(Math::deltaR(targetKey1.getFourVector().phi()-targetKey[1], Math::theta2eta(targetKey1.getFourVector().theta())-targetKey[0],
			result[i].getFourVector().phi()-net.phi(),Math::theta2eta(result[i].getFourVector().theta())-Math::theta2eta(net.theta())) < 
	Math::deltaR(targetKey2.getFourVector().phi()-targetKey[1], Math::theta2eta(targetKey2.getFourVector().theta())-targetKey[0],
			result[i].getFourVector().phi()-net.phi(),Math::theta2eta(result[i].getFourVector().theta())-Math::theta2eta(net.theta())))
	{
	  nearbyTargetKey = targetKey1;
	  nearbyClosestKey = closestKey1;
	}
      else
	{
	  nearbyTargetKey = targetKey2;
	  nearbyClosestKey = closestKey2;
	}
      result[i] = T2(result[i].getObjectType(),
		     QuaeroRecoObject::setLorentzVectorMPtEtaPhi(result[i].getFourVector().m(),
					       max(0.,result[i].getFourVector().perp()+nearbyTargetKey.getFourVector().perp()-nearbyClosestKey.getFourVector().perp()),
					       QuaeroRecoObject::getEventEta("cdf",result[i].getObjectTypeSansSign(), Math::theta2eta(result[i].getFourVector().theta()),zvtx)+
						(QuaeroRecoObject::getEventEta("cdf",nearbyTargetKey.getObjectTypeSansSign(), Math::theta2eta(nearbyTargetKey.getFourVector().theta()),zvtx)-
						QuaeroRecoObject::getEventEta("cdf",nearbyClosestKey.getObjectTypeSansSign(), Math::theta2eta(nearbyClosestKey.getFourVector().theta()),zvtx)),
					       result[i].getFourVector().phi()+(nearbyTargetKey.getFourVector().phi()-nearbyClosestKey.getFourVector().phi()) 
					       ));
    }
  return;
}


template<class T1, class T2>
void QuaeroParticleMorphismsDouble<T1,T2>::clear()
{
  forest.clear();
}

