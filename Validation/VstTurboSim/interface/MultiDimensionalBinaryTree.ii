template<class T1, class T2> 
MultiDimensionalBinaryTree<T1,T2>::MultiDimensionalBinaryTree()
{
  d = 0;
  left = NULL;
  right = NULL;
}


template<class T1, class T2> 
MultiDimensionalBinaryTree<T1,T2>::MultiDimensionalBinaryTree(int _dimensionality, int _level, std::vector<T1> _key, T2 _value)
{
   assert( _level < _dimensionality );
   assert( (int) _key.size() == _dimensionality );
   d = _dimensionality;
   level = _level;
   key = _key;
   value = _value;
   left = NULL;
   right = NULL;
}

template<class T1, class T2> 
MultiDimensionalBinaryTree<T1,T2>::~MultiDimensionalBinaryTree()
{ 
  //bktemp
  // David, if you can fix this, that'd be great ....   
  //cout << "Tree destructor . . ." << flush;
   clear();
   //cout << "Tree Destructed. " << endl;  
}

template<class T1, class T2> 
void MultiDimensionalBinaryTree<T1,T2>::Add(std::vector<T1> _key, T2 _value)
{
  if ( ( d == 0 ) &&
       ( left == NULL ) &&
       ( right == NULL ) ) // null tree
     *this = MultiDimensionalBinaryTree( _key.size(), 0, _key, _value);

  assert( (int) _key.size() == d );

  if ( _key[ level ] < key[ level ] )
    if ( left )
       left->Add( _key, _value );
    else
       left = new MultiDimensionalBinaryTree<T1,T2>( d,
						     ( level + 1 ) % d,
						     _key,
						     _value );
  else
     if ( right )
	right->Add( _key, _value );
    else
       right = new MultiDimensionalBinaryTree<T1,T2>( d,
						      ( level + 1 ) % d,
						      _key,
						      _value );
  return;
}

template<class T1, class T2> 
T2 MultiDimensionalBinaryTree<T1,T2>::
findClosest( std::vector<T1>& targetKey ) const {

  assert((int) targetKey.size()==d);
  if(Math::MPEquality(targetKey,key,0.01)) {
     return(value); // check for identity
  }
  if((targetKey[level]<key[level])&&(left)) {
     return(left->findClosest(targetKey));
  }
  if((targetKey[level]>=key[level])&&(right)) {
     return(right->findClosest(targetKey));
  }
  targetKey=key; 
  return(value);
}

template<class T1, class T2> 
T2 MultiDimensionalBinaryTree<T1,T2>::
findClosest( std::vector<T1>& targetKey,
	     std::string & treeTrace ) const {

   // value, key, level, d are private class members
  assert ((int) targetKey.size() == d );

  std::ostringstream oss1;		
  oss1 <<  level ;
  std::ostringstream oss2;
  oss2 << key[level];


     treeTrace += ( " (" + std::string(oss1.str()) +
		  ":" + 
		    std::string(oss2.str()) +
		  ")" );

   if ( Math::MPEquality( targetKey, 
			  key, 
			  0.01 ) ) {
      treeTrace += "=";
      return value; // check for identity
   }
   if ( ( targetKey[ level ] < key[ level ] ) &&
	( left != 0 ) ) {
      treeTrace += "<";  
      return ( left->findClosest( targetKey,
				  treeTrace ) );
   }
   if ( ( targetKey[ level ] >= key[ level ] ) && 
	( right != 0 ) ) {
      treeTrace += ">";
      return ( right->findClosest( targetKey,
				   treeTrace ) );
   }
   // otherwise closest match to targetKey is current key
   targetKey = key; 
   treeTrace += ".";
   return value;
}

template<class T1, class T2> 
void MultiDimensionalBinaryTree<T1,T2>::clear()
{
   if ( left ) {
      delete left;
      left = NULL;
   }
   if ( right ) {
      delete right;
      right = NULL;
   }
}  

template<class T1, class T2> 
void MultiDimensionalBinaryTree<T1,T2>::bushiness( int & nodes,
						   int & fullNodes ) const {
   
   // counts total number of nodes and
   // number of nodes with two children.

   nodes++;
   if ( left )
      left->bushiness( nodes, fullNodes );
   if ( right )
      right->bushiness( nodes, fullNodes );
   if ( left && right )
      fullNodes++;

}
   

