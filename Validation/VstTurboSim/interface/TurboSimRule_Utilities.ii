#include "Validation/VstTurboSim/interface/TurboSimRule_Utilities.hh"

bool TSRule::hasParticles( const TurboSimEvent &event ) {
   return ( hasPartonParticles( event ) || 
	    hasRecoParticles( event ) );
}

bool TSRule::hasPartonParticles( const TurboSimEvent &event ) {
   for ( vector< TurboSimPartonObject >::const_iterator pObj =
	    event.partonObjs().begin();
	 pObj != event.partonObjs().end();
	 ++ pObj )
      if ( hasParticles( *pObj ) )
	 return true;
   return false;
}

bool TSRule::hasRecoParticles( const TurboSimEvent &event ) {
   for ( vector< TurboSimRecoObject >::const_iterator rObj =
	    event.recoObjs().begin();
	 rObj != event.recoObjs().end();
	 ++ rObj )
      if ( hasParticles( *rObj ) )
	 return true;
   return false;
}

bool TSRule::hasParticles( const TurboSimObject &obj ) {
   for ( vector< TurboSimParticle >::const_iterator part =
	    obj.begin();
	 part != obj.end();
	 ++ part )
      if ( *part != DefinitionOf::nullParticle )
	 return true;
   return false;
}

bool TSRule::notEmpty( const TurboSimEvent &event ) {
   return hasRecoParticles( event ) && hasPartonParticles( event );
}


double TSRule::deltaAngle( const HepLorentzVector& v1, 
			   const HepLorentzVector& v2, 
			   TSRule::AngleMeasure angleMeasureMethod ) {
   
   if ( angleMeasureMethod == DEFAULT )
      angleMeasureMethod = DELTA_R;
   
   double theta1 = v1.theta();
   double phi1 = v1.phi();
   double theta2 = v2.theta();
   double phi2 = v2.phi();
   
   double dotProduct, angle, ans;
   
   switch ( angleMeasureMethod ) {
      
      // Delta Radius (solid angle)   
      case DELTA_R:
	 return Math::deltaR( phi1, 
			      Math::theta2eta( theta1 ), 
			      phi2, 
			      Math::theta2eta( theta2 ) );
	 break;
	 
	 // Delta Angle
      case DELTA_ANGLE:
	 dotProduct = 
	    sin(theta1)*cos(phi1)*sin(theta2)*cos(phi2) +
	    sin(theta1)*sin(phi1)*sin(theta2)*sin(phi2) +
	    cos(theta1)*cos(theta2);
	 dotProduct = min( 0.999, dotProduct ); // handle 1 + numerical error
	 angle = fabs( acos( dotProduct ));
	 return angle; 
	 break;
	 
	 // Manhattan Distance
      case MANHATTAN_DISTANCE:
	 return Math::addInQuadrature( Math::deltaphi( phi1, phi2 ), 
				       theta1 - theta2 );
	 break;
	 
	 // Energy Difference (magnitude of momentum)
      case KT_DURHAM: 
	 ans = pow( (v1 + v2).m() / 200, 2. );
	 if (( v1.e() < 0.1 ) || 
	     ( v2.e() < 0.1 ))
	    ans = 99;
	 return ans;
	 
      default:
	 assert( false );
	 return 0;
   } // switch
} // deltaAngle

std::string TSRule::getFileName( const std::string &baseFilename,
				 const std::vector< std::string > &tags,
				 const std::string &type ) {
   
   std::string ans = baseFilename + "_";
   
   // type contains specific type of morphing
   // i.e. 'singlet_reco2parton'
   if ( type != "" )
      ans += type + "_";
   
   // tag is type of particles involved
   // i.e. 'bb' or 'e+e-'
   for ( int i = 0; i < tags.size(); i++ )
      ans += tags[i];
   
   ans += ".txt";
   
   return ans;
}
