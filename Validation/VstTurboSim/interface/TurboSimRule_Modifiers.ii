#include "Validation/VstTurboSim/interface/TurboSimRule_Modifiers.hh"

/** 
 * Removes UNCL 'particles' from a <code>TSParticleEvent</code>'s
 * <code>partonItems</code>.
 */
bool TSModifier::DiscardUncl( TurboSimEvent &event ) {
   for ( vector< TurboSimPartonObject >::iterator i =
	    event.partonObjs().begin();
	 i != event.partonObjs().end();
	 ++ i ) {
      for ( vector< TurboSimParticle >::iterator j = 
	       i->begin();
	    j != i->end();
	    ++ j )
	 if ( j->type() == DefinitionOf::UNCL ) {
	    i->erase( j );
	    j--;
	 }
      if ( i->empty() ) {
	 event.partonObjs().erase( i );
	 -- i;
      }
   }
   return ( TSRule::notEmpty( event ) );
}

bool objectCmpGT( const TurboSimObject &lhs,
		const TurboSimObject &rhs ) {
   return lhs > rhs;
}

bool TSModifier::SortObjects( TurboSimEvent &event ) {
   std::sort( event.partonObjs().begin(), 
	      event.partonObjs().end(),
	      &objectCmpGT );
   std::sort( event.recoObjs().begin(), 
	      event.recoObjs().end(),
	      &objectCmpGT );
   return ( TSRule::notEmpty( event ) );
}

bool TSModifier::DiscardDuplicateObjects( TurboSimEvent &event ) {
   // Event objects must be sorted with SortObjects before
   // calling this method.
   for ( vector< TurboSimPartonObject >::iterator i =
	    event.partonObjs().begin();
	 i != event.partonObjs().end() - 1 &&
	    i != event.partonObjs().end();
	 ++ i )
      if ( *i == *( i + 1 ) ) {
	 vector< TurboSimPartonObject >::iterator j = i + 1;
	 event.removePartonObj( j );
      }
   for ( vector< TurboSimRecoObject >::iterator i =
	    event.recoObjs().begin();
	 i != event.recoObjs().end() - 1 &&
	    i != event.recoObjs().end();
	 ++ i )
      if ( *i == *( i + 1 ) ) {
	 vector< TurboSimRecoObject >::iterator j = i + 1;
	 event.removeRecoObj( j );
      }
   return ( TSRule::notEmpty( event ) );
}
