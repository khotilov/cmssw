template<class T>
vector<string> getTag(vector<T> objects)
{
  vector<string> tag;
  for(size_t i=0; i<objects.size(); i++)
    tag.push_back(objects[i].getObjectType());
  sort(tag.begin(), tag.end());
  return(tag);
}

template <class T>
bool chargeConjugationRequiredQ(const vector<T>& objects)
{
  vector<string> tag = getTag(objects);
  for(size_t i=0; i<tag.size(); i++)
    {
      if(tag[i].substr(tag[i].length()-1)=="+")
	return false;
      if(tag[i].substr(tag[i].length()-1)=="-")
	return true;
    }
  return false;
}

template<class T>
void chargeConjugate(vector<T>& objects)
{
  for(size_t i=0; i<objects.size(); i++)
    objects[i].chargeConjugate();
  return;
}

