
#include "Validation/VstTurboSim/interface/QuaeroParticleMorphismsTriple.hh"
#include <map>
#include <cfloat>

/// Default constructor

template<class T1, class T2>
QuaeroParticleMorphismsTriple<T1,T2>::QuaeroParticleMorphismsTriple()
{
}

/// Add

template<class T1, class T2>
void QuaeroParticleMorphismsTriple<T1,T2>::Add(const std::vector<T1>& key, const std::vector<T2>& value, double zvtx, std::string comment)
{
  Node node;
  node.particles = value;
  node.key = key;
  node.comment = comment;
  forest.Add(getTreeName(key), getKey(key, zvtx), node);
}


template<class T1, class T2>
std::vector<T2> QuaeroParticleMorphismsTriple<T1,T2>::findClosest(const std::vector<T1>& key, double zvtx, std::string& comment)
{
  std::vector<double> targetKey = getKey(key, zvtx);
  std::vector<double> closestKey = targetKey;
  Node result = forest.findClosest(getTreeName(key), closestKey);
  shimmy(result.particles, key, result.key, zvtx);
  comment = result.comment;
  return(result.particles);
}


template<class T1, class T2>
std::vector<std::string> QuaeroParticleMorphismsTriple<T1,T2>::getTreeName(const std::vector<T1>& particles)
{
  std::vector<std::string> treeName;
  std::map<double,int> pt;
  for(int i=0; i<3; i++)
    pt[particles[i].getFourVector().perp()]=i;
  for(std::map<double,int>::iterator i=pt.begin(); i!=pt.end(); i++)
    treeName.push_back(particles[i->second].getObjectType());
  return(treeName);
}

template<class T1, class T2>
std::vector<double> QuaeroParticleMorphismsTriple<T1,T2>::getKey(const std::vector<T1>& particles, double zvtx)
{
  vector<double> pt;
  for(int i=0; i<3; i++)
    pt.push_back(particles[i].getFourVector().perp());

  sort(pt.begin(), pt.end());
  double lowestPt = pt[0];
  double middlePt = pt[1];
  double highestPt = pt[2];
  std::vector<double> targetKey(3);
  targetKey[0] = Math::theta2eta((particles[0].getFourVector()+particles[1].getFourVector()+particles[2].getFourVector()).theta());
  targetKey[1] = highestPt/(highestPt+middlePt);
  targetKey[2] = middlePt/(middlePt+lowestPt);
  return(targetKey);
}


template<class T1, class T2>
void QuaeroParticleMorphismsTriple<T1,T2>::shimmy(vector<T2>& result, const std::vector<T1>& targetKey0, const std::vector<T1>& closestKey0, double zvtx)
{
  if(closestKey0.size()==0) // no tree found with this name
    {
      CLHEP::HepLorentzVector v = CLHEP::HepLorentzVector();
      for(size_t i=0; i<targetKey0.size(); i++)
        v += targetKey0[i].getFourVector();
      result = vector<T2>(1,T2("j",v));
      return;
    }
  std::vector<double> targetKey = getKey(targetKey0, zvtx);
  std::vector<double> closestKey = getKey(closestKey0, zvtx);
  for(size_t i=0; i<result.size(); i++)
    {
      T1 nearbyTargetKey, nearbyClosestKey;
//      double ptShimmy;
      double distance=FLT_MAX, minDistance=FLT_MAX;
      int closestTargetKeyObject = -1;
      for(size_t j=0; j<targetKey0.size(); j++)
        {
          distance = Math::deltaR(targetKey0[j].getFourVector().phi(), Math::theta2eta(targetKey0[j].getFourVector().theta()),
				result[i].getFourVector().phi(), Math::theta2eta(result[i].getFourVector().theta()));
          if(distance<minDistance)
            {
              minDistance = distance;
              closestTargetKeyObject = j;
            }
        }
      assert(closestTargetKeyObject>=0);
      nearbyTargetKey = targetKey0[closestTargetKeyObject];
      nearbyClosestKey = closestKey0[closestTargetKeyObject];

      result[i] = T2(result[i].getObjectType(),
		     QuaeroRecoObject::setLorentzVectorMPtEtaPhi(result[i].getFourVector().m(),
					       max(0.,result[i].getFourVector().perp()+nearbyTargetKey.getFourVector().perp()-nearbyClosestKey.getFourVector().perp()),
					       QuaeroRecoObject::getEventEta("cms",result[i].getObjectTypeSansSign(), Math::theta2eta(result[i].getFourVector().theta()),zvtx)+(Math::theta2eta(nearbyTargetKey.getFourVector().theta())-Math::theta2eta(nearbyClosestKey.getFourVector().theta())),
					       result[i].getFourVector().phi()+(nearbyTargetKey.getFourVector().phi()-nearbyClosestKey.getFourVector().phi()) 
					       ));
    }
  return;
}



template<class T1, class T2>
void QuaeroParticleMorphismsTriple<T1,T2>::clear()
{
  forest.clear();
}

