#include <algorithm>

template<class T0, class T1, class T2>
void MultiDimensionalBinaryForest<T0,T1,T2>::
Add( T0 treeName, 
     std::vector<T1> key, 
     T2 value ) {

   size_t k = std::find( treeNames.begin(), 
		      treeNames.end(), 
		      treeName ) - treeNames.begin();

   if ( k == treeNames.size() ) {
      treeNames.push_back( treeName );
      trees.push_back( MultiDimensionalBinaryTree<T1,T2>() );
   }

   trees[ k ].Add( key, value );

   return;
}

template<class T0, class T1, class T2>
T2 MultiDimensionalBinaryForest<T0,T1,T2>::
findClosest( T0 treeName, 
	     std::vector<T1>& targetKey ) const {  

   size_t k = std::find( treeNames.begin(), 
		      treeNames.end(), 
		      treeName ) - treeNames.begin();

   if ( k == treeNames.size() ) {
      T2 t2;
      return t2;
   }

   return trees[ k ].findClosest( targetKey );
}

template<class T0, class T1, class T2>
void MultiDimensionalBinaryForest<T0,T1,T2>::
clear() {
  //   std::cout << "in forest clear " << endl;
  //Mrenna
   for ( size_t i = 0; i < trees.size(); i++ )
     trees[ i ].clear();  
   trees.clear();
   std::cout << "in forest clear 1 " << endl;
   treeNames.clear();
   std::cout << "in forest clear 2 " << endl;
}


template<class T0, class T1, class T2>
T2 MultiDimensionalBinaryForest<T0,T1,T2>::
findClosest( const T0 &treeName, 
	     std::vector<T1>& targetKey,
	     std::string &searchTrace ) const {  

   size_t k = std::find( treeNames.begin(), 
		      treeNames.end(), 
		      treeName) - treeNames.begin();

   if ( k == treeNames.size() ) {
      cerr << "MultiDimensionalBinaryForest::findClosest: " 
	   << endl << "\t"
	   << "treeName " << treeName << " is invalid. No such tree."
	   << endl;
      T2 t2;
      return t2;
   }

   std::ostringstream oss1;		
   oss1 <<  treeName ;

   searchTrace = ( "Searching " + 
		   std::string(oss1.str()) +
		   " for { " );

   for ( size_t i = 0; i < targetKey.size(); i++ ) {
     std::ostringstream oss2;
     oss2 << targetKey[i];
     
     searchTrace += std::string(oss2.str()) + ", ";
   }
   searchTrace += "}: ";

   return trees[ k ].findClosest( targetKey, searchTrace );
}

template<class T0, class T1, class T2>
double MultiDimensionalBinaryForest<T0,T1,T2>::
bushiness( const T0 &treeName ) const {

   size_t k = std::find( treeNames.begin(), 
		      treeNames.end(), 
		      treeName ) - treeNames.begin();

   if ( k == treeNames.size() ) {
      cerr << "MultiDimensionalBinaryForest::bushiness: " 
	   << endl << "\t"
	   << "treeName " << treeName << " is invalid. No such tree."
	   << endl;
      return 0.0;
   }

   int nodes, fullNodes;
   trees[ k ].bushiness( nodes, fullNodes );   
   return double( fullNodes ) / double( nodes ) * 2.0;

}
