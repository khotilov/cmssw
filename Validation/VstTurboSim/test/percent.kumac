
 exec help
 
 return
 
* ********************************************************************
* This macro prints out help on the functions.
* ********************************************************************
 macro help
   
   kuip/alias/translation off
   
   mess %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   mess PERCENT Macro Set Version 1.0
   mess %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   mess This set of macros has been tested with version 2.07/22
   mess of PAW.  Using it with previous versions might produce
   mess unexpected results.
   mess %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   mess Available Commands:
   mess percent_key   - Key Command using percent coordinates
   mess percent_text  - Text Command using percent coordinates
   mess percent_itx   - Itx Command using percent coordinates
   mess percent_arrow - Arrow Command using percent coordinates
   mess percent_box   - Box Command using percent coordinates
   mess percent_dbox  - Dbox Command using percent coordinates
   mess percent_fbox  - Fbox Command using percent coordinates
   mess percent_line  - Line Command using percent coordinates
   mess %%%%%%%%%%
   mess Execute a command by typing: "exec percent#COMMAND ARGS"
   mess E.g. exec percent#percent_key 10 10 1 text
   mess would place a key of MTYP 1 10% from the left and 10%
   mess from the lower axes.
   mess %%%%%%%%%%
   mess A useful alias is: (Sub. single quotes for the double)
   mess alias/create key "exec percent#percent_key"
   mess This then allows you to use just the standard "key"
   mess command but with percent basis instead of the annoying
   mess PAW NT(Normalization Transformation)
   mess %%%%%%%%%%
   mess If you are using an older version of PAW that does not
   mess support the KUIP/FUNCTIONS object called $OPTION(see if 
   mess $OPTION is listed in HELP KUIP/FUNCTIONS) then for each
   mess plot you wish to use these functions on, you must define
   mess 2 vectors, LOGX and LOGY, which are 1 if the respective 
   mess coordinate axis is Logrithmic and 0 if it is Linear.
   mess E.g. VECT/CREATE LOGX I 1 - for logrithmic X-axis
   mess E.g. VECT/CREATE LOGX I 0 - for linear X-axis
   mess Then just use the commands as normal.
   mess %%%%%%%%%%
   mess Comments and suggestions are welcome!
   mess Send to John Wahl (wahl@hep.uchicago.edu)
   mess %%%%%%%%%%

   kuip/alias/translation on

 return

* ********************************************************************
* This Macro puts a text in the current normalization transformation
* (NT)...or coordinate reference...based on percent values.  The 
* distance is measured in percent from the left axis and from the 
* bottom axis.  So
* percent_text 10 10 'text' other opts
* would place text 10% of the total x distance from the left axis
* and 10% of the total y distance from the bottom axis
* 
* [transx] and [transy] are vectors created by calc_xy...must
* clean up after ourselves
* ********************************************************************
 macro percent_text

   kuip/alias/translation off

   exec calc_xy [1] [2]
   if ([#]<=4) then
     5 = !
   endif
   if ([#]<=5) then
     6 = !
   endif
   graphics/primitives/text transx transy [3] [4] [5] [6]

   kuip/alias/translation on

 return

* ********************************************************************
* This Macro puts a Key in the current normalization transformation
* (NT)...or coordinate reference...based on percent values.  The 
* distance is measured in percent from the left axis and from the 
* bottom axis.  So
* percent_key 10 10 'text' other opts
* would place a key 10% of the total x distance from the left axis
* and 10% of the total y distance from the bottom axis
* 
* [transx] and [transy] are vectors created by calc_xy...must
* clean up after ourselves
* ********************************************************************
 macro percent_key

   kuip/alias/translation off

   exec calc_xy [1] [2]
   if ([#]<=2) then
     3 = !
   endif
   if ([#]<=3) then
     4 = !
   endif
   if ([#]<=4) then
     5 = !
   endif
   if ([#]<=5) then
     6 = !
   endif
   graphics/hplot/key transx transy [3] [4] [5] [6]
   
   kuip/alias/translation on

 return

* ********************************************************************
* This Macro puts a text in the current normalization transformation
* (NT)...or coordinate reference...based on percent values.  The 
* distance is measured in percent from the left axis and from the 
* bottom axis.  So
* percent_itx 10 10 'text' other opts
* would place text 10% of the total x distance from the left axis
* and 10% of the total y distance from the bottom axis
* 
* [transx] and [transy] are vectors created by calc_xy...must
* clean up after ourselves
* ********************************************************************
 macro percent_itx

   kuip/alias/translation off

   exec calc_xy [1] [2]
   graphics/primitives/itx transx transy [3]

   kuip/alias/translation on

 return

* ********************************************************************
* This Macro puts an arrow from x1,y1 to x2,y2 where the coordinates 
* are in percents. See help on /GRAPHICS/PRIMITIVES/ARROW.
* 
* [transx] and [transy] are vectors created by calc_xy...must
* clean up after ourselves
* ********************************************************************
 macro percent_arrow

   kuip/alias/translation off

   exec calc_xy [1] [3]
   x1 = transx
   y1 = transy

   exec calc_xy [2] [4]
   x2 = transx
   y2 = transy
   if ([#]<=4) then
     5 = !
   endif
   graphics/primitives/arrow [x1] [x2] [y1] [y2] [5]

   kuip/alias/translation on

 return

* ********************************************************************
* This Macro puts a box with corners x1,y1 to x2,y2 where the
* coordinates are in percents. See help on /GRAPHICS/PRIMITIVES/BOX.
* 
* [transx] and [transy] are vectors created by calc_xy
* [logx] and [logy] are vectors created by calc_xy for this routine
* only!  The BOX routine wants the log10 of the coordinates if the
* NT is in log base!  This is the only routine that requires this
* feature...extremely STUPID, but the only way box will work.
* ********************************************************************
 macro percent_box

   kuip/alias/translation off

   exec calc_xy [1] [3]
   x1 = transx
   y1 = transy

   exec calc_xy [2] [4]
   x2 = transx
   y2 = transy
   tempx = $eval(LOGX)
   tempy = $eval(LOGY)
   if [tempx]=0 then
     if [tempy]=0 then
       graphics/primitives/box [x1] [x2] _
	 [y1] [y2]
     else
       graphics/primitives/box [x1] [x2] _
	 $sigma(log10([y1])) $sigma(log10([y2]))
     endif
   else
     if [tempy]=0 then
       graphics/primitives/box $sigma(log10([x1])) $sigma(log10([x2])) _
	 [y1] [y2]
     else
       graphics/primitives/box $sigma(log10([x1])) $sigma(log10([x2])) _ 
	 $sigma(log10([y1])) $sigma(log10([y2]))
     endif
   endif

   kuip/alias/translation on

 return

* ********************************************************************
* This Macro puts a filled box with corners x1,y1 to x2,y2 where the
* coordinates are in percents. See help on /GRAPHICS/PRIMITIVES/DBOX.
* 
* [transx] and [transy] are vectors created by calc_xy...must clean up
* after ourselves
* ********************************************************************
 macro percent_dbox

   kuip/alias/translation off

   exec calc_xy [1] [3]
   x1 = transx
   y1 = transy

   exec calc_xy [2] [4]
   x2 = transx
   y2 = transy
   graphics/primitives/dbox [x1] [x2] [y1] [y2]

   kuip/alias/translation on

 return

* ********************************************************************
* This Macro puts a filled box with corners x1,y1 to x2,y2 where the
* coordinates are in percents. See help on /GRAPHICS/PRIMITIVES/DBOX.
* 
* [transx] and [transy] are vectors created by calc_xy...must clean up
* after ourselves
* ********************************************************************
 macro percent_fbox

   kuip/alias/translation off

   exec calc_xy [1] [3]
   x1 = transx
   y1 = transy

   exec calc_xy [2] [4]
   x2 = transx
   y2 = transy

   exec calc_xy [5] [7]
   x3 = transx
   y3 = transy

   exec calc_xy [6] [8]
   x4 = transx
   y4 = transy
   graphics/primitives/dbox [x1] [x2] [y1] [y2] [x3] [x4] [y3] [y4]

   kuip/alias/translation on

 return

* ********************************************************************
* This Macro puts a line with endpoints x1,y1 and x2,y2 where the
* coordinates are in percents. See help on /GRAPHICS/PRIMITIVES/LINE.
* 
* [transx] and [transy] are vectors created by calc_xy.
* ********************************************************************
 macro percent_line

   kuip/alias/translation off

   exec calc_xy [1] [2]
   x1 = transx
   y1 = transy

   exec calc_xy [3] [4]
   x2 = transx
   y2 = transy

   tempx = $eval(LOGX)
   tempy = $eval(LOGY)
   if [tempx]=0 then
     if [tempy]=0 then
       graphics/primitives/line [x1] [y1] _
	 [x2] [y2]
     else
       graphics/primitives/line [x1] $sigma(log10([y1])) _
	 [x2] $sigma(log10([y2]))
     endif
   else
     if [tempy]=0 then
       graphics/primitives/line $sigma(log10([x1])) [y1] _
	 $sigma(log10([x2])) [y2]
     else
       graphics/primitives/line $sigma(log10([x1])) $sigma(log10([y1])) _ 
	 $sigma(log10([x2])) $sigma(log10([y2]))
     endif
   endif
* graphics/primitives/line [x1] [y1] [x2] [y2]

   kuip/alias/translation on

 return

* ********************************************************************
* This Macro calculates the x,y position coordinates of the percent
* coordinates passed in the current normalization transformation
* (NT)...or coordinate reference.  The distance is measured in percent
* from the left axis and from the bottom axis.  
* So calc_xy 10 10 would return x,y s.t. x,y is 10% of the total x 
* distance from the left axis and 10% of the total y distance from the 
* bottom axis
* 
* Dumbest thing in PAW: The BOX command requires the arguments to be
* in log(X) and log(Y) coordinates when ploting in log scale!  So 
* I have to create the LOGX and LOGY vectors that contain 1 if 
* log scale is used.  I am sure I will run across something dumber,
* but this will be hard to beat!
* ********************************************************************
 macro calc_xy
   
   xmin = $grafinfo('WNXMIN')
   xmax = $grafinfo('WNXMAX')
   ymin = $grafinfo('WNYMIN')
   ymax = $grafinfo('WNYMAX')
   xtotal = [xmax] - [xmin]
   ytotal = [ymax] - [ymin]
   
   if $vexist(transx) then
     vect/delete transx
   endif
   if $vexist(transy) then
     vect/delete transy
   endif
   
* For older versions of PAW there is no $OPTION command
* To determine whether we are using an older PAW we will test $OPTION()
   typex = $option('LOGX')
   if ([typex]=0).or.([typex]=1) then
     if $vexist(logx) then
       vect/delete logx
     endif
     if $vexist(logy) then
       vect/delete logy
     endif
     vect/create logx i 0
     vect/create logy i 0
     if $option('LOGY') then
       vect/input logy 1
       if $option('LOGX') then
	 vect/input logx 1
	 x = $SIGMA(10**((([1] / 100) * [xtotal]) + [xmin]))
	 y = $SIGMA(10**((([2] / 100) * [ytotal]) + [ymin]))
       else
	 x = (([1] / 100) * [xtotal]) + [xmin]
	 y = $SIGMA(10**((([2] / 100) * [ytotal]) + [ymin]))
       endif
     else
       if $option('LOGX') then
	 vect/input logx 1
	 x = $SIGMA(10**((([1] / 100) * [xtotal]) + [xmin]))
	 y = (([2] / 100) * [ytotal]) + [ymin]
       else
	 x = (([1]/100)*[xtotal])+[xmin]
	 y = (([2]/100)*[ytotal])+[ymin]
       endif
     endif
   else
     tempx = $eval(LOGX)
     tempy = $eval(LOGY)
     if [tempy]=1 then
       if [tempx]=1 then
	 x = $SIGMA(10**((([1] / 100) * [xtotal]) + [xmin]))
	 y = $SIGMA(10**((([2] / 100) * [ytotal]) + [ymin]))
       else
	 x = (([1] / 100) * [xtotal]) + [xmin]
	 y = $SIGMA(10**((([2] / 100) * [ytotal]) + [ymin]))
       endif
     else
       if [tempx]=1 then
	 x = $SIGMA(10**((([1] / 100) * [xtotal]) + [xmin]))
	 y = (([2] / 100) * [ytotal]) + [ymin]
       else
	 x = (([1]/100)*[xtotal])+[xmin]
	 y = (([2]/100)*[ytotal])+[ymin]
       endif
     endif
   endif
   
   vect/create transx R [x]
   vect/create transy R [y]

 return

