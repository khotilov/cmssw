process MYTEST  = {

untracked PSet maxEvents = {untracked int32 input = -1 } 

    # input file
    source = PoolSource {
       untracked vstring fileNames = {
#       "file:/msa1/ivillella/fastsim/ttbar_mu_pu.root"
#       "file:/msa1/ivillella/fastsim/ttbar_mu.root"
       "file:/msa1/ivillella/fastsim/ttbar_e_pu.root"
#        "file:/msa1/ivillella/fastsim/WenuJets_pt_10_50.root"
#        "file:/msa1/ivillella/fastsim/WenuJets_pt_300_380.root"
#        "file:/msa1/ivillella/fastsim/WenuJets_pt_3000_3500.root"
#"/store/mc/2007/4/12/ttbar_gen_rec_allReco/0001/240F6302-97ED-DB11-94DA-0015C5E6B6CE.root"
          }
             #     untracked uint32 skipEvents = 0
      }

 #   include "PhysicsTools/JetRejectorTool/test/RecoInput.cfi"   #to adapt	
#    replace PoolSource.maxEvents = 100
#   replace PoolSource.skipEvents =  0	

    # initialize MessageLogger
     include "FWCore/MessageLogger/data/MessageLogger.cfi"
    # replace MessageLogger.cout.threshold = "ERROR"	//can be changed to "DEBUG" to see more output on the screen
  

     module seljets = Jet_default_sel{
          InputTag genjetsrc = iterativeCone5GenJetsPt10
          InputTag calojetsrc = iterativeCone5CaloJets
          InputTag jettagsrc = trackCountingHighEffJetTags 
          double jetEnergycut  = 2 // Et jet cut
          double jetNConstMin = 2  // Number of constituents cut (2 = jet with more than 1 constituent)
       }

     module JRobs = JetRejObsProducer{
#         InputTag selgenjetsrc = iterativeCone5GenJets
          InputTag selgenjetsrc = seljets
          InputTag selcalojetsrc = seljets 
          InputTag seljettagsrc =  seljets
	  double  jetNumNoRad  = 0  // 0 = all the jet, 4 = only the jet with at least 4 jets matching the partons (can be used with the signal definition = 1) 
          double leptonIsolation = 0.2
          double DeltaRcut  = 0.3
	  uint32 signalDefinition = 1 // 1: partons, 2: GenJets, 3: PartonJets (only since CMSSW_1_5_0; not available in 1_3_1)
         # Gen-Reco matching:
          InputTag matchMapOne1 = jetMatchOne:src2mtc
          InputTag matchMapOne2 = jetMatchOne:mtc2src  
          }

     # these modules are needed for the Reco-Gen matching: 
     module genJetCollectionClone = GenJetShallowCloneProducer{
          InputTag src = iterativeCone5GenJetsNoNuBSM
         }
     module genJetSele = PtMinCandSelector{
         InputTag src = genJetCollectionClone
         double ptMin        = 0
         }

    module thePartonsStatus3 = GenParticleSelector{
          InputTag selgenjetsrc = genJetCollectionClone
          uint32 signalDefinition = 1 // 1: partons, 2: GenJets, 3: PartonJets (only since CMSSW_1_5_0; not available in 1_3_1)
          }
   
    module caloJetCollectionClone = CaloJetShallowCloneProducer{
          InputTag src = seljets
          }   

    module caloJetSele = PtMinCandSelector{
          InputTag src = caloJetCollectionClone
          double ptMin        = 0
          } 

     module jetMatchOne = CandOneToOneDeltaRMatcher {
          InputTag src      =  thePartonsStatus3 //genJetSele  
          InputTag matched  = caloJetSele
          uint32 algoMethod = 1
          }


   # define an output file and drop everything that you don't want. 
   # Make sure to KEEP your producer output
      module MyOutputModule = PoolOutputModule { 
#   	     untracked string fileName ="JetRejObsProducerparton_mu.root" 
       #   untracked string fileName ="JetRejObsProducerparton_mu_nopu.root" 
          untracked string fileName ="JetRejObsProducerparton_e.root" 
     #     untracked string fileName ="JetRejObsProducerparton_tt0alpgen.root" 
     #     untracked string fileName ="JetRejObsProducerparton_tt1alpgen.root" 
   #       untracked string fileName ="JetRejObsProducerparton_tt2alpgen.root" 
#          untracked string fileName ="JetRejObsProducerparton_tt3alpgen.root" 
  #      untracked string fileName ="JetRejObsProducerparton_tt4alpgen.root" 
          untracked vstring outputCommands = {
            "drop *",
            "keep recoCaloJets_*_*_*",
            "keep recoGenJets_*_*_*",
            "keep recoJetTags_*_*_*",
            "keep recoCandidatesOwned_*_*_*",
            "keep recoVertexs_*_*_*",
            "keep *_*_*_MYTEST"
          }
        }

 
# tell the framework to produce the objects
  path producer = { seljets, genJetCollectionClone, caloJetCollectionClone, caloJetSele, genJetSele, thePartonsStatus3, jetMatchOne, JRobs }

# and save everything
  endpath end = { MyOutputModule }   
}


 		
   # path of modules that will be executed (in this case only one)
 #    path p = { seljets}
   
}	

