
#include "PhysicsTools/PatUtils/interface/JetSelector.h"
#include "DataFormats/Common/interface/RefToBase.h"

using pat::JetSelector;

//______________________________________________________________________________
template<typename Jet>
JetSelector<Jet>::JetSelector( const edm::ParameterSet& config ) :
  selectionType_( config.getParameter<std::string>("type"))
{

  if (selectionType_=="JetMETLikelihood") 
    value_ = config.getParameter<double>("value");
  else 
    value_ = -1;  


  if (selectionType_=="custom") {
    CaloJetSelector_ = std::auto_ptr<CaloJetSelector>( 
                              new CaloJetSelector(config) );
    //PFJetSelector_ = std::auto_ptr<PFJetSelector>( 
    //                          new PFJetSelector(config) );
  }
}


//______________________________________________________________________________
template<typename JetType>
const unsigned int 
JetSelector<JetType>::filter( const unsigned int&        index, 
                              const edm::View<JetType>& Jets,
                              const JetValueMap * JetMap
                          ) const
{

  bool result = false;

  if (selectionType_=="none")  {

    result = true;
  }
  else if (selectionType_=="JetMETLikelihood" && JetMap!=0)  {
    ///Using the JetRejectorTool, for details see
    ///https://twiki.cern.ch/twiki/bin/view/CMS/JetRejectorTool 
    const double likelihood = (*JetMap)[ Jets.refAt(index) ];
    result = ( likelihood > value_ );
  } 
  else if ( selectionType_ == "custom" ) {

    const JetType& Jet = Jets[index];
    const reco::CaloJet * caloJet = 0;
    const reco::PFJet   * pfJet   = 0;
    caloJet = dynamic_cast<const reco::CaloJet*>(&Jet);
    pfJet   = dynamic_cast<const reco::PFJet*>(  &Jet);

    ///specific selection for CaloJets
    if (caloJet) result = CaloJetSelector_->filter( *caloJet );


    ///specific selection for PFJets
    //not implemented yet!
    //if (pfJet) result = PFJetSelector_->filter(  *pfJet);

  }  else
    // Throw! unknown configuration
    throw edm::Exception(edm::errors::Configuration) 
          << "Unknown Jet ID selection " << selectionType_;


  return result;
}

