
#include "PhysicsTools/PatUtils/interface/JetSelector.h"

using pat::JetSelector;

//______________________________________________________________________________
template<typename Jet>
JetSelector<Jet>::JetSelector( const edm::ParameterSet& config ) 
{
  CaloJetSelector_ = std::auto_ptr<CaloJetSelector>( 
                            new CaloJetSelector(config) );
  //PFJetSelector_ = std::auto_ptr<PFJetSelector>( 
  //                          new PFJetSelector(config) );
}


//______________________________________________________________________________
template<typename JetType>
const unsigned int 
JetSelector<JetType>::filter( const unsigned int&        index, 
                          const edm::View<JetType>& Jets
                          //const JetIDmap&       JetIDs
                          ) const
{
  bool result = true;

  const JetType& Jet = Jets[index];
  const reco::CaloJet * caloJet = 0;
  const reco::PFJet   * pfJet   = 0;
  caloJet = dynamic_cast<const reco::CaloJet*>(&Jet);
  pfJet   = dynamic_cast<const reco::PFJet*>(  &Jet);
  
  ///specific selection for CaloJets
  if (caloJet) result = CaloJetSelector_->filter( *caloJet );

  ///specific selection for PFJets
  //if (pfJet) result = PFJetSelector_->filter(  *pfJet);

  return result;
}


//______________________________________________________________________________
/*
const reco::JetIDRef& 
JetSelector::JetID( const unsigned int& index,
                              const edm::View<Jet>& Jets,
                              const JetIDmap& JetIDs
                              ) const
{
  // Find Jet ID for Jet with index 'index'
  edm::Ref<std::vector<Jet> > jetsRef = Jets.refAt(index).castTo<edm::Ref<std::vector<Jet> > >();
  JetIDmap::const_iterator JetID = JetIDs.find( jetsRef );

  // Return corresponding elecID
  return JetID->val;
}
*/
