

Here is a master list of things we're going to need. I tried to synopsize a
few things. Some of these are probably "full Analysis Toolkit" 
functionality so we'll need a few thousand "strategy meetings" and a "Task Force" 
to decide on it while our grandmothers read poetry to the Giant Bugblatter Beast 
of Thraal to appease the Vogons. Meanwhile, we can just write the code and get 
it to do what we want it to do ;).


1. Easy way to change histogramming axes (maybe just "coarse", "medium", and "fine") 
should do it, "coarse" being 10 bins, "medium" being 50 or so, and "fine" being 100.
We can bring in "ultra fine" if we want (we should head to the local Home Depot to
see what varieties we can get of sandpaper).  

2. Handling all of the following:
     - fill( Object *);
     - fill( Object &);
     - fill( vector<Object *> );
     - fill( vector<Object &> );
     - fill( Handle<vector<Object *> > );
     - fill( Handle<vector<Object &> > );

3. Multiple histograms in list versus sum of them all (stack versus no stack)

4. the base class should also have at least some kind of crude
   management, like "int histoLevel_", so that we can set things like

     histoLevel  < 0   -- switch yourself off
     histoLevel == 0   -- kinematics only from reco::Candidate
     histoLevel == 5    -- kinem + basic stuff (say this is the default)
     histoLevel > 10    -- histogram everything in sight
     histoLevel > 99    -- super-verbose, all debugging output turned on
                           (we could also have a separate verbosity flag
                            but that may not be necessary).

   These should also be applied to the filter and what we want to keep and/or nix.


5. another useful thing would to be to allow either composite
   HistoObjects which can execute other histo objects... or,
   within the thing that runs the histo makers, allow more than
   one.  Here's a CDF example

        add McInfoNt                 mcnfo
        add TrackNt                  trkNt
        trkNt
           add TrackCovPlotPiece     cov
           add TrackAssocSvtMatchNt  svt
           add FitParamPlotPiece     fit
           if { $doPID } {
              add TrackAssocDedxNt   dedxNt
              add HitDefnPlotPiece   hit
              add TrackAssocTofNt    tofNt
           }
       exit

  (OK, this uses tcl but you can see what kind of detailed information
   can be added; each little thingy is from 5-6 to up to 20-ish
   histograms or ntuple variables.)  In fact I'd like to make it into
   something much more simple, like a line in the config file that
   looks like this

    string histGroupsList = "trackPars,pixHits,trajectory,qualInfo,iso"


   While this sounds fancy, it actually is remarkably simple.  The
   composite histo maker simply forwards the calls to its subcomponents,
   and that's the end of it.


6. finally, I'd try to limit the use of parameter sets to the top-level
   thingy (i.e the module), since that will give us trouble later when
   we try to swtich to FWLite.

7. Some functionality to plot some common 4-vector information for
   anything that derives from reco::Candidate, such as
        - plot (electron1 + jet2).mass            # plots mass of electron1 + jet2
	- plot (electrons x 1, met x 1, jet x 2)  # plots all combinations of 1 electron, 2 jets, and 1 met
   These would be based on the reco::Candidate model to some extent, but I think we can make a little more
   functionality out of it. 

8. Possibly some kinematic fitting functionality and constraints (eventually). 

