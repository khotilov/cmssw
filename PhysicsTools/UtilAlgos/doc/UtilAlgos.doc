/*!
\page PhysicsTools_UtilAlgos Package PhysicsTools/UtilAlgos
<center>
<small>
<a href=http://cmsdoc.cern.ch/swdev/viewcvs/viewcvs.cgi/CMSSW/PhysicsTools/UtilAlgos/?cvsroot=CMSSW>CVS head for this package</a> - 
<a href=http://cmsdoc.cern.ch/swdev/viewcvs/viewcvs.cgi/CMSSW/PhysicsTools/UtilAlgos/.admin/developers?rev=HEAD&cvsroot=CMSSW&content-type=text/vnd.viewcvs-markup>Administrative privileges</a>
</small>
</center>

\section desc Description
Framework generic utility modules

\subsection selectors Selector modules
- ObjectSelector<b><S></b>: generic object selection module. <br>
  The <a name="sel_algo"><b>Selection Algorithm</b></a> <tt>S</tt> should
  define the following interface:
\htmlonly
<pre>
  class MySelection {
    // collection type
    typedef [...] collection;
    // iterator over result type. 
    // could be std::vector<collection::value_type>::const_iterator
    typedef [...] const_iterator;
    // constructor from parameter set configurability
    MySelection( const edm::ParameterSet & );
    // select object from a collection and 
    // possibly event content
    void select( const collection &, const edm::Event & );
    // iterators over selected objects: collection begin
    const_iterator begin() const;
    // iterators over selected objects: collection end
    const_iterator end() const;
    // true if no object has been selected
    bool empty() const;
  };
</pre>
\endhtmlonly

\subsection sel_utilities Selector module utilities 
- SingleElementCollectionSelector<b><C, S></b>: model of <a href="#sel_algo">Selection Algorithm</a> that selects
  objects one by one from a collection of type <tt>C</tt> based on a <a href="http://www.sgi.com/tech/stl/Predicate.html">predicate
  object</a> of type <tt>S</tt>.
  For instance, to select all tracks with <i>p<sub>t</sub></i> larger than a specified
  cut, it is possible to use the following module:
\htmlonly
<pre>
  typedef ObjectSelector<
            SingleElementCollectionSelector<
              reco::TrackCollection,
              PtMinSelector<reco::Track> 
            >
          > PtMinTrackSelector;
</pre>
\endhtmlonly

- SortCollectionSelector<b><C, S></b>: model of <a href="#sel_algo>Selection Algorithm</a> that takes the
  first N objects of a collection of type <tt>C</tt> sorting them according to the
  http://www.sgi.com/tech/stl/StrictWeakOrdering.html">strict weak ordering</a> <tt>S</tt>.
  The parameter <tt>max</tt> can be used via configuration file.
  For instance, to select the N tracks with the largest <i>p<sub>t</sub></i>, it is possible
  to use the following module:
\htmlonly
<pre>
  typedef ObjectSelector<
            SortCollectionSelector<
              reco::TrackCollection,
              PtInverseComparator<reco::Track> 
            >
          > LargestPtTrackSelector;
</pre>
\endhtmlonly

- WindowCollectionSelector<b><C, M></b>: model of <a href="#sel_algo>Selection Algorithm</a> that
  selects object pairs whose combination, according to the 
  <a href="http://www.sgi.com/tech/stl/BinaryFunction.html">binary function</a> <tt>M</tt>,
  lies within a specified window. The window range aqre specified with the parameters
  <tt>min</tt> and <tt>max</tt> via configuration file.
  For instance, to select track pairs with invariant mass within a specified range, 
  it is possible to use the following module:
\htmlonly
<pre>
  typedef ObjectSelector<
            WindowCollectionSelector<
              reco::TrackCollection,
              MasslessInvariantMass<reco::Track> 
            >
          > MassWindowTrackSelector;
</pre>

\subsection other Other utility modules
- Merger: merges an arbitrary number of collections into a single collection. 
No overlap is checked, so if the same object appears in more than one collection
it is saved more than once in the output collection.
- ObjectCounter: counts the number of objects in a collection and prints a
summary report at the end of a job.

\subsection modules Modules
None.

\subsection tests Unit tests and examples
None.

\section status Status and planned development
To be reviewed.

<hr>
Last updated: @DATE@ L. Lista
*/
