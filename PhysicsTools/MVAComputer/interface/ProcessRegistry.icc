#ifndef PhysicsTools_Calibration_ProcessRegistry_icc
#define PhysicsTools_Calibration_ProcessRegistry_icc
// -*- C++ -*-
//
// Package:     Discriminator
// Class  :     ProcessRegistry
//

//
// Author:	Christophe Saout <christophe.saout@cern.ch>
// Created:     Sat Apr 24 15:18 CEST 2007
// $Id: ProcessRegistry.icc,v 1.3 2007/05/21 02:02:00 saout Exp $
//

#include <memory>
#include <string>
#include <map>

#include "PhysicsTools/MVAComputer/interface/ProcessRegistry.h"

namespace PhysicsTools {

template<class Base_t, class CalibBase_t, class Parent_t>
std::map<std::string, const ProcessRegistry<Base_t, CalibBase_t, Parent_t>*>
	&ProcessRegistry<Base_t, CalibBase_t, Parent_t>::getRegistry()
{
	if (!registry.get())
		registry = std::auto_ptr<RegistryMap>(new RegistryMap);
	return *registry;
}

template<class Base_t, class CalibBase_t, class Parent_t>
Base_t *ProcessRegistry<Base_t, CalibBase_t, Parent_t>::create(
		const char *name, const CalibBase_t *calib, Parent_t *parent)
{
	typename RegistryMap::iterator pos = getRegistry().find(name);

	if (pos == getRegistry().end())
		return 0;

	return pos->second->instance(name, calib, parent);
}

template<class Base_t, class CalibBase_t, class Parent_t>
void ProcessRegistry<Base_t, CalibBase_t, Parent_t>::registerProcess(
			const char *name, const ProcessRegistry *process)
{ getRegistry()[name] = process; }

template<class Base_t, class CalibBase_t, class Parent_t>
void ProcessRegistry<Base_t, CalibBase_t, Parent_t>::unregisterProcess(
							const char *name)
{ getRegistry().erase(name); }

template<class Base_t, class CalibBase_t, class Parent_t>
std::auto_ptr<typename ProcessRegistry<Base_t, CalibBase_t, Parent_t>::RegistryMap>
		ProcessRegistry<Base_t, CalibBase_t, Parent_t>::registry;

} // namespace PhysicsTools

#endif // PhysicsTools_Calibration_ProcessRegistry_icc
