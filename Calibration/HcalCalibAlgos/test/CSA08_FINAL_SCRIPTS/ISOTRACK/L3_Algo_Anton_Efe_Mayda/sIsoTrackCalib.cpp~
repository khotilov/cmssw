////////////////////////////////////////////////////////
// Quick and dirty analysis and constants determination 
// for IsoTracks.  Requires MinL3AlgoUniv.h
// Uses ASCII input file at this time 
// To be refined/generalized at a later time...
//  
// Anton Anastassov 
// May 16, 2008
//
////////////////////////////////////////////////////////

#include <iostream>
#include <fstream>
#include <cmath>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <numeric>

#include "TVector2.h"
#include "TString.h"
#include "TH1F.h"
#include "TCanvas.h"
#include "TMath.h"
#include "TImage.h"
#include "TDatime.h"
#include "TFile.h"
#include "TGraph.h"

#include "MinL3AlgoUniv.h"
#include "parameters.h"

using namespace std;

int subdetId(unsigned int id);
int iEta(unsigned int id);
int iPhi(unsigned int id);
int depth(unsigned int id);
// construct id from available info
unsigned int HcalDetId(int subdet, int tower_ieta, int tower_iphi, int depth);

void makeTextFile(map<int, float> &coef);
void sumDepths(vector<float> &e, vector<unsigned int> &c);
void combinePhi(vector<float> &e, vector<unsigned int> &c);

enum HcalSubdetector { HcalEmpty=0, HcalBarrel=1, HcalEndcap=2, HcalOuter=3, HcalForward=4, HcalTriggerTower=5, HcalOther=7 };

Float_t nonLinResp(Float_t trkP);


void sIsoTrackCalib() {

  TH1F* h1_pSpectrum = new TH1F("h1_pSpectrum", "Momentum spectrum of all preselected tracks; p (GeV); Number of tracks", 300, 0, 300);

  std::vector<float> thisCluster;
  std::vector<unsigned int>   idCluster;
  float cellEnergy;

  std::vector<std::vector<float> > clusters;
  std::vector<std::vector<unsigned int> > cellIds;
  std::vector<float> energies;

  unsigned int cell;
  float trkMomentum;
  int numberOfCells;

  ifstream _inAsciiFile;
  _inAsciiFile.open(_fileName);

  Int_t nEntries = 0;
  Int_t nGoodEntries = 0;
  bool acceptEntry = true;

  while (!_inAsciiFile.eof() && nEntries <= MAX_NUM_ENTRIES) {

    _inAsciiFile >> numberOfCells;
    _inAsciiFile >> trkMomentum;

    h1_pSpectrum->Fill(trkMomentum); // all tracks

    for (int i=0; i<numberOfCells; ++i) {
      _inAsciiFile >> cellEnergy;
      _inAsciiFile >> cell;
      thisCluster.push_back(cellEnergy>0? (cellEnergy * nonLinResp(trkMomentum)) :0.0);
      idCluster.push_back(cell);
    }

    if (trkMomentum > MIN_TRACK_P && trkMomentum < MAX_TRACK_P &&
      accumulate(thisCluster.begin(), thisCluster.end(), 0)/trkMomentum > MIN_EOVERP) {

      // IF true, put all energies in depth=1 ! Cells at depth > 1 are removed from the minimization.
      if (SUM_DEPTHS) sumDepths(thisCluster, idCluster);

      // combine in phi *before* minimization
      if (COMBINE_PHI) combinePhi(thisCluster, idCluster);

      clusters.push_back(thisCluster);
      cellIds.push_back (idCluster);
      energies.push_back(trkMomentum);
      ++nGoodEntries;

    }  // end of good entries in energy window

    thisCluster.clear();
    idCluster.clear();
    ++nEntries;
  } // end of loop over events in the file


  // Now the L3 algorithm
  //
  int eventWeight = 2;  // 2 is the default (try at some point 0,1,2,3)
  MinL3AlgoUniv<unsigned int>* MyL3Algo = new MinL3AlgoUniv<unsigned int>(eventWeight);
  int numIterations = 10;  // default 10
  std::map<unsigned int, float> solution;
  solution = MyL3Algo->iterate(clusters, cellIds, energies, numIterations);

  // define histograms -----------------------------------------------------

  TString histoName_0 = "Correction coef: iEta = ";
  TString histoId_0 = "h1_coef_iEta_";
  TString histoName, histoId;

  map<Int_t, TH1F* > h1;
  map<Int_t, TH1F* > h1_ecPos;
  map<Int_t, TH1F* > h1_ecNeg;

  for (int i=-BARREL_ABS_IETA_MAX; i<=BARREL_ABS_IETA_MAX; ++i) {
    if (i==0) continue;
    histoId = histoId_0;
    histoId += i;
    histoName = histoName_0;
    histoName += i;
    h1[i] = new TH1F(histoId, histoName, N_BINS, hLow, hHigh);
  }

  // endcap positive
  for (int i=ENDCAP_ABS_IETA_MIN; i<=ENDCAP_ABS_IETA_MAX; ++i) {
    histoId = histoId_0;
    histoId += i;
    histoName = histoName_0;
    histoName += i;
    h1_ecPos[i] = new TH1F(histoId, histoName, N_BINS, hLow, hHigh);
  }

  // endcap negative
  for (int i=-ENDCAP_ABS_IETA_MIN; i>=-ENDCAP_ABS_IETA_MAX; --i) {
    histoId = histoId_0;
    histoId += i;
    histoName = histoName_0;
    histoName += i;
    h1_ecNeg[i] = new TH1F(histoId, histoName, N_BINS, hLow, hHigh);
  }

  for (map<unsigned int, float>::iterator m_it = solution.begin(); m_it != solution.end(); ++m_it) {
    int thisIEta = iEta(m_it->first);
    // for barrel
    if (abs(thisIEta) <= BARREL_ABS_IETA_MAX && thisIEta !=0 && depth(m_it->first) ==1) {
        h1[thisIEta]->Fill(m_it->second);
    }
    // for endcaps
    else if (abs(thisIEta) <= ENDCAP_ABS_IETA_MAX && abs(thisIEta) >= ENDCAP_ABS_IETA_MIN && depth(m_it->first) ==1) {
      (thisIEta>0)? h1_ecPos[thisIEta]->Fill(m_it->second) :
                    h1_ecNeg[thisIEta]->Fill(m_it->second);
    }
  }


  // Get the means of the solutions for towers in the same ring.
  // Will produce distributions of correction coeeficients for
  // channels wihin iEta ring if no phi mapping is done in advenace.
  // If the summation over towers in phi is done in advance,
  // one gets only one entry per iEta (the solution for the eta ring).

  map<int, float> corrCoef;    // one coef per iEta
  map<int, float> corrCoefRms; // one coef per iEta

  // barrel
  for (int i=-BARREL_ABS_IETA_MAX; i<=BARREL_ABS_IETA_MAX; ++i)  {
    if (i==0) continue;
    corrCoef   [i] = h1[i]->GetMean();
    corrCoefRms[i] = h1[i]->GetRMS(); 
  }

  // endcap
  for (int i=ENDCAP_ABS_IETA_MIN; i<=ENDCAP_ABS_IETA_MAX; ++i) {
    corrCoef   [-i] = h1_ecNeg[-i]->GetMean();
    corrCoefRms[-i] = h1_ecNeg[-i]->GetRMS();
    corrCoef   [ i] = h1_ecPos[i]->GetMean();
    corrCoefRms[ i] = h1_ecPos[i]->GetRMS();
  }

  //@@@@@@@@@@@
  for (int i=16;i<=29; ++i) {
    corrCoef   [-i] = 1.0;
    corrCoef   [ i] = 1.0;
  }
  //@@@@@@@@@@@

  // histograms of the spread of coef ontained for an iEta rung
  Float_t xEta[2*ENDCAP_ABS_IETA_MAX], coefEta[2*ENDCAP_ABS_IETA_MAX];
  TH1F* spredOfCorBarrel    = new TH1F("spredOfCorBarrel",    "spredOfCorBarrel",    400, 0, 2.0);
  TH1F* spredOfCorEndcapPos = new TH1F("spredOfCorEndcapPos", "spredOfCorEndcapPos", 400, 0, 2.0);
  TH1F* spredOfCorEndcapNeg = new TH1F("spredOfCorEndcapNeg", "spredOfCorEndcapNeg", 400, 0, 2.0);

  Int_t counter = 0;
  for (map<int, float>::iterator m_it = corrCoef.begin(); m_it != corrCoef.end(); ++m_it) {

    int thisIEta = m_it->first;
    if (abs(thisIEta)<=BARREL_ABS_IETA_MAX)
      spredOfCorBarrel->Fill(corrCoef[m_it->first]);
    if (thisIEta >= -ENDCAP_ABS_IETA_MAX && thisIEta <= -ENDCAP_ABS_IETA_MIN) 
      spredOfCorEndcapNeg->Fill(corrCoef[m_it->first]);
    if (thisIEta <= ENDCAP_ABS_IETA_MAX && thisIEta >= ENDCAP_ABS_IETA_MIN)
        spredOfCorEndcapPos->Fill(corrCoef[m_it->first]);
    coefEta[counter] = corrCoef[thisIEta];
    xEta   [counter]  = thisIEta;
    ++counter;
  }

  TGraph* coefEtaShape = new TGraph(2*ENDCAP_ABS_IETA_MAX, xEta, coefEta);
 
  for (int i=-ENDCAP_ABS_IETA_MAX; i<=ENDCAP_ABS_IETA_MAX; ++i) {
    if (i==0) continue;
    cout << "iEta: " << i << " corrCoef: " <<  corrCoef[i] << " corrCoefRms: " << corrCoefRms[i] << endl;
  }

  // save the coef in a formatted ascii file
  makeTextFile(corrCoef);


  // Plot results **************************************************
  
  int padCounter = 0; // for multiple plots in a canvas  

  TCanvas* can_base = new TCanvas("can_base", "can_base");
  can_base->cd();
  h1_pSpectrum->Draw();


  // Plot the distribution of individual tower coef within a iEta ring
  // Relevan if minimization is done cell-by-cell

  if (!COMBINE_PHI) {

    TCanvas* can = new TCanvas("Coef", "Coef", 1600, 1100);
    can->Divide(6,6);
    padCounter = 0;  
    for (map<Int_t, TH1F* >::iterator m_it = h1.begin(); m_it != h1.end(); ++m_it) { 
      can->cd(++padCounter);
      m_it->second->Draw();
    }

    TCanvas* can_ecPos = new TCanvas("can_ecPos", "can_ecPos", 1600, 1100);
    can_ecPos->Divide(4,3);
    padCounter = 0;  
    for (map<Int_t, TH1F* >::iterator m_it = h1_ecPos.begin(); m_it != h1_ecPos.end(); ++m_it) { 
      can_ecPos->cd(++padCounter);
      m_it->second->Draw();
    }

    TCanvas* can_ecNeg = new TCanvas("can_ecNeg", "can_ecNeg", 1600, 1100);
    can_ecNeg->Divide(4,3);
    padCounter = 0;
    for (map<Int_t, TH1F* >::iterator m_it = h1_ecNeg.begin(); m_it != h1_ecNeg.end(); ++m_it) { 
      can_ecNeg->cd(++padCounter);
      m_it->second->Draw();
    }

  }

  //--- save histograms for distributions of iEta rings

  if (SAVE_PLOTS) {

  TString imageFile;
    padCounter = 0;
  
    for (map<int, TH1F* >::iterator m_it = h1.begin(); m_it != h1.end(); ++m_it) {

      int iEta = m_it->first;
      TCanvas* img_can = new TCanvas();
      img_can->cd();
      h1[iEta]->Draw();
      TImage *img = TImage::Create();
      img->FromPad(img_can);
      imageFile = imageFileDir;
      imageFile += "coef_iEta_";
      imageFile += iEta;
      imageFile += ".png";
      img->WriteImage(imageFile.Data());
      delete img;
      delete img_can;
    } // if write image files
    }

  TCanvas* can_summary = new TCanvas("can_summary", "can_summary", 1200, 800);
  can_summary->Divide(2,2);
  can_summary->cd(1);
  coefEtaShape->Draw("A*");
  can_summary->cd(2);
  spredOfCorBarrel->Draw();
  can_summary->cd(3);
  spredOfCorEndcapPos->Draw();
  can_summary->cd(4);
  spredOfCorEndcapNeg->Draw();


  cout << "--------------------------------------------------" << endl;
  cout << "Number of entries in the files: "            << nEntries << endl;
  cout << "Number of entries used in the calibration: " << nGoodEntries << endl;
  cout << "Selection efficiency: " << float(nEntries)/float(nGoodEntries) << endl;
  cout << "--------------------------------------------------" << endl;

  return;
}


//****************************************************************************
//
// utilities
//

// tower info from detid 
int iEta(unsigned int id) {
  return ((id>>7)&0x3f) * ( (id&0x2000)?(1):(-1) );
}
int iPhi(unsigned int id) {
  return id&0x7F;
}
int depth(unsigned int id) {
  return (id>>14)&0x7;
}

int subdetId(unsigned int id) {
  return ((id>>25)&0x7);
}

unsigned int HcalDetId(int subdet, int tower_ieta, int tower_iphi, int depth) {
  // HARDCODED FOR HCAL!!!
  unsigned int id = 0;
  id=((4&0xF)<<28)|((subdet&0x7)<<25);
  id |= ((depth&0x7)<<14) |
    ((tower_ieta>0)?(0x2000|(tower_ieta<<7)):((-tower_ieta)<<7)) |
    (tower_iphi&0x7F);
  return id;
}

void sumDepths(vector<float> &e, vector<unsigned int> &c) {

  // do it the dumb way...

  if (e.size()==0) return;

  vector<float> depth1_E;        // contain only depth 1
  vector<unsigned int> depth1_c; //

  vector<float> depth23_E;         // Depth > 1
  vector<unsigned int> depth23_c;  //

  for (unsigned int i=0; i<e.size(); ++i) {
    if (depth(c.at(i))==1) {
      depth1_c.push_back(c.at(i));
      depth1_E.push_back(e.at(i));
    }
    else {
      depth23_c.push_back(c.at(i));
      depth23_E.push_back(e.at(i));
    }
  }

  // case where depth 1 has zero energy, but higher depths with same (iEta, iPhi) have energy
  // since we put everything in depth 1 we must make sure that these are recovered
  for (unsigned int i=0; i<depth23_c.size(); ++i) {
    bool foundDepthOne = false;
    for (int j=0; j<depth1_c.size(); ++j) {
      if (iEta(depth1_c.at(j))==iEta(depth23_c.at(i)) && iPhi(depth1_c.at(j))==iPhi(depth23_c.at(i)))
        foundDepthOne = true;
      continue;
    }
    if (!foundDepthOne) { // create entry for depth 1 with 0 energy
      unsigned long newId = HcalDetId(subdetId(depth1_c.at(i)), iEta(depth1_c.at(i)), iPhi(depth1_c.at(i)), 1);       
      depth1_c.push_back(newId);
      depth1_E.push_back(0.0);
      cout << "\nCreated a dummy cell in depth one to recover energy!!!\n" << endl;
    }
  }

  for (unsigned int i=0; i<depth1_E.size(); ++i) {
    for (unsigned int j=0; j<depth23_E.size(); ++j) {
      if (iEta(depth1_c.at(i))==iEta(depth23_c.at(j)) && iPhi(depth1_c.at(i))==iPhi(depth23_c.at(j))) { 
        depth1_E.at(i) += depth23_E.at(j);
        depth23_E.at(j) =0; // paranoid, aren't we...
      }
    }
  }

  // replace the original vectors with the new ones
  e = depth1_E;
  c = depth1_c;

  return;
}

// Map: NxN -> N cluster
// Comine the energies of cells with the same iEta
void combinePhi(vector<float> &e, vector<unsigned int> &c) {

 if (e.size()==0) return;

  // the new containers
  vector<float> eta_e;        // contains sum of energies for eta slice
  vector<unsigned int> eta_c; // id of of cell with iEta and **iPhi=1**

  map<unsigned long, vector<float> > etaSliceE; // keyed by id of of cell with iEta and **iPhi=1** 

  // map the cells to the eta ring
  for (int i=0; i<c.size(); ++i) {
    unsigned long thisKey = HcalDetId(subdetId(c.at(i)), iEta(c.at(i)), 1, depth(c.at(i)) );
    etaSliceE[thisKey].push_back(e.at(i));
  }

  for (map<unsigned long, vector<float> >::iterator m_it = etaSliceE.begin(); m_it != etaSliceE.end(); ++m_it) {
    eta_c.push_back(m_it->first);
    eta_e.push_back(accumulate(m_it->second.begin(), m_it->second.end(), 0.0) );
  }
  // replace the original vectors with the new ones
  c = eta_c;
  e = eta_e;

  return;
}


void makeTextFile(map<int, float> &coef) {

  // Hardcoded for the HO barrel and HE!!!!!
  // Note: In this itearion we ALWAYS sum depths, and put the same coef
  // for all depths. This is reflected in creating the output file. 

  // This file is produced separately for HB and HE (as spcified in parameters.h)
  //

  int i_det = 1;

  if (subdetectorName!="HE" && subdetectorName!="HB") {
    cout << "\nnnOutput is produced only for selection HE or HB!\n";
    cout << "Specify selectionin parameters.h\n\n";
    return;
  }
  else if (subdetectorName=="HE") i_det = 2;

  TString outFileName = constFileName + "_" + subdetectorName + ".txt";
  ofstream _outFile(outFileName);

  TString det[8] = {"EMPTY", "HB", "HE", "HO", "HF", "TRITWR", "UNDEF", "OTHER"};

  int NUM_PHI = 72;
  int NUM_DEPTHS = 1;



  for (int i_phi=1; i_phi<=NUM_PHI; ++i_phi) {

    int ABS_IETA_MAX =  BARREL_ABS_IETA_MAX; // barrel
    int ABS_IETA_MIN =  1;
    if (i_det==2) {
      ABS_IETA_MAX =  ENDCAP_ABS_IETA_MAX; // barrel
      //      ABS_IETA_MIN =  ENDCAP_ABS_IETA_MIN;//@@@@@@@@@@!!!!!!!!!!
      ABS_IETA_MIN = 16;
    }

    for (int i_side=-1; i_side<=1; i_side+=2) {

//      for (int i_eta=ABS_IETA_MIN; i_eta<=ABS_IETA_MAX; ++i_eta) {
   for (int i_eta=ABS_IETA_MIN; i_eta<=29; ++i_eta) {

        if (i_eta==0) continue;

        if (i_eta<=14) NUM_DEPTHS = 1;
	if (i_eta==17) NUM_DEPTHS = 1;//efemayda
			 //        else if (i_eta==15 || (i_eta>=17 && i_eta<27) ) NUM_DEPTHS = 2;
        else if (i_eta==15 || (i_eta>=18 && i_eta<27) ) NUM_DEPTHS = 2;//efemayda 
        else if (i_eta==16 || (i_eta>=27 && i_eta<29) ) NUM_DEPTHS = 3;
        else if (i_eta==29) NUM_DEPTHS = 2;

      

        for (int i_depth=1; i_depth<=NUM_DEPTHS; ++i_depth) {
          // coef for all depths are the same for now

           if (i_eta>=21 && i_eta<=29 && (i_phi%2)==0) continue;  

	   //@@@@@@@@@@@@@@@
	   if (i_eta==16 && i_depth<3) continue;
	   //@@@@@@@@@@@@@@@

          TString subDetFlag = subdetectorName;
          if (i_eta==16 && i_depth==3) subDetFlag = "HE"; //special case
          _outFile 
            << i_eta*i_side << "\t\t" 
            << i_phi << "\t\t" 
            << i_depth << "\t\t" 
            << subDetFlag << "\t\t"  // put 
            << coef[i_eta*i_side] << "\t\t"
            << HcalDetId(i_det, i_eta*i_side, i_phi, i_depth)
            << endl;;   
        } // loop over depths
      } // loop over eta
    } // sides
  } // loop over phi

  return;
}

Float_t nonLinResp(Float_t trkP) {

  if (!APPLY_NON_LIN_COR) return 1.0;
  return 1/(0.574+0.109*log(trkP));
}

